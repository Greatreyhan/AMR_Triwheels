
AMR_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005db8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005f50  08005f50  00015f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f68  08005f68  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005f68  08005f68  00015f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f70  08005f70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f70  08005f70  00015f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f74  08005f74  00015f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005f78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000010  08005f84  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  08005f84  0002051c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ec37  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002029  00000000  00000000  0002ecb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d38  00000000  00000000  00030ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a65  00000000  00000000  00031a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016986  00000000  00000000  0003247d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f597  00000000  00000000  00048e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008eb7e  00000000  00000000  0005839a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039fc  00000000  00000000  000e6f18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000ea914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005f38 	.word	0x08005f38

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08005f38 	.word	0x08005f38

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_uldivmod>:
 8000ad4:	b953      	cbnz	r3, 8000aec <__aeabi_uldivmod+0x18>
 8000ad6:	b94a      	cbnz	r2, 8000aec <__aeabi_uldivmod+0x18>
 8000ad8:	2900      	cmp	r1, #0
 8000ada:	bf08      	it	eq
 8000adc:	2800      	cmpeq	r0, #0
 8000ade:	bf1c      	itt	ne
 8000ae0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ae4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae8:	f000 b970 	b.w	8000dcc <__aeabi_idiv0>
 8000aec:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000af4:	f000 f806 	bl	8000b04 <__udivmoddi4>
 8000af8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000afc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b00:	b004      	add	sp, #16
 8000b02:	4770      	bx	lr

08000b04 <__udivmoddi4>:
 8000b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b08:	9e08      	ldr	r6, [sp, #32]
 8000b0a:	460d      	mov	r5, r1
 8000b0c:	4604      	mov	r4, r0
 8000b0e:	460f      	mov	r7, r1
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d14a      	bne.n	8000baa <__udivmoddi4+0xa6>
 8000b14:	428a      	cmp	r2, r1
 8000b16:	4694      	mov	ip, r2
 8000b18:	d965      	bls.n	8000be6 <__udivmoddi4+0xe2>
 8000b1a:	fab2 f382 	clz	r3, r2
 8000b1e:	b143      	cbz	r3, 8000b32 <__udivmoddi4+0x2e>
 8000b20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b24:	f1c3 0220 	rsb	r2, r3, #32
 8000b28:	409f      	lsls	r7, r3
 8000b2a:	fa20 f202 	lsr.w	r2, r0, r2
 8000b2e:	4317      	orrs	r7, r2
 8000b30:	409c      	lsls	r4, r3
 8000b32:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b36:	fa1f f58c 	uxth.w	r5, ip
 8000b3a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b3e:	0c22      	lsrs	r2, r4, #16
 8000b40:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b44:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b48:	fb01 f005 	mul.w	r0, r1, r5
 8000b4c:	4290      	cmp	r0, r2
 8000b4e:	d90a      	bls.n	8000b66 <__udivmoddi4+0x62>
 8000b50:	eb1c 0202 	adds.w	r2, ip, r2
 8000b54:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b58:	f080 811c 	bcs.w	8000d94 <__udivmoddi4+0x290>
 8000b5c:	4290      	cmp	r0, r2
 8000b5e:	f240 8119 	bls.w	8000d94 <__udivmoddi4+0x290>
 8000b62:	3902      	subs	r1, #2
 8000b64:	4462      	add	r2, ip
 8000b66:	1a12      	subs	r2, r2, r0
 8000b68:	b2a4      	uxth	r4, r4
 8000b6a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b6e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b72:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b76:	fb00 f505 	mul.w	r5, r0, r5
 8000b7a:	42a5      	cmp	r5, r4
 8000b7c:	d90a      	bls.n	8000b94 <__udivmoddi4+0x90>
 8000b7e:	eb1c 0404 	adds.w	r4, ip, r4
 8000b82:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b86:	f080 8107 	bcs.w	8000d98 <__udivmoddi4+0x294>
 8000b8a:	42a5      	cmp	r5, r4
 8000b8c:	f240 8104 	bls.w	8000d98 <__udivmoddi4+0x294>
 8000b90:	4464      	add	r4, ip
 8000b92:	3802      	subs	r0, #2
 8000b94:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b98:	1b64      	subs	r4, r4, r5
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	b11e      	cbz	r6, 8000ba6 <__udivmoddi4+0xa2>
 8000b9e:	40dc      	lsrs	r4, r3
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000baa:	428b      	cmp	r3, r1
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0xbc>
 8000bae:	2e00      	cmp	r6, #0
 8000bb0:	f000 80ed 	beq.w	8000d8e <__udivmoddi4+0x28a>
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	e9c6 0500 	strd	r0, r5, [r6]
 8000bba:	4608      	mov	r0, r1
 8000bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc0:	fab3 f183 	clz	r1, r3
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	d149      	bne.n	8000c5c <__udivmoddi4+0x158>
 8000bc8:	42ab      	cmp	r3, r5
 8000bca:	d302      	bcc.n	8000bd2 <__udivmoddi4+0xce>
 8000bcc:	4282      	cmp	r2, r0
 8000bce:	f200 80f8 	bhi.w	8000dc2 <__udivmoddi4+0x2be>
 8000bd2:	1a84      	subs	r4, r0, r2
 8000bd4:	eb65 0203 	sbc.w	r2, r5, r3
 8000bd8:	2001      	movs	r0, #1
 8000bda:	4617      	mov	r7, r2
 8000bdc:	2e00      	cmp	r6, #0
 8000bde:	d0e2      	beq.n	8000ba6 <__udivmoddi4+0xa2>
 8000be0:	e9c6 4700 	strd	r4, r7, [r6]
 8000be4:	e7df      	b.n	8000ba6 <__udivmoddi4+0xa2>
 8000be6:	b902      	cbnz	r2, 8000bea <__udivmoddi4+0xe6>
 8000be8:	deff      	udf	#255	; 0xff
 8000bea:	fab2 f382 	clz	r3, r2
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f040 8090 	bne.w	8000d14 <__udivmoddi4+0x210>
 8000bf4:	1a8a      	subs	r2, r1, r2
 8000bf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bfa:	fa1f fe8c 	uxth.w	lr, ip
 8000bfe:	2101      	movs	r1, #1
 8000c00:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c04:	fb07 2015 	mls	r0, r7, r5, r2
 8000c08:	0c22      	lsrs	r2, r4, #16
 8000c0a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c0e:	fb0e f005 	mul.w	r0, lr, r5
 8000c12:	4290      	cmp	r0, r2
 8000c14:	d908      	bls.n	8000c28 <__udivmoddi4+0x124>
 8000c16:	eb1c 0202 	adds.w	r2, ip, r2
 8000c1a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x122>
 8000c20:	4290      	cmp	r0, r2
 8000c22:	f200 80cb 	bhi.w	8000dbc <__udivmoddi4+0x2b8>
 8000c26:	4645      	mov	r5, r8
 8000c28:	1a12      	subs	r2, r2, r0
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c30:	fb07 2210 	mls	r2, r7, r0, r2
 8000c34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c38:	fb0e fe00 	mul.w	lr, lr, r0
 8000c3c:	45a6      	cmp	lr, r4
 8000c3e:	d908      	bls.n	8000c52 <__udivmoddi4+0x14e>
 8000c40:	eb1c 0404 	adds.w	r4, ip, r4
 8000c44:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c48:	d202      	bcs.n	8000c50 <__udivmoddi4+0x14c>
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	f200 80bb 	bhi.w	8000dc6 <__udivmoddi4+0x2c2>
 8000c50:	4610      	mov	r0, r2
 8000c52:	eba4 040e 	sub.w	r4, r4, lr
 8000c56:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c5a:	e79f      	b.n	8000b9c <__udivmoddi4+0x98>
 8000c5c:	f1c1 0720 	rsb	r7, r1, #32
 8000c60:	408b      	lsls	r3, r1
 8000c62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c6a:	fa05 f401 	lsl.w	r4, r5, r1
 8000c6e:	fa20 f307 	lsr.w	r3, r0, r7
 8000c72:	40fd      	lsrs	r5, r7
 8000c74:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c78:	4323      	orrs	r3, r4
 8000c7a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c7e:	fa1f fe8c 	uxth.w	lr, ip
 8000c82:	fb09 5518 	mls	r5, r9, r8, r5
 8000c86:	0c1c      	lsrs	r4, r3, #16
 8000c88:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c8c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c90:	42a5      	cmp	r5, r4
 8000c92:	fa02 f201 	lsl.w	r2, r2, r1
 8000c96:	fa00 f001 	lsl.w	r0, r0, r1
 8000c9a:	d90b      	bls.n	8000cb4 <__udivmoddi4+0x1b0>
 8000c9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ca4:	f080 8088 	bcs.w	8000db8 <__udivmoddi4+0x2b4>
 8000ca8:	42a5      	cmp	r5, r4
 8000caa:	f240 8085 	bls.w	8000db8 <__udivmoddi4+0x2b4>
 8000cae:	f1a8 0802 	sub.w	r8, r8, #2
 8000cb2:	4464      	add	r4, ip
 8000cb4:	1b64      	subs	r4, r4, r5
 8000cb6:	b29d      	uxth	r5, r3
 8000cb8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cbc:	fb09 4413 	mls	r4, r9, r3, r4
 8000cc0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cc4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cc8:	45a6      	cmp	lr, r4
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x1da>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cd4:	d26c      	bcs.n	8000db0 <__udivmoddi4+0x2ac>
 8000cd6:	45a6      	cmp	lr, r4
 8000cd8:	d96a      	bls.n	8000db0 <__udivmoddi4+0x2ac>
 8000cda:	3b02      	subs	r3, #2
 8000cdc:	4464      	add	r4, ip
 8000cde:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ce2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ce6:	eba4 040e 	sub.w	r4, r4, lr
 8000cea:	42ac      	cmp	r4, r5
 8000cec:	46c8      	mov	r8, r9
 8000cee:	46ae      	mov	lr, r5
 8000cf0:	d356      	bcc.n	8000da0 <__udivmoddi4+0x29c>
 8000cf2:	d053      	beq.n	8000d9c <__udivmoddi4+0x298>
 8000cf4:	b156      	cbz	r6, 8000d0c <__udivmoddi4+0x208>
 8000cf6:	ebb0 0208 	subs.w	r2, r0, r8
 8000cfa:	eb64 040e 	sbc.w	r4, r4, lr
 8000cfe:	fa04 f707 	lsl.w	r7, r4, r7
 8000d02:	40ca      	lsrs	r2, r1
 8000d04:	40cc      	lsrs	r4, r1
 8000d06:	4317      	orrs	r7, r2
 8000d08:	e9c6 7400 	strd	r7, r4, [r6]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	2100      	movs	r1, #0
 8000d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d14:	f1c3 0120 	rsb	r1, r3, #32
 8000d18:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d1c:	fa20 f201 	lsr.w	r2, r0, r1
 8000d20:	fa25 f101 	lsr.w	r1, r5, r1
 8000d24:	409d      	lsls	r5, r3
 8000d26:	432a      	orrs	r2, r5
 8000d28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2c:	fa1f fe8c 	uxth.w	lr, ip
 8000d30:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d34:	fb07 1510 	mls	r5, r7, r0, r1
 8000d38:	0c11      	lsrs	r1, r2, #16
 8000d3a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d3e:	fb00 f50e 	mul.w	r5, r0, lr
 8000d42:	428d      	cmp	r5, r1
 8000d44:	fa04 f403 	lsl.w	r4, r4, r3
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x258>
 8000d4a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d52:	d22f      	bcs.n	8000db4 <__udivmoddi4+0x2b0>
 8000d54:	428d      	cmp	r5, r1
 8000d56:	d92d      	bls.n	8000db4 <__udivmoddi4+0x2b0>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	4461      	add	r1, ip
 8000d5c:	1b49      	subs	r1, r1, r5
 8000d5e:	b292      	uxth	r2, r2
 8000d60:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d64:	fb07 1115 	mls	r1, r7, r5, r1
 8000d68:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d6c:	fb05 f10e 	mul.w	r1, r5, lr
 8000d70:	4291      	cmp	r1, r2
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x282>
 8000d74:	eb1c 0202 	adds.w	r2, ip, r2
 8000d78:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d7c:	d216      	bcs.n	8000dac <__udivmoddi4+0x2a8>
 8000d7e:	4291      	cmp	r1, r2
 8000d80:	d914      	bls.n	8000dac <__udivmoddi4+0x2a8>
 8000d82:	3d02      	subs	r5, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a52      	subs	r2, r2, r1
 8000d88:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d8c:	e738      	b.n	8000c00 <__udivmoddi4+0xfc>
 8000d8e:	4631      	mov	r1, r6
 8000d90:	4630      	mov	r0, r6
 8000d92:	e708      	b.n	8000ba6 <__udivmoddi4+0xa2>
 8000d94:	4639      	mov	r1, r7
 8000d96:	e6e6      	b.n	8000b66 <__udivmoddi4+0x62>
 8000d98:	4610      	mov	r0, r2
 8000d9a:	e6fb      	b.n	8000b94 <__udivmoddi4+0x90>
 8000d9c:	4548      	cmp	r0, r9
 8000d9e:	d2a9      	bcs.n	8000cf4 <__udivmoddi4+0x1f0>
 8000da0:	ebb9 0802 	subs.w	r8, r9, r2
 8000da4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000da8:	3b01      	subs	r3, #1
 8000daa:	e7a3      	b.n	8000cf4 <__udivmoddi4+0x1f0>
 8000dac:	4645      	mov	r5, r8
 8000dae:	e7ea      	b.n	8000d86 <__udivmoddi4+0x282>
 8000db0:	462b      	mov	r3, r5
 8000db2:	e794      	b.n	8000cde <__udivmoddi4+0x1da>
 8000db4:	4640      	mov	r0, r8
 8000db6:	e7d1      	b.n	8000d5c <__udivmoddi4+0x258>
 8000db8:	46d0      	mov	r8, sl
 8000dba:	e77b      	b.n	8000cb4 <__udivmoddi4+0x1b0>
 8000dbc:	3d02      	subs	r5, #2
 8000dbe:	4462      	add	r2, ip
 8000dc0:	e732      	b.n	8000c28 <__udivmoddi4+0x124>
 8000dc2:	4608      	mov	r0, r1
 8000dc4:	e70a      	b.n	8000bdc <__udivmoddi4+0xd8>
 8000dc6:	4464      	add	r4, ip
 8000dc8:	3802      	subs	r0, #2
 8000dca:	e742      	b.n	8000c52 <__udivmoddi4+0x14e>

08000dcc <__aeabi_idiv0>:
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <BNO08X_GetData>:
#include "BNO08X.h"

static uint8_t RX_Data[19];
static UART_HandleTypeDef huart;

void BNO08X_GetData(BNO08X_Typedef *sensorData){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
    sensorData->header = RX_Data[0];
 8000dd8:	4b34      	ldr	r3, [pc, #208]	; (8000eac <BNO08X_GetData+0xdc>)
 8000dda:	781a      	ldrb	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	701a      	strb	r2, [r3, #0]
    sensorData->index = RX_Data[2];
 8000de0:	4b32      	ldr	r3, [pc, #200]	; (8000eac <BNO08X_GetData+0xdc>)
 8000de2:	789a      	ldrb	r2, [r3, #2]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	705a      	strb	r2, [r3, #1]
    sensorData->yaw = (int16_t)((RX_Data[4] << 8) | RX_Data[3]);
 8000de8:	4b30      	ldr	r3, [pc, #192]	; (8000eac <BNO08X_GetData+0xdc>)
 8000dea:	791b      	ldrb	r3, [r3, #4]
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	b21a      	sxth	r2, r3
 8000df0:	4b2e      	ldr	r3, [pc, #184]	; (8000eac <BNO08X_GetData+0xdc>)
 8000df2:	78db      	ldrb	r3, [r3, #3]
 8000df4:	b21b      	sxth	r3, r3
 8000df6:	4313      	orrs	r3, r2
 8000df8:	b21a      	sxth	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	805a      	strh	r2, [r3, #2]
    sensorData->pitch = (int16_t)((RX_Data[6] << 8) | RX_Data[5]);
 8000dfe:	4b2b      	ldr	r3, [pc, #172]	; (8000eac <BNO08X_GetData+0xdc>)
 8000e00:	799b      	ldrb	r3, [r3, #6]
 8000e02:	021b      	lsls	r3, r3, #8
 8000e04:	b21a      	sxth	r2, r3
 8000e06:	4b29      	ldr	r3, [pc, #164]	; (8000eac <BNO08X_GetData+0xdc>)
 8000e08:	795b      	ldrb	r3, [r3, #5]
 8000e0a:	b21b      	sxth	r3, r3
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	b21a      	sxth	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	809a      	strh	r2, [r3, #4]
    sensorData->roll = (int16_t)((RX_Data[8] << 8) | RX_Data[7]);
 8000e14:	4b25      	ldr	r3, [pc, #148]	; (8000eac <BNO08X_GetData+0xdc>)
 8000e16:	7a1b      	ldrb	r3, [r3, #8]
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	b21a      	sxth	r2, r3
 8000e1c:	4b23      	ldr	r3, [pc, #140]	; (8000eac <BNO08X_GetData+0xdc>)
 8000e1e:	79db      	ldrb	r3, [r3, #7]
 8000e20:	b21b      	sxth	r3, r3
 8000e22:	4313      	orrs	r3, r2
 8000e24:	b21a      	sxth	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	80da      	strh	r2, [r3, #6]
    sensorData->x_acceleration = (int16_t)((RX_Data[10] << 8) | RX_Data[9]);
 8000e2a:	4b20      	ldr	r3, [pc, #128]	; (8000eac <BNO08X_GetData+0xdc>)
 8000e2c:	7a9b      	ldrb	r3, [r3, #10]
 8000e2e:	021b      	lsls	r3, r3, #8
 8000e30:	b21a      	sxth	r2, r3
 8000e32:	4b1e      	ldr	r3, [pc, #120]	; (8000eac <BNO08X_GetData+0xdc>)
 8000e34:	7a5b      	ldrb	r3, [r3, #9]
 8000e36:	b21b      	sxth	r3, r3
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	b21a      	sxth	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	811a      	strh	r2, [r3, #8]
    sensorData->y_acceleration = (int16_t)((RX_Data[12] << 8) | RX_Data[11]);
 8000e40:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <BNO08X_GetData+0xdc>)
 8000e42:	7b1b      	ldrb	r3, [r3, #12]
 8000e44:	021b      	lsls	r3, r3, #8
 8000e46:	b21a      	sxth	r2, r3
 8000e48:	4b18      	ldr	r3, [pc, #96]	; (8000eac <BNO08X_GetData+0xdc>)
 8000e4a:	7adb      	ldrb	r3, [r3, #11]
 8000e4c:	b21b      	sxth	r3, r3
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	b21a      	sxth	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	815a      	strh	r2, [r3, #10]
    sensorData->z_acceleration = (int16_t)((RX_Data[14] << 8) | RX_Data[13]);
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <BNO08X_GetData+0xdc>)
 8000e58:	7b9b      	ldrb	r3, [r3, #14]
 8000e5a:	021b      	lsls	r3, r3, #8
 8000e5c:	b21a      	sxth	r2, r3
 8000e5e:	4b13      	ldr	r3, [pc, #76]	; (8000eac <BNO08X_GetData+0xdc>)
 8000e60:	7b5b      	ldrb	r3, [r3, #13]
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	4313      	orrs	r3, r2
 8000e66:	b21a      	sxth	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	819a      	strh	r2, [r3, #12]

    // MI, MR, Reserved bytes
    for (int i = 0; i < 3; i++) {
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	e00c      	b.n	8000e8c <BNO08X_GetData+0xbc>
        sensorData->mi_mr_reserved[i] = RX_Data[15 + i];
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	330f      	adds	r3, #15
 8000e76:	4a0d      	ldr	r2, [pc, #52]	; (8000eac <BNO08X_GetData+0xdc>)
 8000e78:	5cd1      	ldrb	r1, [r2, r3]
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4413      	add	r3, r2
 8000e80:	330e      	adds	r3, #14
 8000e82:	460a      	mov	r2, r1
 8000e84:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	ddef      	ble.n	8000e72 <BNO08X_GetData+0xa2>
    }

    sensorData->checksum = RX_Data[18];
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <BNO08X_GetData+0xdc>)
 8000e94:	7c9a      	ldrb	r2, [r3, #18]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	745a      	strb	r2, [r3, #17]
    HAL_UART_Receive_DMA(&huart, RX_Data, sizeof(RX_Data));
 8000e9a:	2213      	movs	r2, #19
 8000e9c:	4903      	ldr	r1, [pc, #12]	; (8000eac <BNO08X_GetData+0xdc>)
 8000e9e:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <BNO08X_GetData+0xe0>)
 8000ea0:	f003 ff5c 	bl	8004d5c <HAL_UART_Receive_DMA>
}
 8000ea4:	bf00      	nop
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	2000002c 	.word	0x2000002c
 8000eb0:	20000040 	.word	0x20000040

08000eb4 <BNO08X_Init>:

void BNO08X_Init(UART_HandleTypeDef *huart_instance){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	huart = *huart_instance;
 8000ebc:	4a08      	ldr	r2, [pc, #32]	; (8000ee0 <BNO08X_Init+0x2c>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	2348      	movs	r3, #72	; 0x48
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	f005 f828 	bl	8005f1c <memcpy>
	HAL_UART_Receive_DMA(&huart, RX_Data, sizeof(RX_Data));
 8000ecc:	2213      	movs	r2, #19
 8000ece:	4905      	ldr	r1, [pc, #20]	; (8000ee4 <BNO08X_Init+0x30>)
 8000ed0:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <BNO08X_Init+0x2c>)
 8000ed2:	f003 ff43 	bl	8004d5c <HAL_UART_Receive_DMA>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000040 	.word	0x20000040
 8000ee4:	2000002c 	.word	0x2000002c

08000ee8 <agv_run_motor>:
#include "Motor.h"
#include <math.h>
#include <float.h>
#include <stdlib.h>

void agv_run_motor(motor_t motor, int16_t speed){
 8000ee8:	b084      	sub	sp, #16
 8000eea:	b580      	push	{r7, lr}
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	f107 0c08 	add.w	ip, r7, #8
 8000ef2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_GPIO_WritePin(motor.EN_PORT_R, motor.EN_PIN_R, GPIO_PIN_SET);
 8000ef6:	6a3b      	ldr	r3, [r7, #32]
 8000ef8:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000efa:	2201      	movs	r2, #1
 8000efc:	4618      	mov	r0, r3
 8000efe:	f002 f9a9 	bl	8003254 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor.EN_PORT_L, motor.EN_PIN_L, GPIO_PIN_SET);
 8000f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f04:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000f06:	2201      	movs	r2, #1
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f002 f9a3 	bl	8003254 <HAL_GPIO_WritePin>

	if(speed >= 0){
 8000f0e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db62      	blt.n	8000fdc <agv_run_motor+0xf4>
		if(motor.channel_R == 1){
 8000f16:	7e3b      	ldrb	r3, [r7, #24]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d108      	bne.n	8000f2e <agv_run_motor+0x46>
			motor.tim_number_R->CCR1 = 0;
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_1);
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f002 fec8 	bl	8003cbc <HAL_TIM_PWM_Start>
 8000f2c:	e022      	b.n	8000f74 <agv_run_motor+0x8c>
		}
		else if(motor.channel_R == 2){
 8000f2e:	7e3b      	ldrb	r3, [r7, #24]
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d108      	bne.n	8000f46 <agv_run_motor+0x5e>
			motor.tim_number_R->CCR2 = 0;
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	2200      	movs	r2, #0
 8000f38:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_2);
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	2104      	movs	r1, #4
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f002 febc 	bl	8003cbc <HAL_TIM_PWM_Start>
 8000f44:	e016      	b.n	8000f74 <agv_run_motor+0x8c>
		}
		else if(motor.channel_R == 3){
 8000f46:	7e3b      	ldrb	r3, [r7, #24]
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d108      	bne.n	8000f5e <agv_run_motor+0x76>
			motor.tim_number_R->CCR3 = 0;
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_3);
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	2108      	movs	r1, #8
 8000f56:	4618      	mov	r0, r3
 8000f58:	f002 feb0 	bl	8003cbc <HAL_TIM_PWM_Start>
 8000f5c:	e00a      	b.n	8000f74 <agv_run_motor+0x8c>
		}
		else if(motor.channel_R == 4){
 8000f5e:	7e3b      	ldrb	r3, [r7, #24]
 8000f60:	2b04      	cmp	r3, #4
 8000f62:	d107      	bne.n	8000f74 <agv_run_motor+0x8c>
			motor.tim_number_R->CCR4 = 0;
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	2200      	movs	r2, #0
 8000f68:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_4);
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	210c      	movs	r1, #12
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f002 fea4 	bl	8003cbc <HAL_TIM_PWM_Start>
		}
		if(motor.channel_L == 1){
 8000f74:	7e7b      	ldrb	r3, [r7, #25]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d109      	bne.n	8000f8e <agv_run_motor+0xa6>
			motor.tim_number_L->CCR1 = speed;
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8000f80:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_1);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f002 fe98 	bl	8003cbc <HAL_TIM_PWM_Start>
		else if(motor.channel_L == 4){
			motor.tim_number_L->CCR4 = 0;
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_4);
		}
	}
}
 8000f8c:	e090      	b.n	80010b0 <agv_run_motor+0x1c8>
		else if(motor.channel_L == 2){
 8000f8e:	7e7b      	ldrb	r3, [r7, #25]
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d109      	bne.n	8000fa8 <agv_run_motor+0xc0>
			motor.tim_number_L->CCR2 = speed;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8000f9a:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_2);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2104      	movs	r1, #4
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f002 fe8b 	bl	8003cbc <HAL_TIM_PWM_Start>
}
 8000fa6:	e083      	b.n	80010b0 <agv_run_motor+0x1c8>
		else if(motor.channel_L == 3){
 8000fa8:	7e7b      	ldrb	r3, [r7, #25]
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	d109      	bne.n	8000fc2 <agv_run_motor+0xda>
			motor.tim_number_L->CCR3 = speed;
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8000fb4:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_3);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2108      	movs	r1, #8
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f002 fe7e 	bl	8003cbc <HAL_TIM_PWM_Start>
}
 8000fc0:	e076      	b.n	80010b0 <agv_run_motor+0x1c8>
		else if(motor.channel_L == 4){
 8000fc2:	7e7b      	ldrb	r3, [r7, #25]
 8000fc4:	2b04      	cmp	r3, #4
 8000fc6:	d173      	bne.n	80010b0 <agv_run_motor+0x1c8>
			motor.tim_number_L->CCR4 = speed;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8000fce:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_4);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	210c      	movs	r1, #12
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f002 fe71 	bl	8003cbc <HAL_TIM_PWM_Start>
}
 8000fda:	e069      	b.n	80010b0 <agv_run_motor+0x1c8>
	else if(speed < 0){
 8000fdc:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	da65      	bge.n	80010b0 <agv_run_motor+0x1c8>
		if(motor.channel_R == 1){
 8000fe4:	7e3b      	ldrb	r3, [r7, #24]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d10a      	bne.n	8001000 <agv_run_motor+0x118>
			motor.tim_number_R->CCR1 = -speed;
 8000fea:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8000fee:	425a      	negs	r2, r3
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_1);
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f002 fe5f 	bl	8003cbc <HAL_TIM_PWM_Start>
 8000ffe:	e028      	b.n	8001052 <agv_run_motor+0x16a>
		else if(motor.channel_R == 2){
 8001000:	7e3b      	ldrb	r3, [r7, #24]
 8001002:	2b02      	cmp	r3, #2
 8001004:	d10a      	bne.n	800101c <agv_run_motor+0x134>
			motor.tim_number_R->CCR2 = -speed;
 8001006:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800100a:	425a      	negs	r2, r3
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_2);
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	2104      	movs	r1, #4
 8001014:	4618      	mov	r0, r3
 8001016:	f002 fe51 	bl	8003cbc <HAL_TIM_PWM_Start>
 800101a:	e01a      	b.n	8001052 <agv_run_motor+0x16a>
		else if(motor.channel_R == 3){
 800101c:	7e3b      	ldrb	r3, [r7, #24]
 800101e:	2b03      	cmp	r3, #3
 8001020:	d10a      	bne.n	8001038 <agv_run_motor+0x150>
			motor.tim_number_R->CCR3 = -speed;
 8001022:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001026:	425a      	negs	r2, r3
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_3);
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	2108      	movs	r1, #8
 8001030:	4618      	mov	r0, r3
 8001032:	f002 fe43 	bl	8003cbc <HAL_TIM_PWM_Start>
 8001036:	e00c      	b.n	8001052 <agv_run_motor+0x16a>
		else if(motor.channel_R == 4){
 8001038:	7e3b      	ldrb	r3, [r7, #24]
 800103a:	2b04      	cmp	r3, #4
 800103c:	d109      	bne.n	8001052 <agv_run_motor+0x16a>
			motor.tim_number_R->CCR4 = -speed;
 800103e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001042:	425a      	negs	r2, r3
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_4);
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	210c      	movs	r1, #12
 800104c:	4618      	mov	r0, r3
 800104e:	f002 fe35 	bl	8003cbc <HAL_TIM_PWM_Start>
		if(motor.channel_L == 1){
 8001052:	7e7b      	ldrb	r3, [r7, #25]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d108      	bne.n	800106a <agv_run_motor+0x182>
			motor.tim_number_L->CCR1 = 0;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	2200      	movs	r2, #0
 800105c:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_1);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f002 fe2a 	bl	8003cbc <HAL_TIM_PWM_Start>
}
 8001068:	e022      	b.n	80010b0 <agv_run_motor+0x1c8>
		else if(motor.channel_L == 2){
 800106a:	7e7b      	ldrb	r3, [r7, #25]
 800106c:	2b02      	cmp	r3, #2
 800106e:	d108      	bne.n	8001082 <agv_run_motor+0x19a>
			motor.tim_number_L->CCR2 = 0;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	2200      	movs	r2, #0
 8001074:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_2);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2104      	movs	r1, #4
 800107a:	4618      	mov	r0, r3
 800107c:	f002 fe1e 	bl	8003cbc <HAL_TIM_PWM_Start>
}
 8001080:	e016      	b.n	80010b0 <agv_run_motor+0x1c8>
		else if(motor.channel_L == 3){
 8001082:	7e7b      	ldrb	r3, [r7, #25]
 8001084:	2b03      	cmp	r3, #3
 8001086:	d108      	bne.n	800109a <agv_run_motor+0x1b2>
			motor.tim_number_L->CCR3 = 0;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	2200      	movs	r2, #0
 800108c:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_3);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2108      	movs	r1, #8
 8001092:	4618      	mov	r0, r3
 8001094:	f002 fe12 	bl	8003cbc <HAL_TIM_PWM_Start>
}
 8001098:	e00a      	b.n	80010b0 <agv_run_motor+0x1c8>
		else if(motor.channel_L == 4){
 800109a:	7e7b      	ldrb	r3, [r7, #25]
 800109c:	2b04      	cmp	r3, #4
 800109e:	d107      	bne.n	80010b0 <agv_run_motor+0x1c8>
			motor.tim_number_L->CCR4 = 0;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	2200      	movs	r2, #0
 80010a4:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_4);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	210c      	movs	r1, #12
 80010aa:	4618      	mov	r0, r3
 80010ac:	f002 fe06 	bl	8003cbc <HAL_TIM_PWM_Start>
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010b8:	b004      	add	sp, #16
 80010ba:	4770      	bx	lr

080010bc <agv_stop>:


void agv_stop(motor_t motor){
 80010bc:	b084      	sub	sp, #16
 80010be:	b580      	push	{r7, lr}
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	f107 0c08 	add.w	ip, r7, #8
 80010c6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_GPIO_WritePin(motor.EN_PORT_R, motor.EN_PIN_R, GPIO_PIN_RESET);
 80010ca:	6a3b      	ldr	r3, [r7, #32]
 80010cc:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80010ce:	2200      	movs	r2, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f002 f8bf 	bl	8003254 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor.EN_PORT_L, motor.EN_PIN_L, GPIO_PIN_RESET);
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80010da:	2200      	movs	r2, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f002 f8b9 	bl	8003254 <HAL_GPIO_WritePin>
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010ea:	b004      	add	sp, #16
 80010ec:	4770      	bx	lr

080010ee <agv_stop_all>:

void agv_stop_all(motor_t motorA, motor_t motorB, motor_t motorC){
 80010ee:	b084      	sub	sp, #16
 80010f0:	b5b0      	push	{r4, r5, r7, lr}
 80010f2:	b08c      	sub	sp, #48	; 0x30
 80010f4:	af0c      	add	r7, sp, #48	; 0x30
 80010f6:	f107 0410 	add.w	r4, r7, #16
 80010fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	agv_stop(motorA);
 80010fe:	466d      	mov	r5, sp
 8001100:	f107 0420 	add.w	r4, r7, #32
 8001104:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001106:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001108:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800110a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800110c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001110:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800111a:	f7ff ffcf 	bl	80010bc <agv_stop>
	agv_stop(motorB);
 800111e:	466d      	mov	r5, sp
 8001120:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8001124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001126:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001128:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800112a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800112c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001130:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001134:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001138:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800113a:	f7ff ffbf 	bl	80010bc <agv_stop>
	agv_stop(motorC);
 800113e:	466d      	mov	r5, sp
 8001140:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8001144:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001146:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001148:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800114a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800114c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001150:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001154:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001158:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800115a:	f7ff ffaf 	bl	80010bc <agv_stop>
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001166:	b004      	add	sp, #16
 8001168:	4770      	bx	lr

0800116a <agv_reset_all>:

void agv_reset_all(motor_t motorA, motor_t motorB, motor_t motorC){
 800116a:	b084      	sub	sp, #16
 800116c:	b5b0      	push	{r4, r5, r7, lr}
 800116e:	b08c      	sub	sp, #48	; 0x30
 8001170:	af0c      	add	r7, sp, #48	; 0x30
 8001172:	f107 0410 	add.w	r4, r7, #16
 8001176:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	agv_run_motor(motorA,0);
 800117a:	2300      	movs	r3, #0
 800117c:	930b      	str	r3, [sp, #44]	; 0x2c
 800117e:	466d      	mov	r5, sp
 8001180:	f107 0420 	add.w	r4, r7, #32
 8001184:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001186:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001188:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800118a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800118c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001190:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800119a:	f7ff fea5 	bl	8000ee8 <agv_run_motor>
	agv_run_motor(motorB,0);
 800119e:	2300      	movs	r3, #0
 80011a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80011a2:	466d      	mov	r5, sp
 80011a4:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 80011a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011b0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80011b4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80011b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011be:	f7ff fe93 	bl	8000ee8 <agv_run_motor>
	agv_run_motor(motorC,0);
 80011c2:	2300      	movs	r3, #0
 80011c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80011c6:	466d      	mov	r5, sp
 80011c8:	f107 0498 	add.w	r4, r7, #152	; 0x98
 80011cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011d4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80011d8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80011dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80011e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011e2:	f7ff fe81 	bl	8000ee8 <agv_run_motor>
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80011ee:	b004      	add	sp, #16
 80011f0:	4770      	bx	lr

080011f2 <agv_encoder_start>:

void agv_encoder_start(encoder_t encoder, TIM_HandleTypeDef* tim,TIM_TypeDef* tim_number){
 80011f2:	b084      	sub	sp, #16
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	f107 0c08 	add.w	ip, r7, #8
 80011fc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	encoder.tim = tim;
 8001200:	6a3b      	ldr	r3, [r7, #32]
 8001202:	60bb      	str	r3, [r7, #8]
	encoder.tim_number = tim_number;
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	60fb      	str	r3, [r7, #12]
	HAL_TIM_Encoder_Start_IT(tim, TIM_CHANNEL_ALL);
 8001208:	213c      	movs	r1, #60	; 0x3c
 800120a:	6a38      	ldr	r0, [r7, #32]
 800120c:	f002 feac 	bl	8003f68 <HAL_TIM_Encoder_Start_IT>
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001218:	b004      	add	sp, #16
 800121a:	4770      	bx	lr
 800121c:	0000      	movs	r0, r0
	...

08001220 <agv_kinematic_Sy>:

// Kinematics
double agv_kinematic_Sy(int pos_A, int pos_B, int pos_C){
 8001220:	b5b0      	push	{r4, r5, r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
	double sy = (0.866*pos_A) + (-0.866*pos_B) + (0*pos_C);
 800122c:	68f8      	ldr	r0, [r7, #12]
 800122e:	f7ff f925 	bl	800047c <__aeabi_i2d>
 8001232:	a319      	add	r3, pc, #100	; (adr r3, 8001298 <agv_kinematic_Sy+0x78>)
 8001234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001238:	f7ff f98a 	bl	8000550 <__aeabi_dmul>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4614      	mov	r4, r2
 8001242:	461d      	mov	r5, r3
 8001244:	68b8      	ldr	r0, [r7, #8]
 8001246:	f7ff f919 	bl	800047c <__aeabi_i2d>
 800124a:	a315      	add	r3, pc, #84	; (adr r3, 80012a0 <agv_kinematic_Sy+0x80>)
 800124c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001250:	f7ff f97e 	bl	8000550 <__aeabi_dmul>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4620      	mov	r0, r4
 800125a:	4629      	mov	r1, r5
 800125c:	f7fe ffc2 	bl	80001e4 <__adddf3>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4610      	mov	r0, r2
 8001266:	4619      	mov	r1, r3
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	f04f 0300 	mov.w	r3, #0
 8001270:	f7fe ffb8 	bl	80001e4 <__adddf3>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return sy;
 800127c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001280:	ec43 2b17 	vmov	d7, r2, r3
}
 8001284:	eeb0 0a47 	vmov.f32	s0, s14
 8001288:	eef0 0a67 	vmov.f32	s1, s15
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bdb0      	pop	{r4, r5, r7, pc}
 8001292:	bf00      	nop
 8001294:	f3af 8000 	nop.w
 8001298:	a1cac083 	.word	0xa1cac083
 800129c:	3febb645 	.word	0x3febb645
 80012a0:	a1cac083 	.word	0xa1cac083
 80012a4:	bfebb645 	.word	0xbfebb645

080012a8 <agv_kinematic_Sx>:
double agv_kinematic_Sx(int pos_A, int pos_B, int pos_C){
 80012a8:	b5b0      	push	{r4, r5, r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
	double sx = (-0.5*pos_A) + (-0.5*pos_B) + (1*pos_C);
 80012b4:	68f8      	ldr	r0, [r7, #12]
 80012b6:	f7ff f8e1 	bl	800047c <__aeabi_i2d>
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	4b18      	ldr	r3, [pc, #96]	; (8001320 <agv_kinematic_Sx+0x78>)
 80012c0:	f7ff f946 	bl	8000550 <__aeabi_dmul>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4614      	mov	r4, r2
 80012ca:	461d      	mov	r5, r3
 80012cc:	68b8      	ldr	r0, [r7, #8]
 80012ce:	f7ff f8d5 	bl	800047c <__aeabi_i2d>
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <agv_kinematic_Sx+0x78>)
 80012d8:	f7ff f93a 	bl	8000550 <__aeabi_dmul>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4620      	mov	r0, r4
 80012e2:	4629      	mov	r1, r5
 80012e4:	f7fe ff7e 	bl	80001e4 <__adddf3>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4614      	mov	r4, r2
 80012ee:	461d      	mov	r5, r3
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff f8c3 	bl	800047c <__aeabi_i2d>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4620      	mov	r0, r4
 80012fc:	4629      	mov	r1, r5
 80012fe:	f7fe ff71 	bl	80001e4 <__adddf3>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return sx;
 800130a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800130e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001312:	eeb0 0a47 	vmov.f32	s0, s14
 8001316:	eef0 0a67 	vmov.f32	s1, s15
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bdb0      	pop	{r4, r5, r7, pc}
 8001320:	bfe00000 	.word	0xbfe00000

08001324 <agv_kinematic_St>:
double agv_kinematic_St(int pos_A, int pos_B, int pos_C){
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
	double st = (1*pos_A) + (1*pos_B) + (1*pos_C);
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	441a      	add	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f89e 	bl	800047c <__aeabi_i2d>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return st;
 8001348:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800134c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001350:	eeb0 0a47 	vmov.f32	s0, s14
 8001354:	eef0 0a67 	vmov.f32	s1, s15
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <agv_inverse_kinematic>:
	kinematic.Sx = (0.86*enc_A.position) + (-0.866*enc_B.position) + (0*enc_C.position);
	kinematic.Sy = (-0.5*enc_A.position) + (-0.5*enc_B.position) + (1*enc_C.position);
	kinematic.St = (1*enc_A.position) + (1*enc_B.position) + (1*enc_C.position);
}

void agv_inverse_kinematic(double vx, double vy, double vt, motor_t motorA, motor_t motorB, motor_t motorC){
 8001360:	b084      	sub	sp, #16
 8001362:	b5b0      	push	{r4, r5, r7, lr}
 8001364:	b098      	sub	sp, #96	; 0x60
 8001366:	af0c      	add	r7, sp, #48	; 0x30
 8001368:	ed87 0b04 	vstr	d0, [r7, #16]
 800136c:	ed87 1b02 	vstr	d1, [r7, #8]
 8001370:	ed87 2b00 	vstr	d2, [r7]
 8001374:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001378:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	double V1 = (-0.33*vx) + (0.58*vy) + (0.33*vt);
 800137c:	a362      	add	r3, pc, #392	; (adr r3, 8001508 <agv_inverse_kinematic+0x1a8>)
 800137e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001382:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001386:	f7ff f8e3 	bl	8000550 <__aeabi_dmul>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4614      	mov	r4, r2
 8001390:	461d      	mov	r5, r3
 8001392:	a35f      	add	r3, pc, #380	; (adr r3, 8001510 <agv_inverse_kinematic+0x1b0>)
 8001394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001398:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800139c:	f7ff f8d8 	bl	8000550 <__aeabi_dmul>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4620      	mov	r0, r4
 80013a6:	4629      	mov	r1, r5
 80013a8:	f7fe ff1c 	bl	80001e4 <__adddf3>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4614      	mov	r4, r2
 80013b2:	461d      	mov	r5, r3
 80013b4:	a358      	add	r3, pc, #352	; (adr r3, 8001518 <agv_inverse_kinematic+0x1b8>)
 80013b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013be:	f7ff f8c7 	bl	8000550 <__aeabi_dmul>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4620      	mov	r0, r4
 80013c8:	4629      	mov	r1, r5
 80013ca:	f7fe ff0b 	bl	80001e4 <__adddf3>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double V2 = (-0.33*vx) + (-0.58*vy) + (0.33*vt);
 80013d6:	a34c      	add	r3, pc, #304	; (adr r3, 8001508 <agv_inverse_kinematic+0x1a8>)
 80013d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013e0:	f7ff f8b6 	bl	8000550 <__aeabi_dmul>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4614      	mov	r4, r2
 80013ea:	461d      	mov	r5, r3
 80013ec:	a34c      	add	r3, pc, #304	; (adr r3, 8001520 <agv_inverse_kinematic+0x1c0>)
 80013ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013f6:	f7ff f8ab 	bl	8000550 <__aeabi_dmul>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4620      	mov	r0, r4
 8001400:	4629      	mov	r1, r5
 8001402:	f7fe feef 	bl	80001e4 <__adddf3>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4614      	mov	r4, r2
 800140c:	461d      	mov	r5, r3
 800140e:	a342      	add	r3, pc, #264	; (adr r3, 8001518 <agv_inverse_kinematic+0x1b8>)
 8001410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001414:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001418:	f7ff f89a 	bl	8000550 <__aeabi_dmul>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4620      	mov	r0, r4
 8001422:	4629      	mov	r1, r5
 8001424:	f7fe fede 	bl	80001e4 <__adddf3>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double V3 = (0.67*vx) + (0*vy) + (0.33*vt);
 8001430:	a33d      	add	r3, pc, #244	; (adr r3, 8001528 <agv_inverse_kinematic+0x1c8>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800143a:	f7ff f889 	bl	8000550 <__aeabi_dmul>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4614      	mov	r4, r2
 8001444:	461d      	mov	r5, r3
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	f04f 0300 	mov.w	r3, #0
 800144e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001452:	f7ff f87d 	bl	8000550 <__aeabi_dmul>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4620      	mov	r0, r4
 800145c:	4629      	mov	r1, r5
 800145e:	f7fe fec1 	bl	80001e4 <__adddf3>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4614      	mov	r4, r2
 8001468:	461d      	mov	r5, r3
 800146a:	a32b      	add	r3, pc, #172	; (adr r3, 8001518 <agv_inverse_kinematic+0x1b8>)
 800146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001470:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001474:	f7ff f86c 	bl	8000550 <__aeabi_dmul>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4620      	mov	r0, r4
 800147e:	4629      	mov	r1, r5
 8001480:	f7fe feb0 	bl	80001e4 <__adddf3>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	e9c7 2306 	strd	r2, r3, [r7, #24]
	agv_speed_to_pwm(motorA, V1);
 800148c:	466d      	mov	r5, sp
 800148e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001494:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001496:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001498:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800149a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800149e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80014a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014a8:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 80014ac:	f000 f840 	bl	8001530 <agv_speed_to_pwm>
	agv_speed_to_pwm(motorB, V2);
 80014b0:	466d      	mov	r5, sp
 80014b2:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80014b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014be:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80014c2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80014c6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80014ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014cc:	ed97 0b08 	vldr	d0, [r7, #32]
 80014d0:	f000 f82e 	bl	8001530 <agv_speed_to_pwm>
	agv_speed_to_pwm(motorC, V3);
 80014d4:	466d      	mov	r5, sp
 80014d6:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 80014da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80014e6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80014ea:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80014ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014f0:	ed97 0b06 	vldr	d0, [r7, #24]
 80014f4:	f000 f81c 	bl	8001530 <agv_speed_to_pwm>
}
 80014f8:	bf00      	nop
 80014fa:	3730      	adds	r7, #48	; 0x30
 80014fc:	46bd      	mov	sp, r7
 80014fe:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001502:	b004      	add	sp, #16
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	51eb851f 	.word	0x51eb851f
 800150c:	bfd51eb8 	.word	0xbfd51eb8
 8001510:	28f5c28f 	.word	0x28f5c28f
 8001514:	3fe28f5c 	.word	0x3fe28f5c
 8001518:	51eb851f 	.word	0x51eb851f
 800151c:	3fd51eb8 	.word	0x3fd51eb8
 8001520:	28f5c28f 	.word	0x28f5c28f
 8001524:	bfe28f5c 	.word	0xbfe28f5c
 8001528:	d70a3d71 	.word	0xd70a3d71
 800152c:	3fe570a3 	.word	0x3fe570a3

08001530 <agv_speed_to_pwm>:
	agv.Yp = cos(agv.St) - sin(agv.St) + 0;
	agv.Xp = sin(agv.St) + cos(agv.St) + 0;
	agv.Tp = 0 + 0 + agv.St;
}

void agv_speed_to_pwm(motor_t motor, double speed){
 8001530:	b084      	sub	sp, #16
 8001532:	b5b0      	push	{r4, r5, r7, lr}
 8001534:	b08e      	sub	sp, #56	; 0x38
 8001536:	af0c      	add	r7, sp, #48	; 0x30
 8001538:	f107 0418 	add.w	r4, r7, #24
 800153c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001540:	ed87 0b00 	vstr	d0, [r7]
	// Maximum 628,2 mm/s
	if(speed < 628.2){
 8001544:	a322      	add	r3, pc, #136	; (adr r3, 80015d0 <agv_speed_to_pwm+0xa0>)
 8001546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800154e:	f7ff fa71 	bl	8000a34 <__aeabi_dcmplt>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d020      	beq.n	800159a <agv_speed_to_pwm+0x6a>
		agv_run_motor(motor, (speed*1.592));
 8001558:	a31f      	add	r3, pc, #124	; (adr r3, 80015d8 <agv_speed_to_pwm+0xa8>)
 800155a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001562:	f7fe fff5 	bl	8000550 <__aeabi_dmul>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f7ff fa89 	bl	8000a84 <__aeabi_d2iz>
 8001572:	4603      	mov	r3, r0
 8001574:	b21b      	sxth	r3, r3
 8001576:	930b      	str	r3, [sp, #44]	; 0x2c
 8001578:	466d      	mov	r5, sp
 800157a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800157e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001580:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001584:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001586:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800158a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800158e:	f107 0318 	add.w	r3, r7, #24
 8001592:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001594:	f7ff fca8 	bl	8000ee8 <agv_run_motor>
	}
	else{
		agv_run_motor(motor, (628.2*1.592));
	}
}
 8001598:	e012      	b.n	80015c0 <agv_speed_to_pwm+0x90>
		agv_run_motor(motor, (628.2*1.592));
 800159a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159e:	930b      	str	r3, [sp, #44]	; 0x2c
 80015a0:	466d      	mov	r5, sp
 80015a2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80015a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ae:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80015b2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80015b6:	f107 0318 	add.w	r3, r7, #24
 80015ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015bc:	f7ff fc94 	bl	8000ee8 <agv_run_motor>
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80015ca:	b004      	add	sp, #16
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	9999999a 	.word	0x9999999a
 80015d4:	4083a199 	.word	0x4083a199
 80015d8:	fdf3b646 	.word	0xfdf3b646
 80015dc:	3ff978d4 	.word	0x3ff978d4

080015e0 <HAL_TIM_IC_CaptureCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t vt = 0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	if(htim->Instance  == TIM1){
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a5c      	ldr	r2, [pc, #368]	; (8001760 <HAL_TIM_IC_CaptureCallback+0x180>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d113      	bne.n	800161a <HAL_TIM_IC_CaptureCallback+0x3a>
		encoder_A.counter  	= __HAL_TIM_GET_COUNTER(htim);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	4a5a      	ldr	r2, [pc, #360]	; (8001764 <HAL_TIM_IC_CaptureCallback+0x184>)
 80015fa:	6093      	str	r3, [r2, #8]
		encoder_A.counts 	= (int16_t)encoder_A.counter;
 80015fc:	4b59      	ldr	r3, [pc, #356]	; (8001764 <HAL_TIM_IC_CaptureCallback+0x184>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	b21a      	sxth	r2, r3
 8001602:	4b58      	ldr	r3, [pc, #352]	; (8001764 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001604:	819a      	strh	r2, [r3, #12]
		encoder_A.position	= encoder_A.counts/4;
 8001606:	4b57      	ldr	r3, [pc, #348]	; (8001764 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001608:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800160c:	2b00      	cmp	r3, #0
 800160e:	da00      	bge.n	8001612 <HAL_TIM_IC_CaptureCallback+0x32>
 8001610:	3303      	adds	r3, #3
 8001612:	109b      	asrs	r3, r3, #2
 8001614:	b21a      	sxth	r2, r3
 8001616:	4b53      	ldr	r3, [pc, #332]	; (8001764 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001618:	81da      	strh	r2, [r3, #14]
	}
	if(htim->Instance  == TIM2){
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001622:	d113      	bne.n	800164c <HAL_TIM_IC_CaptureCallback+0x6c>
		encoder_B.counter  	= __HAL_TIM_GET_COUNTER(htim);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	4a4f      	ldr	r2, [pc, #316]	; (8001768 <HAL_TIM_IC_CaptureCallback+0x188>)
 800162c:	6093      	str	r3, [r2, #8]
		encoder_B.counts 	= (int16_t)encoder_B.counter;
 800162e:	4b4e      	ldr	r3, [pc, #312]	; (8001768 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	b21a      	sxth	r2, r3
 8001634:	4b4c      	ldr	r3, [pc, #304]	; (8001768 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001636:	819a      	strh	r2, [r3, #12]
		encoder_B.position	= encoder_B.counts/4;
 8001638:	4b4b      	ldr	r3, [pc, #300]	; (8001768 <HAL_TIM_IC_CaptureCallback+0x188>)
 800163a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800163e:	2b00      	cmp	r3, #0
 8001640:	da00      	bge.n	8001644 <HAL_TIM_IC_CaptureCallback+0x64>
 8001642:	3303      	adds	r3, #3
 8001644:	109b      	asrs	r3, r3, #2
 8001646:	b21a      	sxth	r2, r3
 8001648:	4b47      	ldr	r3, [pc, #284]	; (8001768 <HAL_TIM_IC_CaptureCallback+0x188>)
 800164a:	81da      	strh	r2, [r3, #14]
	}
	if(htim->Instance  == TIM5){
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a46      	ldr	r2, [pc, #280]	; (800176c <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d113      	bne.n	800167e <HAL_TIM_IC_CaptureCallback+0x9e>
		encoder_C.counter  	= __HAL_TIM_GET_COUNTER(htim);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165c:	4a44      	ldr	r2, [pc, #272]	; (8001770 <HAL_TIM_IC_CaptureCallback+0x190>)
 800165e:	6093      	str	r3, [r2, #8]
		encoder_C.counts 		= (int16_t)encoder_C.counter;
 8001660:	4b43      	ldr	r3, [pc, #268]	; (8001770 <HAL_TIM_IC_CaptureCallback+0x190>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	b21a      	sxth	r2, r3
 8001666:	4b42      	ldr	r3, [pc, #264]	; (8001770 <HAL_TIM_IC_CaptureCallback+0x190>)
 8001668:	819a      	strh	r2, [r3, #12]
		encoder_C.position	= encoder_C.counts/4;
 800166a:	4b41      	ldr	r3, [pc, #260]	; (8001770 <HAL_TIM_IC_CaptureCallback+0x190>)
 800166c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001670:	2b00      	cmp	r3, #0
 8001672:	da00      	bge.n	8001676 <HAL_TIM_IC_CaptureCallback+0x96>
 8001674:	3303      	adds	r3, #3
 8001676:	109b      	asrs	r3, r3, #2
 8001678:	b21a      	sxth	r2, r3
 800167a:	4b3d      	ldr	r3, [pc, #244]	; (8001770 <HAL_TIM_IC_CaptureCallback+0x190>)
 800167c:	81da      	strh	r2, [r3, #14]
	}
	kinematic.S1 = abs(encoder_A.position);
 800167e:	4b39      	ldr	r3, [pc, #228]	; (8001764 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001680:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001684:	2b00      	cmp	r3, #0
 8001686:	bfb8      	it	lt
 8001688:	425b      	neglt	r3, r3
 800168a:	b29b      	uxth	r3, r3
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe fef5 	bl	800047c <__aeabi_i2d>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4937      	ldr	r1, [pc, #220]	; (8001774 <HAL_TIM_IC_CaptureCallback+0x194>)
 8001698:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	kinematic.S2 = abs(encoder_B.position);
 800169c:	4b32      	ldr	r3, [pc, #200]	; (8001768 <HAL_TIM_IC_CaptureCallback+0x188>)
 800169e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	bfb8      	it	lt
 80016a6:	425b      	neglt	r3, r3
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe fee6 	bl	800047c <__aeabi_i2d>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	492f      	ldr	r1, [pc, #188]	; (8001774 <HAL_TIM_IC_CaptureCallback+0x194>)
 80016b6:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	kinematic.S3 = abs(encoder_C.position);
 80016ba:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <HAL_TIM_IC_CaptureCallback+0x190>)
 80016bc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	bfb8      	it	lt
 80016c4:	425b      	neglt	r3, r3
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe fed7 	bl	800047c <__aeabi_i2d>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4928      	ldr	r1, [pc, #160]	; (8001774 <HAL_TIM_IC_CaptureCallback+0x194>)
 80016d4:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	kinematic.Sx = agv_kinematic_Sx(encoder_A.position,encoder_B.position,encoder_C.position);
 80016d8:	4b22      	ldr	r3, [pc, #136]	; (8001764 <HAL_TIM_IC_CaptureCallback+0x184>)
 80016da:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80016de:	4618      	mov	r0, r3
 80016e0:	4b21      	ldr	r3, [pc, #132]	; (8001768 <HAL_TIM_IC_CaptureCallback+0x188>)
 80016e2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80016e6:	4619      	mov	r1, r3
 80016e8:	4b21      	ldr	r3, [pc, #132]	; (8001770 <HAL_TIM_IC_CaptureCallback+0x190>)
 80016ea:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80016ee:	461a      	mov	r2, r3
 80016f0:	f7ff fdda 	bl	80012a8 <agv_kinematic_Sx>
 80016f4:	eeb0 7a40 	vmov.f32	s14, s0
 80016f8:	eef0 7a60 	vmov.f32	s15, s1
 80016fc:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <HAL_TIM_IC_CaptureCallback+0x194>)
 80016fe:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
	kinematic.Sy = agv_kinematic_Sy(encoder_A.position,encoder_B.position,encoder_C.position);
 8001702:	4b18      	ldr	r3, [pc, #96]	; (8001764 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001704:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001708:	4618      	mov	r0, r3
 800170a:	4b17      	ldr	r3, [pc, #92]	; (8001768 <HAL_TIM_IC_CaptureCallback+0x188>)
 800170c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001710:	4619      	mov	r1, r3
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <HAL_TIM_IC_CaptureCallback+0x190>)
 8001714:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001718:	461a      	mov	r2, r3
 800171a:	f7ff fd81 	bl	8001220 <agv_kinematic_Sy>
 800171e:	eeb0 7a40 	vmov.f32	s14, s0
 8001722:	eef0 7a60 	vmov.f32	s15, s1
 8001726:	4b13      	ldr	r3, [pc, #76]	; (8001774 <HAL_TIM_IC_CaptureCallback+0x194>)
 8001728:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
	kinematic.St = agv_kinematic_St(encoder_A.position,encoder_B.position,encoder_C.position);
 800172c:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <HAL_TIM_IC_CaptureCallback+0x184>)
 800172e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001732:	4618      	mov	r0, r3
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001736:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800173a:	4619      	mov	r1, r3
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <HAL_TIM_IC_CaptureCallback+0x190>)
 800173e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001742:	461a      	mov	r2, r3
 8001744:	f7ff fdee 	bl	8001324 <agv_kinematic_St>
 8001748:	eeb0 7a40 	vmov.f32	s14, s0
 800174c:	eef0 7a60 	vmov.f32	s15, s1
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <HAL_TIM_IC_CaptureCallback+0x194>)
 8001752:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40010000 	.word	0x40010000
 8001764:	200004b4 	.word	0x200004b4
 8001768:	200004cc 	.word	0x200004cc
 800176c:	40000c00 	.word	0x40000c00
 8001770:	200004e4 	.word	0x200004e4
 8001774:	20000370 	.word	0x20000370

08001778 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	BNO08X_GetData(&BNO08x_Data);
 8001780:	4805      	ldr	r0, [pc, #20]	; (8001798 <HAL_UART_RxCpltCallback+0x20>)
 8001782:	f7ff fb25 	bl	8000dd0 <BNO08X_GetData>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001786:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800178a:	4804      	ldr	r0, [pc, #16]	; (800179c <HAL_UART_RxCpltCallback+0x24>)
 800178c:	f001 fd7b 	bl	8003286 <HAL_GPIO_TogglePin>
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000088 	.word	0x20000088
 800179c:	40020800 	.word	0x40020800

080017a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017a2:	b0ab      	sub	sp, #172	; 0xac
 80017a4:	af2a      	add	r7, sp, #168	; 0xa8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a6:	f001 f911 	bl	80029cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017aa:	f000 f97b 	bl	8001aa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ae:	f000 fcd7 	bl	8002160 <MX_GPIO_Init>
  MX_TIM1_Init();
 80017b2:	f000 f9df 	bl	8001b74 <MX_TIM1_Init>
  MX_TIM2_Init();
 80017b6:	f000 fa35 	bl	8001c24 <MX_TIM2_Init>
  MX_TIM3_Init();
 80017ba:	f000 fa87 	bl	8001ccc <MX_TIM3_Init>
  MX_TIM4_Init();
 80017be:	f000 fb1d 	bl	8001dfc <MX_TIM4_Init>
  MX_TIM9_Init();
 80017c2:	f000 fbc3 	bl	8001f4c <MX_TIM9_Init>
  MX_TIM10_Init();
 80017c6:	f000 fc2f 	bl	8002028 <MX_TIM10_Init>
  MX_TIM11_Init();
 80017ca:	f000 fc51 	bl	8002070 <MX_TIM11_Init>
  MX_USART6_UART_Init();
 80017ce:	f000 fc9d 	bl	800210c <MX_USART6_UART_Init>
  MX_USART1_UART_Init();
 80017d2:	f000 fc71 	bl	80020b8 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 80017d6:	f000 fb65 	bl	8001ea4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  //+++++++++++++++++++++++++++++++++ MOTOR INITIALIZATION +++++++++++++++++++++++++++++//
  // Configuration 'Motor A'
  motor_A.tim_R = &htim3;
 80017da:	4ba1      	ldr	r3, [pc, #644]	; (8001a60 <main+0x2c0>)
 80017dc:	4aa1      	ldr	r2, [pc, #644]	; (8001a64 <main+0x2c4>)
 80017de:	601a      	str	r2, [r3, #0]
  motor_A.tim_L = &htim3;
 80017e0:	4b9f      	ldr	r3, [pc, #636]	; (8001a60 <main+0x2c0>)
 80017e2:	4aa0      	ldr	r2, [pc, #640]	; (8001a64 <main+0x2c4>)
 80017e4:	605a      	str	r2, [r3, #4]
  motor_A.tim_number_R = TIM3;
 80017e6:	4b9e      	ldr	r3, [pc, #632]	; (8001a60 <main+0x2c0>)
 80017e8:	4a9f      	ldr	r2, [pc, #636]	; (8001a68 <main+0x2c8>)
 80017ea:	609a      	str	r2, [r3, #8]
  motor_A.tim_number_L = TIM3;
 80017ec:	4b9c      	ldr	r3, [pc, #624]	; (8001a60 <main+0x2c0>)
 80017ee:	4a9e      	ldr	r2, [pc, #632]	; (8001a68 <main+0x2c8>)
 80017f0:	60da      	str	r2, [r3, #12]
  motor_A.channel_R = 1;
 80017f2:	4b9b      	ldr	r3, [pc, #620]	; (8001a60 <main+0x2c0>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	741a      	strb	r2, [r3, #16]
  motor_A.channel_L = 2;
 80017f8:	4b99      	ldr	r3, [pc, #612]	; (8001a60 <main+0x2c0>)
 80017fa:	2202      	movs	r2, #2
 80017fc:	745a      	strb	r2, [r3, #17]
  motor_A.EN_PORT_R = ENR_A_GPIO_Port;
 80017fe:	4b98      	ldr	r3, [pc, #608]	; (8001a60 <main+0x2c0>)
 8001800:	4a9a      	ldr	r2, [pc, #616]	; (8001a6c <main+0x2cc>)
 8001802:	619a      	str	r2, [r3, #24]
  motor_A.EN_PORT_L = ENL_A_GPIO_Port;
 8001804:	4b96      	ldr	r3, [pc, #600]	; (8001a60 <main+0x2c0>)
 8001806:	4a99      	ldr	r2, [pc, #612]	; (8001a6c <main+0x2cc>)
 8001808:	61da      	str	r2, [r3, #28]
  motor_A.EN_PIN_R = ENR_A_Pin;
 800180a:	4b95      	ldr	r3, [pc, #596]	; (8001a60 <main+0x2c0>)
 800180c:	2204      	movs	r2, #4
 800180e:	841a      	strh	r2, [r3, #32]
  motor_A.EN_PIN_L = ENL_A_Pin;
 8001810:	4b93      	ldr	r3, [pc, #588]	; (8001a60 <main+0x2c0>)
 8001812:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001816:	845a      	strh	r2, [r3, #34]	; 0x22

  // Configuration 'Motor B'
  motor_B.tim_R = &htim3;
 8001818:	4b95      	ldr	r3, [pc, #596]	; (8001a70 <main+0x2d0>)
 800181a:	4a92      	ldr	r2, [pc, #584]	; (8001a64 <main+0x2c4>)
 800181c:	601a      	str	r2, [r3, #0]
  motor_B.tim_L = &htim3;
 800181e:	4b94      	ldr	r3, [pc, #592]	; (8001a70 <main+0x2d0>)
 8001820:	4a90      	ldr	r2, [pc, #576]	; (8001a64 <main+0x2c4>)
 8001822:	605a      	str	r2, [r3, #4]
  motor_B.tim_number_R = TIM3;
 8001824:	4b92      	ldr	r3, [pc, #584]	; (8001a70 <main+0x2d0>)
 8001826:	4a90      	ldr	r2, [pc, #576]	; (8001a68 <main+0x2c8>)
 8001828:	609a      	str	r2, [r3, #8]
  motor_B.tim_number_L = TIM3;
 800182a:	4b91      	ldr	r3, [pc, #580]	; (8001a70 <main+0x2d0>)
 800182c:	4a8e      	ldr	r2, [pc, #568]	; (8001a68 <main+0x2c8>)
 800182e:	60da      	str	r2, [r3, #12]
  motor_B.channel_R = 3;
 8001830:	4b8f      	ldr	r3, [pc, #572]	; (8001a70 <main+0x2d0>)
 8001832:	2203      	movs	r2, #3
 8001834:	741a      	strb	r2, [r3, #16]
  motor_B.channel_L = 4;
 8001836:	4b8e      	ldr	r3, [pc, #568]	; (8001a70 <main+0x2d0>)
 8001838:	2204      	movs	r2, #4
 800183a:	745a      	strb	r2, [r3, #17]
  motor_B.EN_PORT_R = ENR_B_GPIO_Port;
 800183c:	4b8c      	ldr	r3, [pc, #560]	; (8001a70 <main+0x2d0>)
 800183e:	4a8b      	ldr	r2, [pc, #556]	; (8001a6c <main+0x2cc>)
 8001840:	619a      	str	r2, [r3, #24]
  motor_B.EN_PORT_L = ENL_B_GPIO_Port;
 8001842:	4b8b      	ldr	r3, [pc, #556]	; (8001a70 <main+0x2d0>)
 8001844:	4a89      	ldr	r2, [pc, #548]	; (8001a6c <main+0x2cc>)
 8001846:	61da      	str	r2, [r3, #28]
  motor_B.EN_PIN_R = ENR_B_Pin;
 8001848:	4b89      	ldr	r3, [pc, #548]	; (8001a70 <main+0x2d0>)
 800184a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800184e:	841a      	strh	r2, [r3, #32]
  motor_B.EN_PIN_L = ENL_B_Pin;
 8001850:	4b87      	ldr	r3, [pc, #540]	; (8001a70 <main+0x2d0>)
 8001852:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001856:	845a      	strh	r2, [r3, #34]	; 0x22

  // Configuration 'Motor C
  motor_C.tim_R = &htim9;
 8001858:	4b86      	ldr	r3, [pc, #536]	; (8001a74 <main+0x2d4>)
 800185a:	4a87      	ldr	r2, [pc, #540]	; (8001a78 <main+0x2d8>)
 800185c:	601a      	str	r2, [r3, #0]
  motor_C.tim_L = &htim9;
 800185e:	4b85      	ldr	r3, [pc, #532]	; (8001a74 <main+0x2d4>)
 8001860:	4a85      	ldr	r2, [pc, #532]	; (8001a78 <main+0x2d8>)
 8001862:	605a      	str	r2, [r3, #4]
  motor_C.tim_number_R = TIM9;
 8001864:	4b83      	ldr	r3, [pc, #524]	; (8001a74 <main+0x2d4>)
 8001866:	4a85      	ldr	r2, [pc, #532]	; (8001a7c <main+0x2dc>)
 8001868:	609a      	str	r2, [r3, #8]
  motor_C.tim_number_L = TIM9;
 800186a:	4b82      	ldr	r3, [pc, #520]	; (8001a74 <main+0x2d4>)
 800186c:	4a83      	ldr	r2, [pc, #524]	; (8001a7c <main+0x2dc>)
 800186e:	60da      	str	r2, [r3, #12]
  motor_C.channel_R = 1;
 8001870:	4b80      	ldr	r3, [pc, #512]	; (8001a74 <main+0x2d4>)
 8001872:	2201      	movs	r2, #1
 8001874:	741a      	strb	r2, [r3, #16]
  motor_C.channel_L = 2;
 8001876:	4b7f      	ldr	r3, [pc, #508]	; (8001a74 <main+0x2d4>)
 8001878:	2202      	movs	r2, #2
 800187a:	745a      	strb	r2, [r3, #17]
  motor_C.EN_PORT_R = ENR_C_GPIO_Port;
 800187c:	4b7d      	ldr	r3, [pc, #500]	; (8001a74 <main+0x2d4>)
 800187e:	4a7b      	ldr	r2, [pc, #492]	; (8001a6c <main+0x2cc>)
 8001880:	619a      	str	r2, [r3, #24]
  motor_C.EN_PORT_L = ENL_C_GPIO_Port;
 8001882:	4b7c      	ldr	r3, [pc, #496]	; (8001a74 <main+0x2d4>)
 8001884:	4a79      	ldr	r2, [pc, #484]	; (8001a6c <main+0x2cc>)
 8001886:	61da      	str	r2, [r3, #28]
  motor_C.EN_PIN_R = ENR_C_Pin;
 8001888:	4b7a      	ldr	r3, [pc, #488]	; (8001a74 <main+0x2d4>)
 800188a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800188e:	841a      	strh	r2, [r3, #32]
  motor_C.EN_PIN_L = ENL_C_Pin;
 8001890:	4b78      	ldr	r3, [pc, #480]	; (8001a74 <main+0x2d4>)
 8001892:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001896:	845a      	strh	r2, [r3, #34]	; 0x22

  //+++++++++++++++++++++++++++++++++ ENCODER INITIALIZATION ++++++++++++++++++++++++++++++//
  agv_encoder_start(encoder_A, &htim1, TIM1);
 8001898:	4b79      	ldr	r3, [pc, #484]	; (8001a80 <main+0x2e0>)
 800189a:	4a7a      	ldr	r2, [pc, #488]	; (8001a84 <main+0x2e4>)
 800189c:	9203      	str	r2, [sp, #12]
 800189e:	4a7a      	ldr	r2, [pc, #488]	; (8001a88 <main+0x2e8>)
 80018a0:	9202      	str	r2, [sp, #8]
 80018a2:	466c      	mov	r4, sp
 80018a4:	f103 0210 	add.w	r2, r3, #16
 80018a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018ac:	e884 0003 	stmia.w	r4, {r0, r1}
 80018b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018b2:	f7ff fc9e 	bl	80011f2 <agv_encoder_start>
  agv_encoder_start(encoder_B, &htim2, TIM2);
 80018b6:	4b75      	ldr	r3, [pc, #468]	; (8001a8c <main+0x2ec>)
 80018b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018bc:	9203      	str	r2, [sp, #12]
 80018be:	4a74      	ldr	r2, [pc, #464]	; (8001a90 <main+0x2f0>)
 80018c0:	9202      	str	r2, [sp, #8]
 80018c2:	466c      	mov	r4, sp
 80018c4:	f103 0210 	add.w	r2, r3, #16
 80018c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018cc:	e884 0003 	stmia.w	r4, {r0, r1}
 80018d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018d2:	f7ff fc8e 	bl	80011f2 <agv_encoder_start>
  agv_encoder_start(encoder_C, &htim5, TIM5);
 80018d6:	4b6f      	ldr	r3, [pc, #444]	; (8001a94 <main+0x2f4>)
 80018d8:	4a6f      	ldr	r2, [pc, #444]	; (8001a98 <main+0x2f8>)
 80018da:	9203      	str	r2, [sp, #12]
 80018dc:	4a6f      	ldr	r2, [pc, #444]	; (8001a9c <main+0x2fc>)
 80018de:	9202      	str	r2, [sp, #8]
 80018e0:	466c      	mov	r4, sp
 80018e2:	f103 0210 	add.w	r2, r3, #16
 80018e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018ea:	e884 0003 	stmia.w	r4, {r0, r1}
 80018ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018f0:	f7ff fc7f 	bl	80011f2 <agv_encoder_start>

  //+++++++++++++++++++++++++++++++++ ENCODER TO MOTOR ++++++++++++++++++++++++++++++++++++//
  motor_A.ENC = encoder_A;
 80018f4:	4b5a      	ldr	r3, [pc, #360]	; (8001a60 <main+0x2c0>)
 80018f6:	4a62      	ldr	r2, [pc, #392]	; (8001a80 <main+0x2e0>)
 80018f8:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80018fc:	4615      	mov	r5, r2
 80018fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001900:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001902:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001906:	e884 0003 	stmia.w	r4, {r0, r1}
  motor_B.ENC = encoder_B;
 800190a:	4b59      	ldr	r3, [pc, #356]	; (8001a70 <main+0x2d0>)
 800190c:	4a5f      	ldr	r2, [pc, #380]	; (8001a8c <main+0x2ec>)
 800190e:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8001912:	4615      	mov	r5, r2
 8001914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001918:	e895 0003 	ldmia.w	r5, {r0, r1}
 800191c:	e884 0003 	stmia.w	r4, {r0, r1}
  motor_C.ENC = encoder_C;
 8001920:	4b54      	ldr	r3, [pc, #336]	; (8001a74 <main+0x2d4>)
 8001922:	4a5c      	ldr	r2, [pc, #368]	; (8001a94 <main+0x2f4>)
 8001924:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8001928:	4615      	mov	r5, r2
 800192a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800192c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800192e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001932:	e884 0003 	stmia.w	r4, {r0, r1}

  // STOP ALL Motor
  agv_stop_all(motor_A, motor_B, motor_C);
 8001936:	4e4a      	ldr	r6, [pc, #296]	; (8001a60 <main+0x2c0>)
 8001938:	4b4e      	ldr	r3, [pc, #312]	; (8001a74 <main+0x2d4>)
 800193a:	ac1a      	add	r4, sp, #104	; 0x68
 800193c:	461d      	mov	r5, r3
 800193e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001944:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800194a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800194e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001952:	4b47      	ldr	r3, [pc, #284]	; (8001a70 <main+0x2d0>)
 8001954:	ac0b      	add	r4, sp, #44	; 0x2c
 8001956:	461d      	mov	r5, r3
 8001958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800195a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800195c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800195e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001964:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001968:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800196c:	466d      	mov	r5, sp
 800196e:	f106 0410 	add.w	r4, r6, #16
 8001972:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001974:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001978:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800197a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800197e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001982:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001986:	f7ff fbb2 	bl	80010ee <agv_stop_all>

  //+++++++++++++++++++++++++++++++++ BNO08X INITIALIZATION ++++++++++++++++++++++++++++++//
  BNO08X_Init(&huart6);
 800198a:	4845      	ldr	r0, [pc, #276]	; (8001aa0 <main+0x300>)
 800198c:	f7ff fa92 	bl	8000eb4 <BNO08X_Init>
//  agv_inverse_kinematic(0, -200, 0, motor_A, motor_B, motor_C);
//  HAL_Delay(2000);
//  agv_reset_all(motor_A, motor_B, motor_C);
//  agv_inverse_kinematic(200, 0, 0, motor_A, motor_B, motor_C);
//  HAL_Delay(2000);
  agv_reset_all(motor_A, motor_B, motor_C);
 8001990:	4e33      	ldr	r6, [pc, #204]	; (8001a60 <main+0x2c0>)
 8001992:	4b38      	ldr	r3, [pc, #224]	; (8001a74 <main+0x2d4>)
 8001994:	ac1a      	add	r4, sp, #104	; 0x68
 8001996:	461d      	mov	r5, r3
 8001998:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800199a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800199c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800199e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80019ac:	4b30      	ldr	r3, [pc, #192]	; (8001a70 <main+0x2d0>)
 80019ae:	ac0b      	add	r4, sp, #44	; 0x2c
 80019b0:	461d      	mov	r5, r3
 80019b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80019c6:	466d      	mov	r5, sp
 80019c8:	f106 0410 	add.w	r4, r6, #16
 80019cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019d4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80019d8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80019dc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80019e0:	f7ff fbc3 	bl	800116a <agv_reset_all>
  agv_inverse_kinematic(-200, 0, 0, motor_A, motor_B, motor_C);
 80019e4:	4e1e      	ldr	r6, [pc, #120]	; (8001a60 <main+0x2c0>)
 80019e6:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <main+0x2d4>)
 80019e8:	ac1a      	add	r4, sp, #104	; 0x68
 80019ea:	461d      	mov	r5, r3
 80019ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <main+0x2d0>)
 8001a02:	ac0b      	add	r4, sp, #44	; 0x2c
 8001a04:	461d      	mov	r5, r3
 8001a06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a1a:	466d      	mov	r5, sp
 8001a1c:	f106 0410 	add.w	r4, r6, #16
 8001a20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a28:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001a2c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001a30:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001a34:	ed9f 2b06 	vldr	d2, [pc, #24]	; 8001a50 <main+0x2b0>
 8001a38:	ed9f 1b05 	vldr	d1, [pc, #20]	; 8001a50 <main+0x2b0>
 8001a3c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8001a58 <main+0x2b8>
 8001a40:	f7ff fc8e 	bl	8001360 <agv_inverse_kinematic>
  HAL_Delay(2000);
 8001a44:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a48:	f001 f832 	bl	8002ab0 <HAL_Delay>
//  agv_reset_all(motor_A, motor_B, motor_C);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <main+0x2ac>
 8001a4e:	bf00      	nop
	...
 8001a5c:	c0690000 	.word	0xc0690000
 8001a60:	20000400 	.word	0x20000400
 8001a64:	2000012c 	.word	0x2000012c
 8001a68:	40000400 	.word	0x40000400
 8001a6c:	40020400 	.word	0x40020400
 8001a70:	2000043c 	.word	0x2000043c
 8001a74:	20000478 	.word	0x20000478
 8001a78:	20000204 	.word	0x20000204
 8001a7c:	40014000 	.word	0x40014000
 8001a80:	200004b4 	.word	0x200004b4
 8001a84:	40010000 	.word	0x40010000
 8001a88:	2000009c 	.word	0x2000009c
 8001a8c:	200004cc 	.word	0x200004cc
 8001a90:	200000e4 	.word	0x200000e4
 8001a94:	200004e4 	.word	0x200004e4
 8001a98:	40000c00 	.word	0x40000c00
 8001a9c:	200001bc 	.word	0x200001bc
 8001aa0:	20000324 	.word	0x20000324

08001aa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b094      	sub	sp, #80	; 0x50
 8001aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aaa:	f107 0320 	add.w	r3, r7, #32
 8001aae:	2230      	movs	r2, #48	; 0x30
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f004 fa06 	bl	8005ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	4b27      	ldr	r3, [pc, #156]	; (8001b6c <SystemClock_Config+0xc8>)
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	4a26      	ldr	r2, [pc, #152]	; (8001b6c <SystemClock_Config+0xc8>)
 8001ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad8:	4b24      	ldr	r3, [pc, #144]	; (8001b6c <SystemClock_Config+0xc8>)
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	607b      	str	r3, [r7, #4]
 8001ae8:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <SystemClock_Config+0xcc>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a20      	ldr	r2, [pc, #128]	; (8001b70 <SystemClock_Config+0xcc>)
 8001aee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	4b1e      	ldr	r3, [pc, #120]	; (8001b70 <SystemClock_Config+0xcc>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b00:	2302      	movs	r3, #2
 8001b02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b04:	2301      	movs	r3, #1
 8001b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b08:	2310      	movs	r3, #16
 8001b0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b10:	2300      	movs	r3, #0
 8001b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b14:	2308      	movs	r3, #8
 8001b16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001b18:	2364      	movs	r3, #100	; 0x64
 8001b1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b20:	2304      	movs	r3, #4
 8001b22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b24:	f107 0320 	add.w	r3, r7, #32
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f001 fbc7 	bl	80032bc <HAL_RCC_OscConfig>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b34:	f000 fba0 	bl	8002278 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b38:	230f      	movs	r3, #15
 8001b3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b4e:	f107 030c 	add.w	r3, r7, #12
 8001b52:	2103      	movs	r1, #3
 8001b54:	4618      	mov	r0, r3
 8001b56:	f001 fe29 	bl	80037ac <HAL_RCC_ClockConfig>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001b60:	f000 fb8a 	bl	8002278 <Error_Handler>
  }
}
 8001b64:	bf00      	nop
 8001b66:	3750      	adds	r7, #80	; 0x50
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40007000 	.word	0x40007000

08001b74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08c      	sub	sp, #48	; 0x30
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	2224      	movs	r2, #36	; 0x24
 8001b80:	2100      	movs	r1, #0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f004 f99e 	bl	8005ec4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b90:	4b22      	ldr	r3, [pc, #136]	; (8001c1c <MX_TIM1_Init+0xa8>)
 8001b92:	4a23      	ldr	r2, [pc, #140]	; (8001c20 <MX_TIM1_Init+0xac>)
 8001b94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b96:	4b21      	ldr	r3, [pc, #132]	; (8001c1c <MX_TIM1_Init+0xa8>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	; (8001c1c <MX_TIM1_Init+0xa8>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ba2:	4b1e      	ldr	r3, [pc, #120]	; (8001c1c <MX_TIM1_Init+0xa8>)
 8001ba4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ba8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001baa:	4b1c      	ldr	r3, [pc, #112]	; (8001c1c <MX_TIM1_Init+0xa8>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bb0:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <MX_TIM1_Init+0xa8>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb6:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <MX_TIM1_Init+0xa8>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001be0:	f107 030c 	add.w	r3, r7, #12
 8001be4:	4619      	mov	r1, r3
 8001be6:	480d      	ldr	r0, [pc, #52]	; (8001c1c <MX_TIM1_Init+0xa8>)
 8001be8:	f002 f918 	bl	8003e1c <HAL_TIM_Encoder_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001bf2:	f000 fb41 	bl	8002278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	4619      	mov	r1, r3
 8001c02:	4806      	ldr	r0, [pc, #24]	; (8001c1c <MX_TIM1_Init+0xa8>)
 8001c04:	f002 ffd8 	bl	8004bb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001c0e:	f000 fb33 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c12:	bf00      	nop
 8001c14:	3730      	adds	r7, #48	; 0x30
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	2000009c 	.word	0x2000009c
 8001c20:	40010000 	.word	0x40010000

08001c24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08c      	sub	sp, #48	; 0x30
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c2a:	f107 030c 	add.w	r3, r7, #12
 8001c2e:	2224      	movs	r2, #36	; 0x24
 8001c30:	2100      	movs	r1, #0
 8001c32:	4618      	mov	r0, r3
 8001c34:	f004 f946 	bl	8005ec4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c40:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <MX_TIM2_Init+0xa4>)
 8001c42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c48:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <MX_TIM2_Init+0xa4>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <MX_TIM2_Init+0xa4>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001c54:	4b1c      	ldr	r3, [pc, #112]	; (8001cc8 <MX_TIM2_Init+0xa4>)
 8001c56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c5c:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <MX_TIM2_Init+0xa4>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c62:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <MX_TIM2_Init+0xa4>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c70:	2301      	movs	r3, #1
 8001c72:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c80:	2301      	movs	r3, #1
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c84:	2300      	movs	r3, #0
 8001c86:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	4619      	mov	r1, r3
 8001c92:	480d      	ldr	r0, [pc, #52]	; (8001cc8 <MX_TIM2_Init+0xa4>)
 8001c94:	f002 f8c2 	bl	8003e1c <HAL_TIM_Encoder_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001c9e:	f000 faeb 	bl	8002278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	4619      	mov	r1, r3
 8001cae:	4806      	ldr	r0, [pc, #24]	; (8001cc8 <MX_TIM2_Init+0xa4>)
 8001cb0:	f002 ff82 	bl	8004bb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001cba:	f000 fadd 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	3730      	adds	r7, #48	; 0x30
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200000e4 	.word	0x200000e4

08001ccc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08e      	sub	sp, #56	; 0x38
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce0:	f107 0320 	add.w	r3, r7, #32
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
 8001cf8:	615a      	str	r2, [r3, #20]
 8001cfa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cfc:	4b3d      	ldr	r3, [pc, #244]	; (8001df4 <MX_TIM3_Init+0x128>)
 8001cfe:	4a3e      	ldr	r2, [pc, #248]	; (8001df8 <MX_TIM3_Init+0x12c>)
 8001d00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8001d02:	4b3c      	ldr	r3, [pc, #240]	; (8001df4 <MX_TIM3_Init+0x128>)
 8001d04:	2263      	movs	r2, #99	; 0x63
 8001d06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d08:	4b3a      	ldr	r3, [pc, #232]	; (8001df4 <MX_TIM3_Init+0x128>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001d0e:	4b39      	ldr	r3, [pc, #228]	; (8001df4 <MX_TIM3_Init+0x128>)
 8001d10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d16:	4b37      	ldr	r3, [pc, #220]	; (8001df4 <MX_TIM3_Init+0x128>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d1c:	4b35      	ldr	r3, [pc, #212]	; (8001df4 <MX_TIM3_Init+0x128>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d22:	4834      	ldr	r0, [pc, #208]	; (8001df4 <MX_TIM3_Init+0x128>)
 8001d24:	f001 ff22 	bl	8003b6c <HAL_TIM_Base_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001d2e:	f000 faa3 	bl	8002278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d36:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	482d      	ldr	r0, [pc, #180]	; (8001df4 <MX_TIM3_Init+0x128>)
 8001d40:	f002 fb72 	bl	8004428 <HAL_TIM_ConfigClockSource>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001d4a:	f000 fa95 	bl	8002278 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d4e:	4829      	ldr	r0, [pc, #164]	; (8001df4 <MX_TIM3_Init+0x128>)
 8001d50:	f001 ff5b 	bl	8003c0a <HAL_TIM_PWM_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001d5a:	f000 fa8d 	bl	8002278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d66:	f107 0320 	add.w	r3, r7, #32
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4821      	ldr	r0, [pc, #132]	; (8001df4 <MX_TIM3_Init+0x128>)
 8001d6e:	f002 ff23 	bl	8004bb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001d78:	f000 fa7e 	bl	8002278 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d7c:	2360      	movs	r3, #96	; 0x60
 8001d7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d8c:	1d3b      	adds	r3, r7, #4
 8001d8e:	2200      	movs	r2, #0
 8001d90:	4619      	mov	r1, r3
 8001d92:	4818      	ldr	r0, [pc, #96]	; (8001df4 <MX_TIM3_Init+0x128>)
 8001d94:	f002 fa86 	bl	80042a4 <HAL_TIM_PWM_ConfigChannel>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001d9e:	f000 fa6b 	bl	8002278 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001da2:	1d3b      	adds	r3, r7, #4
 8001da4:	2204      	movs	r2, #4
 8001da6:	4619      	mov	r1, r3
 8001da8:	4812      	ldr	r0, [pc, #72]	; (8001df4 <MX_TIM3_Init+0x128>)
 8001daa:	f002 fa7b 	bl	80042a4 <HAL_TIM_PWM_ConfigChannel>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001db4:	f000 fa60 	bl	8002278 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001db8:	1d3b      	adds	r3, r7, #4
 8001dba:	2208      	movs	r2, #8
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	480d      	ldr	r0, [pc, #52]	; (8001df4 <MX_TIM3_Init+0x128>)
 8001dc0:	f002 fa70 	bl	80042a4 <HAL_TIM_PWM_ConfigChannel>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001dca:	f000 fa55 	bl	8002278 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	220c      	movs	r2, #12
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4807      	ldr	r0, [pc, #28]	; (8001df4 <MX_TIM3_Init+0x128>)
 8001dd6:	f002 fa65 	bl	80042a4 <HAL_TIM_PWM_ConfigChannel>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001de0:	f000 fa4a 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001de4:	4803      	ldr	r0, [pc, #12]	; (8001df4 <MX_TIM3_Init+0x128>)
 8001de6:	f000 fbfb 	bl	80025e0 <HAL_TIM_MspPostInit>

}
 8001dea:	bf00      	nop
 8001dec:	3738      	adds	r7, #56	; 0x38
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	2000012c 	.word	0x2000012c
 8001df8:	40000400 	.word	0x40000400

08001dfc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08c      	sub	sp, #48	; 0x30
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e02:	f107 030c 	add.w	r3, r7, #12
 8001e06:	2224      	movs	r2, #36	; 0x24
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f004 f85a 	bl	8005ec4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e10:	1d3b      	adds	r3, r7, #4
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e18:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <MX_TIM4_Init+0xa0>)
 8001e1a:	4a21      	ldr	r2, [pc, #132]	; (8001ea0 <MX_TIM4_Init+0xa4>)
 8001e1c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001e1e:	4b1f      	ldr	r3, [pc, #124]	; (8001e9c <MX_TIM4_Init+0xa0>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e24:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <MX_TIM4_Init+0xa0>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001e2a:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <MX_TIM4_Init+0xa0>)
 8001e2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e30:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e32:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <MX_TIM4_Init+0xa0>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e38:	4b18      	ldr	r3, [pc, #96]	; (8001e9c <MX_TIM4_Init+0xa0>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e46:	2301      	movs	r3, #1
 8001e48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e52:	2300      	movs	r3, #0
 8001e54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e56:	2301      	movs	r3, #1
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001e62:	f107 030c 	add.w	r3, r7, #12
 8001e66:	4619      	mov	r1, r3
 8001e68:	480c      	ldr	r0, [pc, #48]	; (8001e9c <MX_TIM4_Init+0xa0>)
 8001e6a:	f001 ffd7 	bl	8003e1c <HAL_TIM_Encoder_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001e74:	f000 fa00 	bl	8002278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	4619      	mov	r1, r3
 8001e84:	4805      	ldr	r0, [pc, #20]	; (8001e9c <MX_TIM4_Init+0xa0>)
 8001e86:	f002 fe97 	bl	8004bb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001e90:	f000 f9f2 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e94:	bf00      	nop
 8001e96:	3730      	adds	r7, #48	; 0x30
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000174 	.word	0x20000174
 8001ea0:	40000800 	.word	0x40000800

08001ea4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08c      	sub	sp, #48	; 0x30
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001eaa:	f107 030c 	add.w	r3, r7, #12
 8001eae:	2224      	movs	r2, #36	; 0x24
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f004 f806 	bl	8005ec4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb8:	1d3b      	adds	r3, r7, #4
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ec0:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <MX_TIM5_Init+0xa0>)
 8001ec2:	4a21      	ldr	r2, [pc, #132]	; (8001f48 <MX_TIM5_Init+0xa4>)
 8001ec4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001ec6:	4b1f      	ldr	r3, [pc, #124]	; (8001f44 <MX_TIM5_Init+0xa0>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ecc:	4b1d      	ldr	r3, [pc, #116]	; (8001f44 <MX_TIM5_Init+0xa0>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001ed2:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <MX_TIM5_Init+0xa0>)
 8001ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eda:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <MX_TIM5_Init+0xa0>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee0:	4b18      	ldr	r3, [pc, #96]	; (8001f44 <MX_TIM5_Init+0xa0>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001eea:	2300      	movs	r3, #0
 8001eec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001efa:	2300      	movs	r3, #0
 8001efc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001efe:	2301      	movs	r3, #1
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f02:	2300      	movs	r3, #0
 8001f04:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001f0a:	f107 030c 	add.w	r3, r7, #12
 8001f0e:	4619      	mov	r1, r3
 8001f10:	480c      	ldr	r0, [pc, #48]	; (8001f44 <MX_TIM5_Init+0xa0>)
 8001f12:	f001 ff83 	bl	8003e1c <HAL_TIM_Encoder_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001f1c:	f000 f9ac 	bl	8002278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f20:	2300      	movs	r3, #0
 8001f22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4805      	ldr	r0, [pc, #20]	; (8001f44 <MX_TIM5_Init+0xa0>)
 8001f2e:	f002 fe43 	bl	8004bb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001f38:	f000 f99e 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001f3c:	bf00      	nop
 8001f3e:	3730      	adds	r7, #48	; 0x30
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	200001bc 	.word	0x200001bc
 8001f48:	40000c00 	.word	0x40000c00

08001f4c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08c      	sub	sp, #48	; 0x30
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f52:	f107 0320 	add.w	r3, r7, #32
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
 8001f5c:	609a      	str	r2, [r3, #8]
 8001f5e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f60:	1d3b      	adds	r3, r7, #4
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	60da      	str	r2, [r3, #12]
 8001f6c:	611a      	str	r2, [r3, #16]
 8001f6e:	615a      	str	r2, [r3, #20]
 8001f70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001f72:	4b2b      	ldr	r3, [pc, #172]	; (8002020 <MX_TIM9_Init+0xd4>)
 8001f74:	4a2b      	ldr	r2, [pc, #172]	; (8002024 <MX_TIM9_Init+0xd8>)
 8001f76:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 100-1;
 8001f78:	4b29      	ldr	r3, [pc, #164]	; (8002020 <MX_TIM9_Init+0xd4>)
 8001f7a:	2263      	movs	r2, #99	; 0x63
 8001f7c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7e:	4b28      	ldr	r3, [pc, #160]	; (8002020 <MX_TIM9_Init+0xd4>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8001f84:	4b26      	ldr	r3, [pc, #152]	; (8002020 <MX_TIM9_Init+0xd4>)
 8001f86:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f8a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f8c:	4b24      	ldr	r3, [pc, #144]	; (8002020 <MX_TIM9_Init+0xd4>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f92:	4b23      	ldr	r3, [pc, #140]	; (8002020 <MX_TIM9_Init+0xd4>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001f98:	4821      	ldr	r0, [pc, #132]	; (8002020 <MX_TIM9_Init+0xd4>)
 8001f9a:	f001 fde7 	bl	8003b6c <HAL_TIM_Base_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001fa4:	f000 f968 	bl	8002278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fac:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001fae:	f107 0320 	add.w	r3, r7, #32
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	481a      	ldr	r0, [pc, #104]	; (8002020 <MX_TIM9_Init+0xd4>)
 8001fb6:	f002 fa37 	bl	8004428 <HAL_TIM_ConfigClockSource>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001fc0:	f000 f95a 	bl	8002278 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001fc4:	4816      	ldr	r0, [pc, #88]	; (8002020 <MX_TIM9_Init+0xd4>)
 8001fc6:	f001 fe20 	bl	8003c0a <HAL_TIM_PWM_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001fd0:	f000 f952 	bl	8002278 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fd4:	2360      	movs	r3, #96	; 0x60
 8001fd6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fe4:	1d3b      	adds	r3, r7, #4
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	4619      	mov	r1, r3
 8001fea:	480d      	ldr	r0, [pc, #52]	; (8002020 <MX_TIM9_Init+0xd4>)
 8001fec:	f002 f95a 	bl	80042a4 <HAL_TIM_PWM_ConfigChannel>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8001ff6:	f000 f93f 	bl	8002278 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ffa:	1d3b      	adds	r3, r7, #4
 8001ffc:	2204      	movs	r2, #4
 8001ffe:	4619      	mov	r1, r3
 8002000:	4807      	ldr	r0, [pc, #28]	; (8002020 <MX_TIM9_Init+0xd4>)
 8002002:	f002 f94f 	bl	80042a4 <HAL_TIM_PWM_ConfigChannel>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 800200c:	f000 f934 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002010:	4803      	ldr	r0, [pc, #12]	; (8002020 <MX_TIM9_Init+0xd4>)
 8002012:	f000 fae5 	bl	80025e0 <HAL_TIM_MspPostInit>

}
 8002016:	bf00      	nop
 8002018:	3730      	adds	r7, #48	; 0x30
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000204 	.word	0x20000204
 8002024:	40014000 	.word	0x40014000

08002028 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800202c:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <MX_TIM10_Init+0x40>)
 800202e:	4a0f      	ldr	r2, [pc, #60]	; (800206c <MX_TIM10_Init+0x44>)
 8002030:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 100-1;
 8002032:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <MX_TIM10_Init+0x40>)
 8002034:	2263      	movs	r2, #99	; 0x63
 8002036:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <MX_TIM10_Init+0x40>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 800203e:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <MX_TIM10_Init+0x40>)
 8002040:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002044:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002046:	4b08      	ldr	r3, [pc, #32]	; (8002068 <MX_TIM10_Init+0x40>)
 8002048:	2200      	movs	r2, #0
 800204a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <MX_TIM10_Init+0x40>)
 800204e:	2200      	movs	r2, #0
 8002050:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002052:	4805      	ldr	r0, [pc, #20]	; (8002068 <MX_TIM10_Init+0x40>)
 8002054:	f001 fd8a 	bl	8003b6c <HAL_TIM_Base_Init>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800205e:	f000 f90b 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	2000024c 	.word	0x2000024c
 800206c:	40014400 	.word	0x40014400

08002070 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002074:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <MX_TIM11_Init+0x40>)
 8002076:	4a0f      	ldr	r2, [pc, #60]	; (80020b4 <MX_TIM11_Init+0x44>)
 8002078:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 800207a:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <MX_TIM11_Init+0x40>)
 800207c:	2263      	movs	r2, #99	; 0x63
 800207e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002080:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <MX_TIM11_Init+0x40>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8002086:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <MX_TIM11_Init+0x40>)
 8002088:	f240 32e7 	movw	r2, #999	; 0x3e7
 800208c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800208e:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <MX_TIM11_Init+0x40>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002094:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <MX_TIM11_Init+0x40>)
 8002096:	2200      	movs	r2, #0
 8002098:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800209a:	4805      	ldr	r0, [pc, #20]	; (80020b0 <MX_TIM11_Init+0x40>)
 800209c:	f001 fd66 	bl	8003b6c <HAL_TIM_Base_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80020a6:	f000 f8e7 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000294 	.word	0x20000294
 80020b4:	40014800 	.word	0x40014800

080020b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020bc:	4b11      	ldr	r3, [pc, #68]	; (8002104 <MX_USART1_UART_Init+0x4c>)
 80020be:	4a12      	ldr	r2, [pc, #72]	; (8002108 <MX_USART1_UART_Init+0x50>)
 80020c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <MX_USART1_UART_Init+0x4c>)
 80020c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020ca:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <MX_USART1_UART_Init+0x4c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <MX_USART1_UART_Init+0x4c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020d6:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <MX_USART1_UART_Init+0x4c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <MX_USART1_UART_Init+0x4c>)
 80020de:	220c      	movs	r2, #12
 80020e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020e2:	4b08      	ldr	r3, [pc, #32]	; (8002104 <MX_USART1_UART_Init+0x4c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <MX_USART1_UART_Init+0x4c>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020ee:	4805      	ldr	r0, [pc, #20]	; (8002104 <MX_USART1_UART_Init+0x4c>)
 80020f0:	f002 fde4 	bl	8004cbc <HAL_UART_Init>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020fa:	f000 f8bd 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200002dc 	.word	0x200002dc
 8002108:	40011000 	.word	0x40011000

0800210c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <MX_USART6_UART_Init+0x4c>)
 8002112:	4a12      	ldr	r2, [pc, #72]	; (800215c <MX_USART6_UART_Init+0x50>)
 8002114:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <MX_USART6_UART_Init+0x4c>)
 8002118:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800211c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800211e:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <MX_USART6_UART_Init+0x4c>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <MX_USART6_UART_Init+0x4c>)
 8002126:	2200      	movs	r2, #0
 8002128:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800212a:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <MX_USART6_UART_Init+0x4c>)
 800212c:	2200      	movs	r2, #0
 800212e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002130:	4b09      	ldr	r3, [pc, #36]	; (8002158 <MX_USART6_UART_Init+0x4c>)
 8002132:	220c      	movs	r2, #12
 8002134:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002136:	4b08      	ldr	r3, [pc, #32]	; (8002158 <MX_USART6_UART_Init+0x4c>)
 8002138:	2200      	movs	r2, #0
 800213a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <MX_USART6_UART_Init+0x4c>)
 800213e:	2200      	movs	r2, #0
 8002140:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002142:	4805      	ldr	r0, [pc, #20]	; (8002158 <MX_USART6_UART_Init+0x4c>)
 8002144:	f002 fdba 	bl	8004cbc <HAL_UART_Init>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800214e:	f000 f893 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000324 	.word	0x20000324
 800215c:	40011400 	.word	0x40011400

08002160 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002166:	f107 0314 	add.w	r3, r7, #20
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	605a      	str	r2, [r3, #4]
 8002170:	609a      	str	r2, [r3, #8]
 8002172:	60da      	str	r2, [r3, #12]
 8002174:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	4b3b      	ldr	r3, [pc, #236]	; (8002268 <MX_GPIO_Init+0x108>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a3a      	ldr	r2, [pc, #232]	; (8002268 <MX_GPIO_Init+0x108>)
 8002180:	f043 0304 	orr.w	r3, r3, #4
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b38      	ldr	r3, [pc, #224]	; (8002268 <MX_GPIO_Init+0x108>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	4b34      	ldr	r3, [pc, #208]	; (8002268 <MX_GPIO_Init+0x108>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	4a33      	ldr	r2, [pc, #204]	; (8002268 <MX_GPIO_Init+0x108>)
 800219c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a0:	6313      	str	r3, [r2, #48]	; 0x30
 80021a2:	4b31      	ldr	r3, [pc, #196]	; (8002268 <MX_GPIO_Init+0x108>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	4b2d      	ldr	r3, [pc, #180]	; (8002268 <MX_GPIO_Init+0x108>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4a2c      	ldr	r2, [pc, #176]	; (8002268 <MX_GPIO_Init+0x108>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4b2a      	ldr	r3, [pc, #168]	; (8002268 <MX_GPIO_Init+0x108>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	607b      	str	r3, [r7, #4]
 80021ce:	4b26      	ldr	r3, [pc, #152]	; (8002268 <MX_GPIO_Init+0x108>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	4a25      	ldr	r2, [pc, #148]	; (8002268 <MX_GPIO_Init+0x108>)
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
 80021da:	4b23      	ldr	r3, [pc, #140]	; (8002268 <MX_GPIO_Init+0x108>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	607b      	str	r3, [r7, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_UART_Pin|IN3_Pin|IN4_Pin, GPIO_PIN_RESET);
 80021e6:	2200      	movs	r2, #0
 80021e8:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80021ec:	481f      	ldr	r0, [pc, #124]	; (800226c <MX_GPIO_Init+0x10c>)
 80021ee:	f001 f831 	bl	8003254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80021f2:	2200      	movs	r2, #0
 80021f4:	2110      	movs	r1, #16
 80021f6:	481e      	ldr	r0, [pc, #120]	; (8002270 <MX_GPIO_Init+0x110>)
 80021f8:	f001 f82c 	bl	8003254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENR_A_Pin|ENL_A_Pin|ENR_B_Pin|ENL_B_Pin
 80021fc:	2200      	movs	r2, #0
 80021fe:	f24f 4134 	movw	r1, #62516	; 0xf434
 8002202:	481c      	ldr	r0, [pc, #112]	; (8002274 <MX_GPIO_Init+0x114>)
 8002204:	f001 f826 	bl	8003254 <HAL_GPIO_WritePin>
                          |ENR_C_Pin|ENL_C_Pin|IN1_Pin|IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_UART_Pin IN3_Pin IN4_Pin */
  GPIO_InitStruct.Pin = LED_UART_Pin|IN3_Pin|IN4_Pin;
 8002208:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800220c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800220e:	2301      	movs	r3, #1
 8002210:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002216:	2300      	movs	r3, #0
 8002218:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800221a:	f107 0314 	add.w	r3, r7, #20
 800221e:	4619      	mov	r1, r3
 8002220:	4812      	ldr	r0, [pc, #72]	; (800226c <MX_GPIO_Init+0x10c>)
 8002222:	f000 fe93 	bl	8002f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8002226:	2310      	movs	r3, #16
 8002228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800222a:	2301      	movs	r3, #1
 800222c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002232:	2300      	movs	r3, #0
 8002234:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8002236:	f107 0314 	add.w	r3, r7, #20
 800223a:	4619      	mov	r1, r3
 800223c:	480c      	ldr	r0, [pc, #48]	; (8002270 <MX_GPIO_Init+0x110>)
 800223e:	f000 fe85 	bl	8002f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENR_A_Pin ENL_A_Pin ENR_B_Pin ENL_B_Pin
                           ENR_C_Pin ENL_C_Pin IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = ENR_A_Pin|ENL_A_Pin|ENR_B_Pin|ENL_B_Pin
 8002242:	f24f 4334 	movw	r3, #62516	; 0xf434
 8002246:	617b      	str	r3, [r7, #20]
                          |ENR_C_Pin|ENL_C_Pin|IN1_Pin|IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002248:	2301      	movs	r3, #1
 800224a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002250:	2300      	movs	r3, #0
 8002252:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002254:	f107 0314 	add.w	r3, r7, #20
 8002258:	4619      	mov	r1, r3
 800225a:	4806      	ldr	r0, [pc, #24]	; (8002274 <MX_GPIO_Init+0x114>)
 800225c:	f000 fe76 	bl	8002f4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002260:	bf00      	nop
 8002262:	3728      	adds	r7, #40	; 0x28
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40023800 	.word	0x40023800
 800226c:	40020800 	.word	0x40020800
 8002270:	40020000 	.word	0x40020000
 8002274:	40020400 	.word	0x40020400

08002278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800227c:	b672      	cpsid	i
}
 800227e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002280:	e7fe      	b.n	8002280 <Error_Handler+0x8>
	...

08002284 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	607b      	str	r3, [r7, #4]
 800228e:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <HAL_MspInit+0x4c>)
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	4a0f      	ldr	r2, [pc, #60]	; (80022d0 <HAL_MspInit+0x4c>)
 8002294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002298:	6453      	str	r3, [r2, #68]	; 0x44
 800229a:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <HAL_MspInit+0x4c>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a2:	607b      	str	r3, [r7, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	603b      	str	r3, [r7, #0]
 80022aa:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <HAL_MspInit+0x4c>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	4a08      	ldr	r2, [pc, #32]	; (80022d0 <HAL_MspInit+0x4c>)
 80022b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b4:	6413      	str	r3, [r2, #64]	; 0x40
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_MspInit+0x4c>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40023800 	.word	0x40023800

080022d4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b090      	sub	sp, #64	; 0x40
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
 80022ea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a83      	ldr	r2, [pc, #524]	; (8002500 <HAL_TIM_Encoder_MspInit+0x22c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d135      	bne.n	8002362 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80022fa:	4b82      	ldr	r3, [pc, #520]	; (8002504 <HAL_TIM_Encoder_MspInit+0x230>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fe:	4a81      	ldr	r2, [pc, #516]	; (8002504 <HAL_TIM_Encoder_MspInit+0x230>)
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	6453      	str	r3, [r2, #68]	; 0x44
 8002306:	4b7f      	ldr	r3, [pc, #508]	; (8002504 <HAL_TIM_Encoder_MspInit+0x230>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002310:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
 8002316:	4b7b      	ldr	r3, [pc, #492]	; (8002504 <HAL_TIM_Encoder_MspInit+0x230>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	4a7a      	ldr	r2, [pc, #488]	; (8002504 <HAL_TIM_Encoder_MspInit+0x230>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6313      	str	r3, [r2, #48]	; 0x30
 8002322:	4b78      	ldr	r3, [pc, #480]	; (8002504 <HAL_TIM_Encoder_MspInit+0x230>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800232e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002334:	2302      	movs	r3, #2
 8002336:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233c:	2300      	movs	r3, #0
 800233e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002340:	2301      	movs	r3, #1
 8002342:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002344:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002348:	4619      	mov	r1, r3
 800234a:	486f      	ldr	r0, [pc, #444]	; (8002508 <HAL_TIM_Encoder_MspInit+0x234>)
 800234c:	f000 fdfe 	bl	8002f4c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002350:	2200      	movs	r2, #0
 8002352:	2100      	movs	r1, #0
 8002354:	201b      	movs	r0, #27
 8002356:	f000 fcaa 	bl	8002cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800235a:	201b      	movs	r0, #27
 800235c:	f000 fcc3 	bl	8002ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002360:	e0ca      	b.n	80024f8 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM2)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800236a:	d152      	bne.n	8002412 <HAL_TIM_Encoder_MspInit+0x13e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800236c:	2300      	movs	r3, #0
 800236e:	623b      	str	r3, [r7, #32]
 8002370:	4b64      	ldr	r3, [pc, #400]	; (8002504 <HAL_TIM_Encoder_MspInit+0x230>)
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	4a63      	ldr	r2, [pc, #396]	; (8002504 <HAL_TIM_Encoder_MspInit+0x230>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	6413      	str	r3, [r2, #64]	; 0x40
 800237c:	4b61      	ldr	r3, [pc, #388]	; (8002504 <HAL_TIM_Encoder_MspInit+0x230>)
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	623b      	str	r3, [r7, #32]
 8002386:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002388:	2300      	movs	r3, #0
 800238a:	61fb      	str	r3, [r7, #28]
 800238c:	4b5d      	ldr	r3, [pc, #372]	; (8002504 <HAL_TIM_Encoder_MspInit+0x230>)
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	4a5c      	ldr	r2, [pc, #368]	; (8002504 <HAL_TIM_Encoder_MspInit+0x230>)
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	6313      	str	r3, [r2, #48]	; 0x30
 8002398:	4b5a      	ldr	r3, [pc, #360]	; (8002504 <HAL_TIM_Encoder_MspInit+0x230>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	61fb      	str	r3, [r7, #28]
 80023a2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a4:	2300      	movs	r3, #0
 80023a6:	61bb      	str	r3, [r7, #24]
 80023a8:	4b56      	ldr	r3, [pc, #344]	; (8002504 <HAL_TIM_Encoder_MspInit+0x230>)
 80023aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ac:	4a55      	ldr	r2, [pc, #340]	; (8002504 <HAL_TIM_Encoder_MspInit+0x230>)
 80023ae:	f043 0302 	orr.w	r3, r3, #2
 80023b2:	6313      	str	r3, [r2, #48]	; 0x30
 80023b4:	4b53      	ldr	r3, [pc, #332]	; (8002504 <HAL_TIM_Encoder_MspInit+0x230>)
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	61bb      	str	r3, [r7, #24]
 80023be:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80023c0:	2320      	movs	r3, #32
 80023c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c4:	2302      	movs	r3, #2
 80023c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023cc:	2300      	movs	r3, #0
 80023ce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023d0:	2301      	movs	r3, #1
 80023d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023d8:	4619      	mov	r1, r3
 80023da:	484b      	ldr	r0, [pc, #300]	; (8002508 <HAL_TIM_Encoder_MspInit+0x234>)
 80023dc:	f000 fdb6 	bl	8002f4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80023e0:	2308      	movs	r3, #8
 80023e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e4:	2302      	movs	r3, #2
 80023e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ec:	2300      	movs	r3, #0
 80023ee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023f0:	2301      	movs	r3, #1
 80023f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023f8:	4619      	mov	r1, r3
 80023fa:	4844      	ldr	r0, [pc, #272]	; (800250c <HAL_TIM_Encoder_MspInit+0x238>)
 80023fc:	f000 fda6 	bl	8002f4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002400:	2200      	movs	r2, #0
 8002402:	2100      	movs	r1, #0
 8002404:	201c      	movs	r0, #28
 8002406:	f000 fc52 	bl	8002cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800240a:	201c      	movs	r0, #28
 800240c:	f000 fc6b 	bl	8002ce6 <HAL_NVIC_EnableIRQ>
}
 8002410:	e072      	b.n	80024f8 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM4)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a3e      	ldr	r2, [pc, #248]	; (8002510 <HAL_TIM_Encoder_MspInit+0x23c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d134      	bne.n	8002486 <HAL_TIM_Encoder_MspInit+0x1b2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	4b38      	ldr	r3, [pc, #224]	; (8002504 <HAL_TIM_Encoder_MspInit+0x230>)
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	4a37      	ldr	r2, [pc, #220]	; (8002504 <HAL_TIM_Encoder_MspInit+0x230>)
 8002426:	f043 0304 	orr.w	r3, r3, #4
 800242a:	6413      	str	r3, [r2, #64]	; 0x40
 800242c:	4b35      	ldr	r3, [pc, #212]	; (8002504 <HAL_TIM_Encoder_MspInit+0x230>)
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002438:	2300      	movs	r3, #0
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	4b31      	ldr	r3, [pc, #196]	; (8002504 <HAL_TIM_Encoder_MspInit+0x230>)
 800243e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002440:	4a30      	ldr	r2, [pc, #192]	; (8002504 <HAL_TIM_Encoder_MspInit+0x230>)
 8002442:	f043 0302 	orr.w	r3, r3, #2
 8002446:	6313      	str	r3, [r2, #48]	; 0x30
 8002448:	4b2e      	ldr	r3, [pc, #184]	; (8002504 <HAL_TIM_Encoder_MspInit+0x230>)
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	613b      	str	r3, [r7, #16]
 8002452:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002454:	23c0      	movs	r3, #192	; 0xc0
 8002456:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002458:	2302      	movs	r3, #2
 800245a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002460:	2300      	movs	r3, #0
 8002462:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002464:	2302      	movs	r3, #2
 8002466:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002468:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800246c:	4619      	mov	r1, r3
 800246e:	4827      	ldr	r0, [pc, #156]	; (800250c <HAL_TIM_Encoder_MspInit+0x238>)
 8002470:	f000 fd6c 	bl	8002f4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002474:	2200      	movs	r2, #0
 8002476:	2100      	movs	r1, #0
 8002478:	201e      	movs	r0, #30
 800247a:	f000 fc18 	bl	8002cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800247e:	201e      	movs	r0, #30
 8002480:	f000 fc31 	bl	8002ce6 <HAL_NVIC_EnableIRQ>
}
 8002484:	e038      	b.n	80024f8 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM5)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a22      	ldr	r2, [pc, #136]	; (8002514 <HAL_TIM_Encoder_MspInit+0x240>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d133      	bne.n	80024f8 <HAL_TIM_Encoder_MspInit+0x224>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002490:	2300      	movs	r3, #0
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <HAL_TIM_Encoder_MspInit+0x230>)
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	4a1a      	ldr	r2, [pc, #104]	; (8002504 <HAL_TIM_Encoder_MspInit+0x230>)
 800249a:	f043 0308 	orr.w	r3, r3, #8
 800249e:	6413      	str	r3, [r2, #64]	; 0x40
 80024a0:	4b18      	ldr	r3, [pc, #96]	; (8002504 <HAL_TIM_Encoder_MspInit+0x230>)
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	f003 0308 	and.w	r3, r3, #8
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ac:	2300      	movs	r3, #0
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	4b14      	ldr	r3, [pc, #80]	; (8002504 <HAL_TIM_Encoder_MspInit+0x230>)
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	4a13      	ldr	r2, [pc, #76]	; (8002504 <HAL_TIM_Encoder_MspInit+0x230>)
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	6313      	str	r3, [r2, #48]	; 0x30
 80024bc:	4b11      	ldr	r3, [pc, #68]	; (8002504 <HAL_TIM_Encoder_MspInit+0x230>)
 80024be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024c8:	2303      	movs	r3, #3
 80024ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024cc:	2302      	movs	r3, #2
 80024ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d4:	2300      	movs	r3, #0
 80024d6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80024d8:	2302      	movs	r3, #2
 80024da:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024e0:	4619      	mov	r1, r3
 80024e2:	4809      	ldr	r0, [pc, #36]	; (8002508 <HAL_TIM_Encoder_MspInit+0x234>)
 80024e4:	f000 fd32 	bl	8002f4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80024e8:	2200      	movs	r2, #0
 80024ea:	2100      	movs	r1, #0
 80024ec:	2032      	movs	r0, #50	; 0x32
 80024ee:	f000 fbde 	bl	8002cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80024f2:	2032      	movs	r0, #50	; 0x32
 80024f4:	f000 fbf7 	bl	8002ce6 <HAL_NVIC_EnableIRQ>
}
 80024f8:	bf00      	nop
 80024fa:	3740      	adds	r7, #64	; 0x40
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40010000 	.word	0x40010000
 8002504:	40023800 	.word	0x40023800
 8002508:	40020000 	.word	0x40020000
 800250c:	40020400 	.word	0x40020400
 8002510:	40000800 	.word	0x40000800
 8002514:	40000c00 	.word	0x40000c00

08002518 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002518:	b480      	push	{r7}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a29      	ldr	r2, [pc, #164]	; (80025cc <HAL_TIM_Base_MspInit+0xb4>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d10e      	bne.n	8002548 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	4b28      	ldr	r3, [pc, #160]	; (80025d0 <HAL_TIM_Base_MspInit+0xb8>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	4a27      	ldr	r2, [pc, #156]	; (80025d0 <HAL_TIM_Base_MspInit+0xb8>)
 8002534:	f043 0302 	orr.w	r3, r3, #2
 8002538:	6413      	str	r3, [r2, #64]	; 0x40
 800253a:	4b25      	ldr	r3, [pc, #148]	; (80025d0 <HAL_TIM_Base_MspInit+0xb8>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002546:	e03a      	b.n	80025be <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM9)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a21      	ldr	r2, [pc, #132]	; (80025d4 <HAL_TIM_Base_MspInit+0xbc>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d10e      	bne.n	8002570 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	4b1e      	ldr	r3, [pc, #120]	; (80025d0 <HAL_TIM_Base_MspInit+0xb8>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	4a1d      	ldr	r2, [pc, #116]	; (80025d0 <HAL_TIM_Base_MspInit+0xb8>)
 800255c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002560:	6453      	str	r3, [r2, #68]	; 0x44
 8002562:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <HAL_TIM_Base_MspInit+0xb8>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	693b      	ldr	r3, [r7, #16]
}
 800256e:	e026      	b.n	80025be <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM10)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a18      	ldr	r2, [pc, #96]	; (80025d8 <HAL_TIM_Base_MspInit+0xc0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d10e      	bne.n	8002598 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <HAL_TIM_Base_MspInit+0xb8>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	4a13      	ldr	r2, [pc, #76]	; (80025d0 <HAL_TIM_Base_MspInit+0xb8>)
 8002584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002588:	6453      	str	r3, [r2, #68]	; 0x44
 800258a:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <HAL_TIM_Base_MspInit+0xb8>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
}
 8002596:	e012      	b.n	80025be <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM11)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a0f      	ldr	r2, [pc, #60]	; (80025dc <HAL_TIM_Base_MspInit+0xc4>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d10d      	bne.n	80025be <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <HAL_TIM_Base_MspInit+0xb8>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	4a09      	ldr	r2, [pc, #36]	; (80025d0 <HAL_TIM_Base_MspInit+0xb8>)
 80025ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025b0:	6453      	str	r3, [r2, #68]	; 0x44
 80025b2:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <HAL_TIM_Base_MspInit+0xb8>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
}
 80025be:	bf00      	nop
 80025c0:	371c      	adds	r7, #28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40000400 	.word	0x40000400
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40014000 	.word	0x40014000
 80025d8:	40014400 	.word	0x40014400
 80025dc:	40014800 	.word	0x40014800

080025e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08a      	sub	sp, #40	; 0x28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	60da      	str	r2, [r3, #12]
 80025f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a33      	ldr	r2, [pc, #204]	; (80026cc <HAL_TIM_MspPostInit+0xec>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d13c      	bne.n	800267c <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]
 8002606:	4b32      	ldr	r3, [pc, #200]	; (80026d0 <HAL_TIM_MspPostInit+0xf0>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	4a31      	ldr	r2, [pc, #196]	; (80026d0 <HAL_TIM_MspPostInit+0xf0>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	6313      	str	r3, [r2, #48]	; 0x30
 8002612:	4b2f      	ldr	r3, [pc, #188]	; (80026d0 <HAL_TIM_MspPostInit+0xf0>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	613b      	str	r3, [r7, #16]
 800261c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	4b2b      	ldr	r3, [pc, #172]	; (80026d0 <HAL_TIM_MspPostInit+0xf0>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	4a2a      	ldr	r2, [pc, #168]	; (80026d0 <HAL_TIM_MspPostInit+0xf0>)
 8002628:	f043 0302 	orr.w	r3, r3, #2
 800262c:	6313      	str	r3, [r2, #48]	; 0x30
 800262e:	4b28      	ldr	r3, [pc, #160]	; (80026d0 <HAL_TIM_MspPostInit+0xf0>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800263a:	23c0      	movs	r3, #192	; 0xc0
 800263c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263e:	2302      	movs	r3, #2
 8002640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002642:	2300      	movs	r3, #0
 8002644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002646:	2300      	movs	r3, #0
 8002648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800264a:	2302      	movs	r3, #2
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800264e:	f107 0314 	add.w	r3, r7, #20
 8002652:	4619      	mov	r1, r3
 8002654:	481f      	ldr	r0, [pc, #124]	; (80026d4 <HAL_TIM_MspPostInit+0xf4>)
 8002656:	f000 fc79 	bl	8002f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800265a:	2303      	movs	r3, #3
 800265c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	2302      	movs	r3, #2
 8002660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002666:	2300      	movs	r3, #0
 8002668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800266a:	2302      	movs	r3, #2
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800266e:	f107 0314 	add.w	r3, r7, #20
 8002672:	4619      	mov	r1, r3
 8002674:	4818      	ldr	r0, [pc, #96]	; (80026d8 <HAL_TIM_MspPostInit+0xf8>)
 8002676:	f000 fc69 	bl	8002f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800267a:	e022      	b.n	80026c2 <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM9)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a16      	ldr	r2, [pc, #88]	; (80026dc <HAL_TIM_MspPostInit+0xfc>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d11d      	bne.n	80026c2 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <HAL_TIM_MspPostInit+0xf0>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	4a10      	ldr	r2, [pc, #64]	; (80026d0 <HAL_TIM_MspPostInit+0xf0>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6313      	str	r3, [r2, #48]	; 0x30
 8002696:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <HAL_TIM_MspPostInit+0xf0>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026a2:	230c      	movs	r3, #12
 80026a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ae:	2300      	movs	r3, #0
 80026b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80026b2:	2303      	movs	r3, #3
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b6:	f107 0314 	add.w	r3, r7, #20
 80026ba:	4619      	mov	r1, r3
 80026bc:	4805      	ldr	r0, [pc, #20]	; (80026d4 <HAL_TIM_MspPostInit+0xf4>)
 80026be:	f000 fc45 	bl	8002f4c <HAL_GPIO_Init>
}
 80026c2:	bf00      	nop
 80026c4:	3728      	adds	r7, #40	; 0x28
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40000400 	.word	0x40000400
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40020000 	.word	0x40020000
 80026d8:	40020400 	.word	0x40020400
 80026dc:	40014000 	.word	0x40014000

080026e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08c      	sub	sp, #48	; 0x30
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e8:	f107 031c 	add.w	r3, r7, #28
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	605a      	str	r2, [r3, #4]
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	60da      	str	r2, [r3, #12]
 80026f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a37      	ldr	r2, [pc, #220]	; (80027dc <HAL_UART_MspInit+0xfc>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d12d      	bne.n	800275e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	4b36      	ldr	r3, [pc, #216]	; (80027e0 <HAL_UART_MspInit+0x100>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	4a35      	ldr	r2, [pc, #212]	; (80027e0 <HAL_UART_MspInit+0x100>)
 800270c:	f043 0310 	orr.w	r3, r3, #16
 8002710:	6453      	str	r3, [r2, #68]	; 0x44
 8002712:	4b33      	ldr	r3, [pc, #204]	; (80027e0 <HAL_UART_MspInit+0x100>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	f003 0310 	and.w	r3, r3, #16
 800271a:	61bb      	str	r3, [r7, #24]
 800271c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	4b2f      	ldr	r3, [pc, #188]	; (80027e0 <HAL_UART_MspInit+0x100>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	4a2e      	ldr	r2, [pc, #184]	; (80027e0 <HAL_UART_MspInit+0x100>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6313      	str	r3, [r2, #48]	; 0x30
 800272e:	4b2c      	ldr	r3, [pc, #176]	; (80027e0 <HAL_UART_MspInit+0x100>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800273a:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800273e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002740:	2302      	movs	r3, #2
 8002742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002748:	2303      	movs	r3, #3
 800274a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800274c:	2307      	movs	r3, #7
 800274e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002750:	f107 031c 	add.w	r3, r7, #28
 8002754:	4619      	mov	r1, r3
 8002756:	4823      	ldr	r0, [pc, #140]	; (80027e4 <HAL_UART_MspInit+0x104>)
 8002758:	f000 fbf8 	bl	8002f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800275c:	e039      	b.n	80027d2 <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART6)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a21      	ldr	r2, [pc, #132]	; (80027e8 <HAL_UART_MspInit+0x108>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d134      	bne.n	80027d2 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002768:	2300      	movs	r3, #0
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	4b1c      	ldr	r3, [pc, #112]	; (80027e0 <HAL_UART_MspInit+0x100>)
 800276e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002770:	4a1b      	ldr	r2, [pc, #108]	; (80027e0 <HAL_UART_MspInit+0x100>)
 8002772:	f043 0320 	orr.w	r3, r3, #32
 8002776:	6453      	str	r3, [r2, #68]	; 0x44
 8002778:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <HAL_UART_MspInit+0x100>)
 800277a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277c:	f003 0320 	and.w	r3, r3, #32
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002784:	2300      	movs	r3, #0
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <HAL_UART_MspInit+0x100>)
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	4a14      	ldr	r2, [pc, #80]	; (80027e0 <HAL_UART_MspInit+0x100>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6313      	str	r3, [r2, #48]	; 0x30
 8002794:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <HAL_UART_MspInit+0x100>)
 8002796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80027a0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80027a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a6:	2302      	movs	r3, #2
 80027a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ae:	2303      	movs	r3, #3
 80027b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80027b2:	2308      	movs	r3, #8
 80027b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b6:	f107 031c 	add.w	r3, r7, #28
 80027ba:	4619      	mov	r1, r3
 80027bc:	4809      	ldr	r0, [pc, #36]	; (80027e4 <HAL_UART_MspInit+0x104>)
 80027be:	f000 fbc5 	bl	8002f4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80027c2:	2200      	movs	r2, #0
 80027c4:	2100      	movs	r1, #0
 80027c6:	2047      	movs	r0, #71	; 0x47
 80027c8:	f000 fa71 	bl	8002cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80027cc:	2047      	movs	r0, #71	; 0x47
 80027ce:	f000 fa8a 	bl	8002ce6 <HAL_NVIC_EnableIRQ>
}
 80027d2:	bf00      	nop
 80027d4:	3730      	adds	r7, #48	; 0x30
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40011000 	.word	0x40011000
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40020000 	.word	0x40020000
 80027e8:	40011400 	.word	0x40011400

080027ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027f0:	e7fe      	b.n	80027f0 <NMI_Handler+0x4>

080027f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027f2:	b480      	push	{r7}
 80027f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027f6:	e7fe      	b.n	80027f6 <HardFault_Handler+0x4>

080027f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027fc:	e7fe      	b.n	80027fc <MemManage_Handler+0x4>

080027fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027fe:	b480      	push	{r7}
 8002800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002802:	e7fe      	b.n	8002802 <BusFault_Handler+0x4>

08002804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002808:	e7fe      	b.n	8002808 <UsageFault_Handler+0x4>

0800280a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800280a:	b480      	push	{r7}
 800280c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002826:	b480      	push	{r7}
 8002828:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	indexPos++;
 8002838:	4b28      	ldr	r3, [pc, #160]	; (80028dc <SysTick_Handler+0xa8>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	3301      	adds	r3, #1
 800283e:	4a27      	ldr	r2, [pc, #156]	; (80028dc <SysTick_Handler+0xa8>)
 8002840:	6013      	str	r3, [r2, #0]
		if(indexPos == 500){
 8002842:	4b26      	ldr	r3, [pc, #152]	; (80028dc <SysTick_Handler+0xa8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800284a:	d142      	bne.n	80028d2 <SysTick_Handler+0x9e>
			encoder_A.speed = ((encoder_A.position-encoder_A.old_position)*2);
 800284c:	4b24      	ldr	r3, [pc, #144]	; (80028e0 <SysTick_Handler+0xac>)
 800284e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002852:	461a      	mov	r2, r3
 8002854:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <SysTick_Handler+0xac>)
 8002856:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	4a20      	ldr	r2, [pc, #128]	; (80028e0 <SysTick_Handler+0xac>)
 8002860:	6153      	str	r3, [r2, #20]
			encoder_A.old_position = encoder_A.position;
 8002862:	4b1f      	ldr	r3, [pc, #124]	; (80028e0 <SysTick_Handler+0xac>)
 8002864:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8002868:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <SysTick_Handler+0xac>)
 800286a:	821a      	strh	r2, [r3, #16]

			encoder_B.speed = ((encoder_B.position-encoder_B.old_position)*2);
 800286c:	4b1d      	ldr	r3, [pc, #116]	; (80028e4 <SysTick_Handler+0xb0>)
 800286e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002872:	461a      	mov	r2, r3
 8002874:	4b1b      	ldr	r3, [pc, #108]	; (80028e4 <SysTick_Handler+0xb0>)
 8002876:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	4a19      	ldr	r2, [pc, #100]	; (80028e4 <SysTick_Handler+0xb0>)
 8002880:	6153      	str	r3, [r2, #20]
			encoder_B.old_position = encoder_B.position;
 8002882:	4b18      	ldr	r3, [pc, #96]	; (80028e4 <SysTick_Handler+0xb0>)
 8002884:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8002888:	4b16      	ldr	r3, [pc, #88]	; (80028e4 <SysTick_Handler+0xb0>)
 800288a:	821a      	strh	r2, [r3, #16]

			encoder_C.speed = ((encoder_C.position-encoder_C.old_position)*2);
 800288c:	4b16      	ldr	r3, [pc, #88]	; (80028e8 <SysTick_Handler+0xb4>)
 800288e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002892:	461a      	mov	r2, r3
 8002894:	4b14      	ldr	r3, [pc, #80]	; (80028e8 <SysTick_Handler+0xb4>)
 8002896:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4a12      	ldr	r2, [pc, #72]	; (80028e8 <SysTick_Handler+0xb4>)
 80028a0:	6153      	str	r3, [r2, #20]
			encoder_C.old_position = encoder_C.position;
 80028a2:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <SysTick_Handler+0xb4>)
 80028a4:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80028a8:	4b0f      	ldr	r3, [pc, #60]	; (80028e8 <SysTick_Handler+0xb4>)
 80028aa:	821a      	strh	r2, [r3, #16]

			encoder_D.speed = ((encoder_D.position-encoder_D.old_position)*2);
 80028ac:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <SysTick_Handler+0xb8>)
 80028ae:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80028b2:	461a      	mov	r2, r3
 80028b4:	4b0d      	ldr	r3, [pc, #52]	; (80028ec <SysTick_Handler+0xb8>)
 80028b6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	4a0b      	ldr	r2, [pc, #44]	; (80028ec <SysTick_Handler+0xb8>)
 80028c0:	6153      	str	r3, [r2, #20]
			encoder_D.old_position = encoder_D.position;
 80028c2:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <SysTick_Handler+0xb8>)
 80028c4:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80028c8:	4b08      	ldr	r3, [pc, #32]	; (80028ec <SysTick_Handler+0xb8>)
 80028ca:	821a      	strh	r2, [r3, #16]

			indexPos = 0;
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <SysTick_Handler+0xa8>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
		}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028d2:	f000 f8cd 	bl	8002a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20000514 	.word	0x20000514
 80028e0:	200004b4 	.word	0x200004b4
 80028e4:	200004cc 	.word	0x200004cc
 80028e8:	200004e4 	.word	0x200004e4
 80028ec:	200004fc 	.word	0x200004fc

080028f0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028f4:	4802      	ldr	r0, [pc, #8]	; (8002900 <TIM1_CC_IRQHandler+0x10>)
 80028f6:	f001 fbe5 	bl	80040c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	2000009c 	.word	0x2000009c

08002904 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002908:	4802      	ldr	r0, [pc, #8]	; (8002914 <TIM2_IRQHandler+0x10>)
 800290a:	f001 fbdb 	bl	80040c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	200000e4 	.word	0x200000e4

08002918 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800291c:	4802      	ldr	r0, [pc, #8]	; (8002928 <TIM4_IRQHandler+0x10>)
 800291e:	f001 fbd1 	bl	80040c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20000174 	.word	0x20000174

0800292c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002930:	4802      	ldr	r0, [pc, #8]	; (800293c <TIM5_IRQHandler+0x10>)
 8002932:	f001 fbc7 	bl	80040c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	200001bc 	.word	0x200001bc

08002940 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002944:	4802      	ldr	r0, [pc, #8]	; (8002950 <USART6_IRQHandler+0x10>)
 8002946:	f002 fa2f 	bl	8004da8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20000324 	.word	0x20000324

08002954 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002958:	4b06      	ldr	r3, [pc, #24]	; (8002974 <SystemInit+0x20>)
 800295a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295e:	4a05      	ldr	r2, [pc, #20]	; (8002974 <SystemInit+0x20>)
 8002960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002978:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800297c:	f7ff ffea 	bl	8002954 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002980:	480c      	ldr	r0, [pc, #48]	; (80029b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002982:	490d      	ldr	r1, [pc, #52]	; (80029b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002984:	4a0d      	ldr	r2, [pc, #52]	; (80029bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002988:	e002      	b.n	8002990 <LoopCopyDataInit>

0800298a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800298a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800298c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800298e:	3304      	adds	r3, #4

08002990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002994:	d3f9      	bcc.n	800298a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002996:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002998:	4c0a      	ldr	r4, [pc, #40]	; (80029c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800299a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800299c:	e001      	b.n	80029a2 <LoopFillZerobss>

0800299e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800299e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029a0:	3204      	adds	r2, #4

080029a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029a4:	d3fb      	bcc.n	800299e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029a6:	f003 fa95 	bl	8005ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029aa:	f7fe fef9 	bl	80017a0 <main>
  bx  lr    
 80029ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80029b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80029bc:	08005f78 	.word	0x08005f78
  ldr r2, =_sbss
 80029c0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80029c4:	2000051c 	.word	0x2000051c

080029c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029c8:	e7fe      	b.n	80029c8 <ADC_IRQHandler>
	...

080029cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029d0:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <HAL_Init+0x40>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a0d      	ldr	r2, [pc, #52]	; (8002a0c <HAL_Init+0x40>)
 80029d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_Init+0x40>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a0a      	ldr	r2, [pc, #40]	; (8002a0c <HAL_Init+0x40>)
 80029e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029e8:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <HAL_Init+0x40>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a07      	ldr	r2, [pc, #28]	; (8002a0c <HAL_Init+0x40>)
 80029ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f4:	2003      	movs	r0, #3
 80029f6:	f000 f94f 	bl	8002c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029fa:	200f      	movs	r0, #15
 80029fc:	f000 f808 	bl	8002a10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a00:	f7ff fc40 	bl	8002284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40023c00 	.word	0x40023c00

08002a10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a18:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <HAL_InitTick+0x54>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <HAL_InitTick+0x58>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	4619      	mov	r1, r3
 8002a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a26:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 f967 	bl	8002d02 <HAL_SYSTICK_Config>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e00e      	b.n	8002a5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b0f      	cmp	r3, #15
 8002a42:	d80a      	bhi.n	8002a5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a44:	2200      	movs	r2, #0
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	f04f 30ff 	mov.w	r0, #4294967295
 8002a4c:	f000 f92f 	bl	8002cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a50:	4a06      	ldr	r2, [pc, #24]	; (8002a6c <HAL_InitTick+0x5c>)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	e000      	b.n	8002a5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20000000 	.word	0x20000000
 8002a68:	20000008 	.word	0x20000008
 8002a6c:	20000004 	.word	0x20000004

08002a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a74:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <HAL_IncTick+0x20>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_IncTick+0x24>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4413      	add	r3, r2
 8002a80:	4a04      	ldr	r2, [pc, #16]	; (8002a94 <HAL_IncTick+0x24>)
 8002a82:	6013      	str	r3, [r2, #0]
}
 8002a84:	bf00      	nop
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	20000008 	.word	0x20000008
 8002a94:	20000518 	.word	0x20000518

08002a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a9c:	4b03      	ldr	r3, [pc, #12]	; (8002aac <HAL_GetTick+0x14>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	20000518 	.word	0x20000518

08002ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ab8:	f7ff ffee 	bl	8002a98 <HAL_GetTick>
 8002abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac8:	d005      	beq.n	8002ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aca:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <HAL_Delay+0x44>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ad6:	bf00      	nop
 8002ad8:	f7ff ffde 	bl	8002a98 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d8f7      	bhi.n	8002ad8 <HAL_Delay+0x28>
  {
  }
}
 8002ae8:	bf00      	nop
 8002aea:	bf00      	nop
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000008 	.word	0x20000008

08002af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b08:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <__NVIC_SetPriorityGrouping+0x44>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b14:	4013      	ands	r3, r2
 8002b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b2a:	4a04      	ldr	r2, [pc, #16]	; (8002b3c <__NVIC_SetPriorityGrouping+0x44>)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	60d3      	str	r3, [r2, #12]
}
 8002b30:	bf00      	nop
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b44:	4b04      	ldr	r3, [pc, #16]	; (8002b58 <__NVIC_GetPriorityGrouping+0x18>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	0a1b      	lsrs	r3, r3, #8
 8002b4a:	f003 0307 	and.w	r3, r3, #7
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	e000ed00 	.word	0xe000ed00

08002b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	db0b      	blt.n	8002b86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	f003 021f 	and.w	r2, r3, #31
 8002b74:	4907      	ldr	r1, [pc, #28]	; (8002b94 <__NVIC_EnableIRQ+0x38>)
 8002b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7a:	095b      	lsrs	r3, r3, #5
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	e000e100 	.word	0xe000e100

08002b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	6039      	str	r1, [r7, #0]
 8002ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	db0a      	blt.n	8002bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	490c      	ldr	r1, [pc, #48]	; (8002be4 <__NVIC_SetPriority+0x4c>)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	0112      	lsls	r2, r2, #4
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	440b      	add	r3, r1
 8002bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bc0:	e00a      	b.n	8002bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	4908      	ldr	r1, [pc, #32]	; (8002be8 <__NVIC_SetPriority+0x50>)
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	3b04      	subs	r3, #4
 8002bd0:	0112      	lsls	r2, r2, #4
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	761a      	strb	r2, [r3, #24]
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	e000e100 	.word	0xe000e100
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b089      	sub	sp, #36	; 0x24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f1c3 0307 	rsb	r3, r3, #7
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	bf28      	it	cs
 8002c0a:	2304      	movcs	r3, #4
 8002c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3304      	adds	r3, #4
 8002c12:	2b06      	cmp	r3, #6
 8002c14:	d902      	bls.n	8002c1c <NVIC_EncodePriority+0x30>
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	3b03      	subs	r3, #3
 8002c1a:	e000      	b.n	8002c1e <NVIC_EncodePriority+0x32>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c20:	f04f 32ff 	mov.w	r2, #4294967295
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43da      	mvns	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	401a      	ands	r2, r3
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c34:	f04f 31ff 	mov.w	r1, #4294967295
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3e:	43d9      	mvns	r1, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c44:	4313      	orrs	r3, r2
         );
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3724      	adds	r7, #36	; 0x24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
	...

08002c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c64:	d301      	bcc.n	8002c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c66:	2301      	movs	r3, #1
 8002c68:	e00f      	b.n	8002c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c6a:	4a0a      	ldr	r2, [pc, #40]	; (8002c94 <SysTick_Config+0x40>)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c72:	210f      	movs	r1, #15
 8002c74:	f04f 30ff 	mov.w	r0, #4294967295
 8002c78:	f7ff ff8e 	bl	8002b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <SysTick_Config+0x40>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c82:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <SysTick_Config+0x40>)
 8002c84:	2207      	movs	r2, #7
 8002c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	e000e010 	.word	0xe000e010

08002c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7ff ff29 	bl	8002af8 <__NVIC_SetPriorityGrouping>
}
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b086      	sub	sp, #24
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]
 8002cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cc0:	f7ff ff3e 	bl	8002b40 <__NVIC_GetPriorityGrouping>
 8002cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	68b9      	ldr	r1, [r7, #8]
 8002cca:	6978      	ldr	r0, [r7, #20]
 8002ccc:	f7ff ff8e 	bl	8002bec <NVIC_EncodePriority>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff ff5d 	bl	8002b98 <__NVIC_SetPriority>
}
 8002cde:	bf00      	nop
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b082      	sub	sp, #8
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	4603      	mov	r3, r0
 8002cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff ff31 	bl	8002b5c <__NVIC_EnableIRQ>
}
 8002cfa:	bf00      	nop
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b082      	sub	sp, #8
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7ff ffa2 	bl	8002c54 <SysTick_Config>
 8002d10:	4603      	mov	r3, r0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b086      	sub	sp, #24
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	60f8      	str	r0, [r7, #12]
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	607a      	str	r2, [r7, #4]
 8002d26:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d30:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_DMA_Start_IT+0x26>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e040      	b.n	8002dc2 <HAL_DMA_Start_IT+0xa8>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d12f      	bne.n	8002db4 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	68b9      	ldr	r1, [r7, #8]
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 f8c0 	bl	8002eee <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d72:	223f      	movs	r2, #63	; 0x3f
 8002d74:	409a      	lsls	r2, r3
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f042 0216 	orr.w	r2, r2, #22
 8002d88:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d007      	beq.n	8002da2 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f042 0208 	orr.w	r2, r2, #8
 8002da0:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 0201 	orr.w	r2, r2, #1
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	e005      	b.n	8002dc0 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b084      	sub	sp, #16
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002dd8:	f7ff fe5e 	bl	8002a98 <HAL_GetTick>
 8002ddc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d008      	beq.n	8002dfc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2280      	movs	r2, #128	; 0x80
 8002dee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e052      	b.n	8002ea2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0216 	bic.w	r2, r2, #22
 8002e0a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695a      	ldr	r2, [r3, #20]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e1a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d103      	bne.n	8002e2c <HAL_DMA_Abort+0x62>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d007      	beq.n	8002e3c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0208 	bic.w	r2, r2, #8
 8002e3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0201 	bic.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e4c:	e013      	b.n	8002e76 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e4e:	f7ff fe23 	bl	8002a98 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b05      	cmp	r3, #5
 8002e5a:	d90c      	bls.n	8002e76 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2203      	movs	r2, #3
 8002e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e015      	b.n	8002ea2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1e4      	bne.n	8002e4e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e88:	223f      	movs	r2, #63	; 0x3f
 8002e8a:	409a      	lsls	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d004      	beq.n	8002ec8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2280      	movs	r2, #128	; 0x80
 8002ec2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e00c      	b.n	8002ee2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2205      	movs	r2, #5
 8002ecc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0201 	bic.w	r2, r2, #1
 8002ede:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b085      	sub	sp, #20
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	60f8      	str	r0, [r7, #12]
 8002ef6:	60b9      	str	r1, [r7, #8]
 8002ef8:	607a      	str	r2, [r7, #4]
 8002efa:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f0a:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2b40      	cmp	r3, #64	; 0x40
 8002f1a:	d108      	bne.n	8002f2e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f2c:	e007      	b.n	8002f3e <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	60da      	str	r2, [r3, #12]
}
 8002f3e:	bf00      	nop
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b089      	sub	sp, #36	; 0x24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f62:	2300      	movs	r3, #0
 8002f64:	61fb      	str	r3, [r7, #28]
 8002f66:	e159      	b.n	800321c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f68:	2201      	movs	r2, #1
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	f040 8148 	bne.w	8003216 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d005      	beq.n	8002f9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d130      	bne.n	8003000 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	2203      	movs	r2, #3
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	091b      	lsrs	r3, r3, #4
 8002fea:	f003 0201 	and.w	r2, r3, #1
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 0303 	and.w	r3, r3, #3
 8003008:	2b03      	cmp	r3, #3
 800300a:	d017      	beq.n	800303c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	2203      	movs	r2, #3
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d123      	bne.n	8003090 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	08da      	lsrs	r2, r3, #3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3208      	adds	r2, #8
 8003050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003054:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	220f      	movs	r2, #15
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4013      	ands	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4313      	orrs	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	08da      	lsrs	r2, r3, #3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3208      	adds	r2, #8
 800308a:	69b9      	ldr	r1, [r7, #24]
 800308c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	2203      	movs	r2, #3
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 0203 	and.w	r2, r3, #3
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 80a2 	beq.w	8003216 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	4b57      	ldr	r3, [pc, #348]	; (8003234 <HAL_GPIO_Init+0x2e8>)
 80030d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030da:	4a56      	ldr	r2, [pc, #344]	; (8003234 <HAL_GPIO_Init+0x2e8>)
 80030dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030e0:	6453      	str	r3, [r2, #68]	; 0x44
 80030e2:	4b54      	ldr	r3, [pc, #336]	; (8003234 <HAL_GPIO_Init+0x2e8>)
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030ee:	4a52      	ldr	r2, [pc, #328]	; (8003238 <HAL_GPIO_Init+0x2ec>)
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	089b      	lsrs	r3, r3, #2
 80030f4:	3302      	adds	r3, #2
 80030f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	220f      	movs	r2, #15
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	43db      	mvns	r3, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4013      	ands	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a49      	ldr	r2, [pc, #292]	; (800323c <HAL_GPIO_Init+0x2f0>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d019      	beq.n	800314e <HAL_GPIO_Init+0x202>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a48      	ldr	r2, [pc, #288]	; (8003240 <HAL_GPIO_Init+0x2f4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d013      	beq.n	800314a <HAL_GPIO_Init+0x1fe>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a47      	ldr	r2, [pc, #284]	; (8003244 <HAL_GPIO_Init+0x2f8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00d      	beq.n	8003146 <HAL_GPIO_Init+0x1fa>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a46      	ldr	r2, [pc, #280]	; (8003248 <HAL_GPIO_Init+0x2fc>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d007      	beq.n	8003142 <HAL_GPIO_Init+0x1f6>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a45      	ldr	r2, [pc, #276]	; (800324c <HAL_GPIO_Init+0x300>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d101      	bne.n	800313e <HAL_GPIO_Init+0x1f2>
 800313a:	2304      	movs	r3, #4
 800313c:	e008      	b.n	8003150 <HAL_GPIO_Init+0x204>
 800313e:	2307      	movs	r3, #7
 8003140:	e006      	b.n	8003150 <HAL_GPIO_Init+0x204>
 8003142:	2303      	movs	r3, #3
 8003144:	e004      	b.n	8003150 <HAL_GPIO_Init+0x204>
 8003146:	2302      	movs	r3, #2
 8003148:	e002      	b.n	8003150 <HAL_GPIO_Init+0x204>
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <HAL_GPIO_Init+0x204>
 800314e:	2300      	movs	r3, #0
 8003150:	69fa      	ldr	r2, [r7, #28]
 8003152:	f002 0203 	and.w	r2, r2, #3
 8003156:	0092      	lsls	r2, r2, #2
 8003158:	4093      	lsls	r3, r2
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4313      	orrs	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003160:	4935      	ldr	r1, [pc, #212]	; (8003238 <HAL_GPIO_Init+0x2ec>)
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	089b      	lsrs	r3, r3, #2
 8003166:	3302      	adds	r3, #2
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800316e:	4b38      	ldr	r3, [pc, #224]	; (8003250 <HAL_GPIO_Init+0x304>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	43db      	mvns	r3, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4013      	ands	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	4313      	orrs	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003192:	4a2f      	ldr	r2, [pc, #188]	; (8003250 <HAL_GPIO_Init+0x304>)
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003198:	4b2d      	ldr	r3, [pc, #180]	; (8003250 <HAL_GPIO_Init+0x304>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	43db      	mvns	r3, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031bc:	4a24      	ldr	r2, [pc, #144]	; (8003250 <HAL_GPIO_Init+0x304>)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031c2:	4b23      	ldr	r3, [pc, #140]	; (8003250 <HAL_GPIO_Init+0x304>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	43db      	mvns	r3, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4013      	ands	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031e6:	4a1a      	ldr	r2, [pc, #104]	; (8003250 <HAL_GPIO_Init+0x304>)
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031ec:	4b18      	ldr	r3, [pc, #96]	; (8003250 <HAL_GPIO_Init+0x304>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	43db      	mvns	r3, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4013      	ands	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003210:	4a0f      	ldr	r2, [pc, #60]	; (8003250 <HAL_GPIO_Init+0x304>)
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	3301      	adds	r3, #1
 800321a:	61fb      	str	r3, [r7, #28]
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	2b0f      	cmp	r3, #15
 8003220:	f67f aea2 	bls.w	8002f68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003224:	bf00      	nop
 8003226:	bf00      	nop
 8003228:	3724      	adds	r7, #36	; 0x24
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	40023800 	.word	0x40023800
 8003238:	40013800 	.word	0x40013800
 800323c:	40020000 	.word	0x40020000
 8003240:	40020400 	.word	0x40020400
 8003244:	40020800 	.word	0x40020800
 8003248:	40020c00 	.word	0x40020c00
 800324c:	40021000 	.word	0x40021000
 8003250:	40013c00 	.word	0x40013c00

08003254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	807b      	strh	r3, [r7, #2]
 8003260:	4613      	mov	r3, r2
 8003262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003264:	787b      	ldrb	r3, [r7, #1]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800326a:	887a      	ldrh	r2, [r7, #2]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003270:	e003      	b.n	800327a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003272:	887b      	ldrh	r3, [r7, #2]
 8003274:	041a      	lsls	r2, r3, #16
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	619a      	str	r2, [r3, #24]
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003286:	b480      	push	{r7}
 8003288:	b085      	sub	sp, #20
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	460b      	mov	r3, r1
 8003290:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003298:	887a      	ldrh	r2, [r7, #2]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4013      	ands	r3, r2
 800329e:	041a      	lsls	r2, r3, #16
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	43d9      	mvns	r1, r3
 80032a4:	887b      	ldrh	r3, [r7, #2]
 80032a6:	400b      	ands	r3, r1
 80032a8:	431a      	orrs	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	619a      	str	r2, [r3, #24]
}
 80032ae:	bf00      	nop
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e267      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d075      	beq.n	80033c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032da:	4b88      	ldr	r3, [pc, #544]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 030c 	and.w	r3, r3, #12
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d00c      	beq.n	8003300 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032e6:	4b85      	ldr	r3, [pc, #532]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d112      	bne.n	8003318 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032f2:	4b82      	ldr	r3, [pc, #520]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032fe:	d10b      	bne.n	8003318 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003300:	4b7e      	ldr	r3, [pc, #504]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d05b      	beq.n	80033c4 <HAL_RCC_OscConfig+0x108>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d157      	bne.n	80033c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e242      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003320:	d106      	bne.n	8003330 <HAL_RCC_OscConfig+0x74>
 8003322:	4b76      	ldr	r3, [pc, #472]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a75      	ldr	r2, [pc, #468]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	e01d      	b.n	800336c <HAL_RCC_OscConfig+0xb0>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003338:	d10c      	bne.n	8003354 <HAL_RCC_OscConfig+0x98>
 800333a:	4b70      	ldr	r3, [pc, #448]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a6f      	ldr	r2, [pc, #444]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	4b6d      	ldr	r3, [pc, #436]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a6c      	ldr	r2, [pc, #432]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 800334c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	e00b      	b.n	800336c <HAL_RCC_OscConfig+0xb0>
 8003354:	4b69      	ldr	r3, [pc, #420]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a68      	ldr	r2, [pc, #416]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 800335a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	4b66      	ldr	r3, [pc, #408]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a65      	ldr	r2, [pc, #404]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800336a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d013      	beq.n	800339c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7ff fb90 	bl	8002a98 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800337c:	f7ff fb8c 	bl	8002a98 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b64      	cmp	r3, #100	; 0x64
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e207      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338e:	4b5b      	ldr	r3, [pc, #364]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0f0      	beq.n	800337c <HAL_RCC_OscConfig+0xc0>
 800339a:	e014      	b.n	80033c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339c:	f7ff fb7c 	bl	8002a98 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033a4:	f7ff fb78 	bl	8002a98 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	; 0x64
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e1f3      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033b6:	4b51      	ldr	r3, [pc, #324]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f0      	bne.n	80033a4 <HAL_RCC_OscConfig+0xe8>
 80033c2:	e000      	b.n	80033c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d063      	beq.n	800349a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033d2:	4b4a      	ldr	r3, [pc, #296]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00b      	beq.n	80033f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033de:	4b47      	ldr	r3, [pc, #284]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d11c      	bne.n	8003424 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ea:	4b44      	ldr	r3, [pc, #272]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d116      	bne.n	8003424 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033f6:	4b41      	ldr	r3, [pc, #260]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d005      	beq.n	800340e <HAL_RCC_OscConfig+0x152>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d001      	beq.n	800340e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e1c7      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800340e:	4b3b      	ldr	r3, [pc, #236]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	4937      	ldr	r1, [pc, #220]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 800341e:	4313      	orrs	r3, r2
 8003420:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003422:	e03a      	b.n	800349a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d020      	beq.n	800346e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800342c:	4b34      	ldr	r3, [pc, #208]	; (8003500 <HAL_RCC_OscConfig+0x244>)
 800342e:	2201      	movs	r2, #1
 8003430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003432:	f7ff fb31 	bl	8002a98 <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003438:	e008      	b.n	800344c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800343a:	f7ff fb2d 	bl	8002a98 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e1a8      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800344c:	4b2b      	ldr	r3, [pc, #172]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0f0      	beq.n	800343a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003458:	4b28      	ldr	r3, [pc, #160]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	4925      	ldr	r1, [pc, #148]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003468:	4313      	orrs	r3, r2
 800346a:	600b      	str	r3, [r1, #0]
 800346c:	e015      	b.n	800349a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800346e:	4b24      	ldr	r3, [pc, #144]	; (8003500 <HAL_RCC_OscConfig+0x244>)
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7ff fb10 	bl	8002a98 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800347c:	f7ff fb0c 	bl	8002a98 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e187      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800348e:	4b1b      	ldr	r3, [pc, #108]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f0      	bne.n	800347c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d036      	beq.n	8003514 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d016      	beq.n	80034dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ae:	4b15      	ldr	r3, [pc, #84]	; (8003504 <HAL_RCC_OscConfig+0x248>)
 80034b0:	2201      	movs	r2, #1
 80034b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b4:	f7ff faf0 	bl	8002a98 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034bc:	f7ff faec 	bl	8002a98 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e167      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ce:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80034d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0f0      	beq.n	80034bc <HAL_RCC_OscConfig+0x200>
 80034da:	e01b      	b.n	8003514 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034dc:	4b09      	ldr	r3, [pc, #36]	; (8003504 <HAL_RCC_OscConfig+0x248>)
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e2:	f7ff fad9 	bl	8002a98 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e8:	e00e      	b.n	8003508 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ea:	f7ff fad5 	bl	8002a98 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d907      	bls.n	8003508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e150      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
 80034fc:	40023800 	.word	0x40023800
 8003500:	42470000 	.word	0x42470000
 8003504:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003508:	4b88      	ldr	r3, [pc, #544]	; (800372c <HAL_RCC_OscConfig+0x470>)
 800350a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1ea      	bne.n	80034ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 8097 	beq.w	8003650 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003522:	2300      	movs	r3, #0
 8003524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003526:	4b81      	ldr	r3, [pc, #516]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10f      	bne.n	8003552 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	60bb      	str	r3, [r7, #8]
 8003536:	4b7d      	ldr	r3, [pc, #500]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	4a7c      	ldr	r2, [pc, #496]	; (800372c <HAL_RCC_OscConfig+0x470>)
 800353c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003540:	6413      	str	r3, [r2, #64]	; 0x40
 8003542:	4b7a      	ldr	r3, [pc, #488]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800354e:	2301      	movs	r3, #1
 8003550:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003552:	4b77      	ldr	r3, [pc, #476]	; (8003730 <HAL_RCC_OscConfig+0x474>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355a:	2b00      	cmp	r3, #0
 800355c:	d118      	bne.n	8003590 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800355e:	4b74      	ldr	r3, [pc, #464]	; (8003730 <HAL_RCC_OscConfig+0x474>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a73      	ldr	r2, [pc, #460]	; (8003730 <HAL_RCC_OscConfig+0x474>)
 8003564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800356a:	f7ff fa95 	bl	8002a98 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003572:	f7ff fa91 	bl	8002a98 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e10c      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003584:	4b6a      	ldr	r3, [pc, #424]	; (8003730 <HAL_RCC_OscConfig+0x474>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0f0      	beq.n	8003572 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d106      	bne.n	80035a6 <HAL_RCC_OscConfig+0x2ea>
 8003598:	4b64      	ldr	r3, [pc, #400]	; (800372c <HAL_RCC_OscConfig+0x470>)
 800359a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359c:	4a63      	ldr	r2, [pc, #396]	; (800372c <HAL_RCC_OscConfig+0x470>)
 800359e:	f043 0301 	orr.w	r3, r3, #1
 80035a2:	6713      	str	r3, [r2, #112]	; 0x70
 80035a4:	e01c      	b.n	80035e0 <HAL_RCC_OscConfig+0x324>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b05      	cmp	r3, #5
 80035ac:	d10c      	bne.n	80035c8 <HAL_RCC_OscConfig+0x30c>
 80035ae:	4b5f      	ldr	r3, [pc, #380]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b2:	4a5e      	ldr	r2, [pc, #376]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035b4:	f043 0304 	orr.w	r3, r3, #4
 80035b8:	6713      	str	r3, [r2, #112]	; 0x70
 80035ba:	4b5c      	ldr	r3, [pc, #368]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035be:	4a5b      	ldr	r2, [pc, #364]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	6713      	str	r3, [r2, #112]	; 0x70
 80035c6:	e00b      	b.n	80035e0 <HAL_RCC_OscConfig+0x324>
 80035c8:	4b58      	ldr	r3, [pc, #352]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035cc:	4a57      	ldr	r2, [pc, #348]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035ce:	f023 0301 	bic.w	r3, r3, #1
 80035d2:	6713      	str	r3, [r2, #112]	; 0x70
 80035d4:	4b55      	ldr	r3, [pc, #340]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d8:	4a54      	ldr	r2, [pc, #336]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035da:	f023 0304 	bic.w	r3, r3, #4
 80035de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d015      	beq.n	8003614 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e8:	f7ff fa56 	bl	8002a98 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ee:	e00a      	b.n	8003606 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f0:	f7ff fa52 	bl	8002a98 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fe:	4293      	cmp	r3, r2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e0cb      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003606:	4b49      	ldr	r3, [pc, #292]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0ee      	beq.n	80035f0 <HAL_RCC_OscConfig+0x334>
 8003612:	e014      	b.n	800363e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003614:	f7ff fa40 	bl	8002a98 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800361a:	e00a      	b.n	8003632 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800361c:	f7ff fa3c 	bl	8002a98 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	f241 3288 	movw	r2, #5000	; 0x1388
 800362a:	4293      	cmp	r3, r2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e0b5      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003632:	4b3e      	ldr	r3, [pc, #248]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1ee      	bne.n	800361c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800363e:	7dfb      	ldrb	r3, [r7, #23]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d105      	bne.n	8003650 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003644:	4b39      	ldr	r3, [pc, #228]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	4a38      	ldr	r2, [pc, #224]	; (800372c <HAL_RCC_OscConfig+0x470>)
 800364a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800364e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 80a1 	beq.w	800379c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800365a:	4b34      	ldr	r3, [pc, #208]	; (800372c <HAL_RCC_OscConfig+0x470>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	2b08      	cmp	r3, #8
 8003664:	d05c      	beq.n	8003720 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d141      	bne.n	80036f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366e:	4b31      	ldr	r3, [pc, #196]	; (8003734 <HAL_RCC_OscConfig+0x478>)
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003674:	f7ff fa10 	bl	8002a98 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800367c:	f7ff fa0c 	bl	8002a98 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e087      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368e:	4b27      	ldr	r3, [pc, #156]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1f0      	bne.n	800367c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69da      	ldr	r2, [r3, #28]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	019b      	lsls	r3, r3, #6
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b0:	085b      	lsrs	r3, r3, #1
 80036b2:	3b01      	subs	r3, #1
 80036b4:	041b      	lsls	r3, r3, #16
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	061b      	lsls	r3, r3, #24
 80036be:	491b      	ldr	r1, [pc, #108]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036c4:	4b1b      	ldr	r3, [pc, #108]	; (8003734 <HAL_RCC_OscConfig+0x478>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ca:	f7ff f9e5 	bl	8002a98 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d2:	f7ff f9e1 	bl	8002a98 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e05c      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e4:	4b11      	ldr	r3, [pc, #68]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0f0      	beq.n	80036d2 <HAL_RCC_OscConfig+0x416>
 80036f0:	e054      	b.n	800379c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f2:	4b10      	ldr	r3, [pc, #64]	; (8003734 <HAL_RCC_OscConfig+0x478>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f8:	f7ff f9ce 	bl	8002a98 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003700:	f7ff f9ca 	bl	8002a98 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e045      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003712:	4b06      	ldr	r3, [pc, #24]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f0      	bne.n	8003700 <HAL_RCC_OscConfig+0x444>
 800371e:	e03d      	b.n	800379c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d107      	bne.n	8003738 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e038      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
 800372c:	40023800 	.word	0x40023800
 8003730:	40007000 	.word	0x40007000
 8003734:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003738:	4b1b      	ldr	r3, [pc, #108]	; (80037a8 <HAL_RCC_OscConfig+0x4ec>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d028      	beq.n	8003798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003750:	429a      	cmp	r2, r3
 8003752:	d121      	bne.n	8003798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375e:	429a      	cmp	r2, r3
 8003760:	d11a      	bne.n	8003798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003768:	4013      	ands	r3, r2
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800376e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003770:	4293      	cmp	r3, r2
 8003772:	d111      	bne.n	8003798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377e:	085b      	lsrs	r3, r3, #1
 8003780:	3b01      	subs	r3, #1
 8003782:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003784:	429a      	cmp	r2, r3
 8003786:	d107      	bne.n	8003798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003792:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003794:	429a      	cmp	r2, r3
 8003796:	d001      	beq.n	800379c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40023800 	.word	0x40023800

080037ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0cc      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037c0:	4b68      	ldr	r3, [pc, #416]	; (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d90c      	bls.n	80037e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ce:	4b65      	ldr	r3, [pc, #404]	; (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d6:	4b63      	ldr	r3, [pc, #396]	; (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d001      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0b8      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d020      	beq.n	8003836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003800:	4b59      	ldr	r3, [pc, #356]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	4a58      	ldr	r2, [pc, #352]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800380a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003818:	4b53      	ldr	r3, [pc, #332]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	4a52      	ldr	r2, [pc, #328]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003824:	4b50      	ldr	r3, [pc, #320]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	494d      	ldr	r1, [pc, #308]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	4313      	orrs	r3, r2
 8003834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d044      	beq.n	80038cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d107      	bne.n	800385a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384a:	4b47      	ldr	r3, [pc, #284]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d119      	bne.n	800388a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e07f      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b02      	cmp	r3, #2
 8003860:	d003      	beq.n	800386a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003866:	2b03      	cmp	r3, #3
 8003868:	d107      	bne.n	800387a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386a:	4b3f      	ldr	r3, [pc, #252]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d109      	bne.n	800388a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e06f      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800387a:	4b3b      	ldr	r3, [pc, #236]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e067      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800388a:	4b37      	ldr	r3, [pc, #220]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f023 0203 	bic.w	r2, r3, #3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	4934      	ldr	r1, [pc, #208]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	4313      	orrs	r3, r2
 800389a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800389c:	f7ff f8fc 	bl	8002a98 <HAL_GetTick>
 80038a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a2:	e00a      	b.n	80038ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a4:	f7ff f8f8 	bl	8002a98 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e04f      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ba:	4b2b      	ldr	r3, [pc, #172]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 020c 	and.w	r2, r3, #12
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d1eb      	bne.n	80038a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038cc:	4b25      	ldr	r3, [pc, #148]	; (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d20c      	bcs.n	80038f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038da:	4b22      	ldr	r3, [pc, #136]	; (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e2:	4b20      	ldr	r3, [pc, #128]	; (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d001      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e032      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d008      	beq.n	8003912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003900:	4b19      	ldr	r3, [pc, #100]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	4916      	ldr	r1, [pc, #88]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	4313      	orrs	r3, r2
 8003910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d009      	beq.n	8003932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800391e:	4b12      	ldr	r3, [pc, #72]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	490e      	ldr	r1, [pc, #56]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	4313      	orrs	r3, r2
 8003930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003932:	f000 f821 	bl	8003978 <HAL_RCC_GetSysClockFreq>
 8003936:	4602      	mov	r2, r0
 8003938:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	091b      	lsrs	r3, r3, #4
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	490a      	ldr	r1, [pc, #40]	; (800396c <HAL_RCC_ClockConfig+0x1c0>)
 8003944:	5ccb      	ldrb	r3, [r1, r3]
 8003946:	fa22 f303 	lsr.w	r3, r2, r3
 800394a:	4a09      	ldr	r2, [pc, #36]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 800394c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800394e:	4b09      	ldr	r3, [pc, #36]	; (8003974 <HAL_RCC_ClockConfig+0x1c8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff f85c 	bl	8002a10 <HAL_InitTick>

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40023c00 	.word	0x40023c00
 8003968:	40023800 	.word	0x40023800
 800396c:	08005f50 	.word	0x08005f50
 8003970:	20000000 	.word	0x20000000
 8003974:	20000004 	.word	0x20000004

08003978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800397c:	b090      	sub	sp, #64	; 0x40
 800397e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003980:	2300      	movs	r3, #0
 8003982:	637b      	str	r3, [r7, #52]	; 0x34
 8003984:	2300      	movs	r3, #0
 8003986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003988:	2300      	movs	r3, #0
 800398a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003990:	4b59      	ldr	r3, [pc, #356]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 030c 	and.w	r3, r3, #12
 8003998:	2b08      	cmp	r3, #8
 800399a:	d00d      	beq.n	80039b8 <HAL_RCC_GetSysClockFreq+0x40>
 800399c:	2b08      	cmp	r3, #8
 800399e:	f200 80a1 	bhi.w	8003ae4 <HAL_RCC_GetSysClockFreq+0x16c>
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <HAL_RCC_GetSysClockFreq+0x34>
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d003      	beq.n	80039b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80039aa:	e09b      	b.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039ac:	4b53      	ldr	r3, [pc, #332]	; (8003afc <HAL_RCC_GetSysClockFreq+0x184>)
 80039ae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80039b0:	e09b      	b.n	8003aea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039b2:	4b53      	ldr	r3, [pc, #332]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x188>)
 80039b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039b6:	e098      	b.n	8003aea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039b8:	4b4f      	ldr	r3, [pc, #316]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x180>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039c2:	4b4d      	ldr	r3, [pc, #308]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x180>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d028      	beq.n	8003a20 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ce:	4b4a      	ldr	r3, [pc, #296]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x180>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	099b      	lsrs	r3, r3, #6
 80039d4:	2200      	movs	r2, #0
 80039d6:	623b      	str	r3, [r7, #32]
 80039d8:	627a      	str	r2, [r7, #36]	; 0x24
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039e0:	2100      	movs	r1, #0
 80039e2:	4b47      	ldr	r3, [pc, #284]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x188>)
 80039e4:	fb03 f201 	mul.w	r2, r3, r1
 80039e8:	2300      	movs	r3, #0
 80039ea:	fb00 f303 	mul.w	r3, r0, r3
 80039ee:	4413      	add	r3, r2
 80039f0:	4a43      	ldr	r2, [pc, #268]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x188>)
 80039f2:	fba0 1202 	umull	r1, r2, r0, r2
 80039f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039f8:	460a      	mov	r2, r1
 80039fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80039fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039fe:	4413      	add	r3, r2
 8003a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a04:	2200      	movs	r2, #0
 8003a06:	61bb      	str	r3, [r7, #24]
 8003a08:	61fa      	str	r2, [r7, #28]
 8003a0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003a12:	f7fd f85f 	bl	8000ad4 <__aeabi_uldivmod>
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a1e:	e053      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a20:	4b35      	ldr	r3, [pc, #212]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	099b      	lsrs	r3, r3, #6
 8003a26:	2200      	movs	r2, #0
 8003a28:	613b      	str	r3, [r7, #16]
 8003a2a:	617a      	str	r2, [r7, #20]
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a32:	f04f 0b00 	mov.w	fp, #0
 8003a36:	4652      	mov	r2, sl
 8003a38:	465b      	mov	r3, fp
 8003a3a:	f04f 0000 	mov.w	r0, #0
 8003a3e:	f04f 0100 	mov.w	r1, #0
 8003a42:	0159      	lsls	r1, r3, #5
 8003a44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a48:	0150      	lsls	r0, r2, #5
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	ebb2 080a 	subs.w	r8, r2, sl
 8003a52:	eb63 090b 	sbc.w	r9, r3, fp
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a62:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a66:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a6a:	ebb2 0408 	subs.w	r4, r2, r8
 8003a6e:	eb63 0509 	sbc.w	r5, r3, r9
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	00eb      	lsls	r3, r5, #3
 8003a7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a80:	00e2      	lsls	r2, r4, #3
 8003a82:	4614      	mov	r4, r2
 8003a84:	461d      	mov	r5, r3
 8003a86:	eb14 030a 	adds.w	r3, r4, sl
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	eb45 030b 	adc.w	r3, r5, fp
 8003a90:	607b      	str	r3, [r7, #4]
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a9e:	4629      	mov	r1, r5
 8003aa0:	028b      	lsls	r3, r1, #10
 8003aa2:	4621      	mov	r1, r4
 8003aa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003aa8:	4621      	mov	r1, r4
 8003aaa:	028a      	lsls	r2, r1, #10
 8003aac:	4610      	mov	r0, r2
 8003aae:	4619      	mov	r1, r3
 8003ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	60fa      	str	r2, [r7, #12]
 8003ab8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003abc:	f7fd f80a 	bl	8000ad4 <__aeabi_uldivmod>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	0c1b      	lsrs	r3, r3, #16
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003ad8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ae2:	e002      	b.n	8003aea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ae4:	4b05      	ldr	r3, [pc, #20]	; (8003afc <HAL_RCC_GetSysClockFreq+0x184>)
 8003ae6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3740      	adds	r7, #64	; 0x40
 8003af0:	46bd      	mov	sp, r7
 8003af2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003af6:	bf00      	nop
 8003af8:	40023800 	.word	0x40023800
 8003afc:	00f42400 	.word	0x00f42400
 8003b00:	017d7840 	.word	0x017d7840

08003b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b08:	4b03      	ldr	r3, [pc, #12]	; (8003b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	20000000 	.word	0x20000000

08003b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b20:	f7ff fff0 	bl	8003b04 <HAL_RCC_GetHCLKFreq>
 8003b24:	4602      	mov	r2, r0
 8003b26:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	0a9b      	lsrs	r3, r3, #10
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	4903      	ldr	r1, [pc, #12]	; (8003b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b32:	5ccb      	ldrb	r3, [r1, r3]
 8003b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	08005f60 	.word	0x08005f60

08003b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b48:	f7ff ffdc 	bl	8003b04 <HAL_RCC_GetHCLKFreq>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	0b5b      	lsrs	r3, r3, #13
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	4903      	ldr	r1, [pc, #12]	; (8003b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b5a:	5ccb      	ldrb	r3, [r1, r3]
 8003b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40023800 	.word	0x40023800
 8003b68:	08005f60 	.word	0x08005f60

08003b6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e041      	b.n	8003c02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d106      	bne.n	8003b98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fe fcc0 	bl	8002518 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	4619      	mov	r1, r3
 8003baa:	4610      	mov	r0, r2
 8003bac:	f000 fd2c 	bl	8004608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b082      	sub	sp, #8
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e041      	b.n	8003ca0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d106      	bne.n	8003c36 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f839 	bl	8003ca8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2202      	movs	r2, #2
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	3304      	adds	r3, #4
 8003c46:	4619      	mov	r1, r3
 8003c48:	4610      	mov	r0, r2
 8003c4a:	f000 fcdd 	bl	8004608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d109      	bne.n	8003ce0 <HAL_TIM_PWM_Start+0x24>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	bf14      	ite	ne
 8003cd8:	2301      	movne	r3, #1
 8003cda:	2300      	moveq	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	e022      	b.n	8003d26 <HAL_TIM_PWM_Start+0x6a>
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d109      	bne.n	8003cfa <HAL_TIM_PWM_Start+0x3e>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	bf14      	ite	ne
 8003cf2:	2301      	movne	r3, #1
 8003cf4:	2300      	moveq	r3, #0
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	e015      	b.n	8003d26 <HAL_TIM_PWM_Start+0x6a>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d109      	bne.n	8003d14 <HAL_TIM_PWM_Start+0x58>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	bf14      	ite	ne
 8003d0c:	2301      	movne	r3, #1
 8003d0e:	2300      	moveq	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	e008      	b.n	8003d26 <HAL_TIM_PWM_Start+0x6a>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	bf14      	ite	ne
 8003d20:	2301      	movne	r3, #1
 8003d22:	2300      	moveq	r3, #0
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e068      	b.n	8003e00 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d104      	bne.n	8003d3e <HAL_TIM_PWM_Start+0x82>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d3c:	e013      	b.n	8003d66 <HAL_TIM_PWM_Start+0xaa>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d104      	bne.n	8003d4e <HAL_TIM_PWM_Start+0x92>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d4c:	e00b      	b.n	8003d66 <HAL_TIM_PWM_Start+0xaa>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d104      	bne.n	8003d5e <HAL_TIM_PWM_Start+0xa2>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d5c:	e003      	b.n	8003d66 <HAL_TIM_PWM_Start+0xaa>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2202      	movs	r2, #2
 8003d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	6839      	ldr	r1, [r7, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fefc 	bl	8004b6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a23      	ldr	r2, [pc, #140]	; (8003e08 <HAL_TIM_PWM_Start+0x14c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d107      	bne.n	8003d8e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a1d      	ldr	r2, [pc, #116]	; (8003e08 <HAL_TIM_PWM_Start+0x14c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d018      	beq.n	8003dca <HAL_TIM_PWM_Start+0x10e>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da0:	d013      	beq.n	8003dca <HAL_TIM_PWM_Start+0x10e>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a19      	ldr	r2, [pc, #100]	; (8003e0c <HAL_TIM_PWM_Start+0x150>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d00e      	beq.n	8003dca <HAL_TIM_PWM_Start+0x10e>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a17      	ldr	r2, [pc, #92]	; (8003e10 <HAL_TIM_PWM_Start+0x154>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d009      	beq.n	8003dca <HAL_TIM_PWM_Start+0x10e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a16      	ldr	r2, [pc, #88]	; (8003e14 <HAL_TIM_PWM_Start+0x158>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d004      	beq.n	8003dca <HAL_TIM_PWM_Start+0x10e>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a14      	ldr	r2, [pc, #80]	; (8003e18 <HAL_TIM_PWM_Start+0x15c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d111      	bne.n	8003dee <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2b06      	cmp	r3, #6
 8003dda:	d010      	beq.n	8003dfe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dec:	e007      	b.n	8003dfe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f042 0201 	orr.w	r2, r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40010000 	.word	0x40010000
 8003e0c:	40000400 	.word	0x40000400
 8003e10:	40000800 	.word	0x40000800
 8003e14:	40000c00 	.word	0x40000c00
 8003e18:	40014000 	.word	0x40014000

08003e1c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e097      	b.n	8003f60 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d106      	bne.n	8003e4a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7fe fa45 	bl	80022d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6812      	ldr	r2, [r2, #0]
 8003e5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e60:	f023 0307 	bic.w	r3, r3, #7
 8003e64:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4610      	mov	r0, r2
 8003e72:	f000 fbc9 	bl	8004608 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e9e:	f023 0303 	bic.w	r3, r3, #3
 8003ea2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	021b      	lsls	r3, r3, #8
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003ebc:	f023 030c 	bic.w	r3, r3, #12
 8003ec0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ec8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ecc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	021b      	lsls	r3, r3, #8
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	011a      	lsls	r2, r3, #4
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	031b      	lsls	r3, r3, #12
 8003eec:	4313      	orrs	r3, r2
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003efa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003f02:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	011b      	lsls	r3, r3, #4
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f78:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f80:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f88:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f90:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d110      	bne.n	8003fba <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d102      	bne.n	8003fa4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f9e:	7b7b      	ldrb	r3, [r7, #13]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d001      	beq.n	8003fa8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e089      	b.n	80040bc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fb8:	e031      	b.n	800401e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d110      	bne.n	8003fe2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fc0:	7bbb      	ldrb	r3, [r7, #14]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d102      	bne.n	8003fcc <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fc6:	7b3b      	ldrb	r3, [r7, #12]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d001      	beq.n	8003fd0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e075      	b.n	80040bc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fe0:	e01d      	b.n	800401e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d108      	bne.n	8003ffa <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fe8:	7bbb      	ldrb	r3, [r7, #14]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d105      	bne.n	8003ffa <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fee:	7b7b      	ldrb	r3, [r7, #13]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d102      	bne.n	8003ffa <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ff4:	7b3b      	ldrb	r3, [r7, #12]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d001      	beq.n	8003ffe <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e05e      	b.n	80040bc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2202      	movs	r2, #2
 8004002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2202      	movs	r2, #2
 800400a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2202      	movs	r2, #2
 8004012:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2202      	movs	r2, #2
 800401a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <HAL_TIM_Encoder_Start_IT+0xc4>
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	2b04      	cmp	r3, #4
 8004028:	d010      	beq.n	800404c <HAL_TIM_Encoder_Start_IT+0xe4>
 800402a:	e01f      	b.n	800406c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2201      	movs	r2, #1
 8004032:	2100      	movs	r1, #0
 8004034:	4618      	mov	r0, r3
 8004036:	f000 fd99 	bl	8004b6c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f042 0202 	orr.w	r2, r2, #2
 8004048:	60da      	str	r2, [r3, #12]
      break;
 800404a:	e02e      	b.n	80040aa <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2201      	movs	r2, #1
 8004052:	2104      	movs	r1, #4
 8004054:	4618      	mov	r0, r3
 8004056:	f000 fd89 	bl	8004b6c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f042 0204 	orr.w	r2, r2, #4
 8004068:	60da      	str	r2, [r3, #12]
      break;
 800406a:	e01e      	b.n	80040aa <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2201      	movs	r2, #1
 8004072:	2100      	movs	r1, #0
 8004074:	4618      	mov	r0, r3
 8004076:	f000 fd79 	bl	8004b6c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2201      	movs	r2, #1
 8004080:	2104      	movs	r1, #4
 8004082:	4618      	mov	r0, r3
 8004084:	f000 fd72 	bl	8004b6c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0202 	orr.w	r2, r2, #2
 8004096:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0204 	orr.w	r2, r2, #4
 80040a6:	60da      	str	r2, [r3, #12]
      break;
 80040a8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 0201 	orr.w	r2, r2, #1
 80040b8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d020      	beq.n	8004128 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d01b      	beq.n	8004128 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f06f 0202 	mvn.w	r2, #2
 80040f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7fd fa66 	bl	80015e0 <HAL_TIM_IC_CaptureCallback>
 8004114:	e005      	b.n	8004122 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 fa57 	bl	80045ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 fa5e 	bl	80045de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	2b00      	cmp	r3, #0
 8004130:	d020      	beq.n	8004174 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	d01b      	beq.n	8004174 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f06f 0204 	mvn.w	r2, #4
 8004144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2202      	movs	r2, #2
 800414a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7fd fa40 	bl	80015e0 <HAL_TIM_IC_CaptureCallback>
 8004160:	e005      	b.n	800416e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 fa31 	bl	80045ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 fa38 	bl	80045de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d020      	beq.n	80041c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b00      	cmp	r3, #0
 8004186:	d01b      	beq.n	80041c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f06f 0208 	mvn.w	r2, #8
 8004190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2204      	movs	r2, #4
 8004196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fd fa1a 	bl	80015e0 <HAL_TIM_IC_CaptureCallback>
 80041ac:	e005      	b.n	80041ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fa0b 	bl	80045ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 fa12 	bl	80045de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f003 0310 	and.w	r3, r3, #16
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d020      	beq.n	800420c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f003 0310 	and.w	r3, r3, #16
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d01b      	beq.n	800420c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f06f 0210 	mvn.w	r2, #16
 80041dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2208      	movs	r2, #8
 80041e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7fd f9f4 	bl	80015e0 <HAL_TIM_IC_CaptureCallback>
 80041f8:	e005      	b.n	8004206 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f9e5 	bl	80045ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f9ec 	bl	80045de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00c      	beq.n	8004230 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b00      	cmp	r3, #0
 800421e:	d007      	beq.n	8004230 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f06f 0201 	mvn.w	r2, #1
 8004228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f9c3 	bl	80045b6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00c      	beq.n	8004254 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004240:	2b00      	cmp	r3, #0
 8004242:	d007      	beq.n	8004254 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800424c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 fd2a 	bl	8004ca8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00c      	beq.n	8004278 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004264:	2b00      	cmp	r3, #0
 8004266:	d007      	beq.n	8004278 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f9bd 	bl	80045f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	f003 0320 	and.w	r3, r3, #32
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00c      	beq.n	800429c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f003 0320 	and.w	r3, r3, #32
 8004288:	2b00      	cmp	r3, #0
 800428a:	d007      	beq.n	800429c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f06f 0220 	mvn.w	r2, #32
 8004294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 fcfc 	bl	8004c94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800429c:	bf00      	nop
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042be:	2302      	movs	r3, #2
 80042c0:	e0ae      	b.n	8004420 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b0c      	cmp	r3, #12
 80042ce:	f200 809f 	bhi.w	8004410 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80042d2:	a201      	add	r2, pc, #4	; (adr r2, 80042d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80042d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d8:	0800430d 	.word	0x0800430d
 80042dc:	08004411 	.word	0x08004411
 80042e0:	08004411 	.word	0x08004411
 80042e4:	08004411 	.word	0x08004411
 80042e8:	0800434d 	.word	0x0800434d
 80042ec:	08004411 	.word	0x08004411
 80042f0:	08004411 	.word	0x08004411
 80042f4:	08004411 	.word	0x08004411
 80042f8:	0800438f 	.word	0x0800438f
 80042fc:	08004411 	.word	0x08004411
 8004300:	08004411 	.word	0x08004411
 8004304:	08004411 	.word	0x08004411
 8004308:	080043cf 	.word	0x080043cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	4618      	mov	r0, r3
 8004314:	f000 fa04 	bl	8004720 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0208 	orr.w	r2, r2, #8
 8004326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699a      	ldr	r2, [r3, #24]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0204 	bic.w	r2, r2, #4
 8004336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6999      	ldr	r1, [r3, #24]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	691a      	ldr	r2, [r3, #16]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	619a      	str	r2, [r3, #24]
      break;
 800434a:	e064      	b.n	8004416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68b9      	ldr	r1, [r7, #8]
 8004352:	4618      	mov	r0, r3
 8004354:	f000 fa4a 	bl	80047ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699a      	ldr	r2, [r3, #24]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699a      	ldr	r2, [r3, #24]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6999      	ldr	r1, [r3, #24]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	021a      	lsls	r2, r3, #8
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	619a      	str	r2, [r3, #24]
      break;
 800438c:	e043      	b.n	8004416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68b9      	ldr	r1, [r7, #8]
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fa95 	bl	80048c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69da      	ldr	r2, [r3, #28]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f042 0208 	orr.w	r2, r2, #8
 80043a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69da      	ldr	r2, [r3, #28]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0204 	bic.w	r2, r2, #4
 80043b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69d9      	ldr	r1, [r3, #28]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	691a      	ldr	r2, [r3, #16]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	61da      	str	r2, [r3, #28]
      break;
 80043cc:	e023      	b.n	8004416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68b9      	ldr	r1, [r7, #8]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 fadf 	bl	8004998 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	69da      	ldr	r2, [r3, #28]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	69da      	ldr	r2, [r3, #28]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	69d9      	ldr	r1, [r3, #28]
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	021a      	lsls	r2, r3, #8
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	61da      	str	r2, [r3, #28]
      break;
 800440e:	e002      	b.n	8004416 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	75fb      	strb	r3, [r7, #23]
      break;
 8004414:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800441e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3718      	adds	r7, #24
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <HAL_TIM_ConfigClockSource+0x1c>
 8004440:	2302      	movs	r3, #2
 8004442:	e0b4      	b.n	80045ae <HAL_TIM_ConfigClockSource+0x186>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2202      	movs	r2, #2
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800446a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800447c:	d03e      	beq.n	80044fc <HAL_TIM_ConfigClockSource+0xd4>
 800447e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004482:	f200 8087 	bhi.w	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 8004486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800448a:	f000 8086 	beq.w	800459a <HAL_TIM_ConfigClockSource+0x172>
 800448e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004492:	d87f      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 8004494:	2b70      	cmp	r3, #112	; 0x70
 8004496:	d01a      	beq.n	80044ce <HAL_TIM_ConfigClockSource+0xa6>
 8004498:	2b70      	cmp	r3, #112	; 0x70
 800449a:	d87b      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 800449c:	2b60      	cmp	r3, #96	; 0x60
 800449e:	d050      	beq.n	8004542 <HAL_TIM_ConfigClockSource+0x11a>
 80044a0:	2b60      	cmp	r3, #96	; 0x60
 80044a2:	d877      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 80044a4:	2b50      	cmp	r3, #80	; 0x50
 80044a6:	d03c      	beq.n	8004522 <HAL_TIM_ConfigClockSource+0xfa>
 80044a8:	2b50      	cmp	r3, #80	; 0x50
 80044aa:	d873      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 80044ac:	2b40      	cmp	r3, #64	; 0x40
 80044ae:	d058      	beq.n	8004562 <HAL_TIM_ConfigClockSource+0x13a>
 80044b0:	2b40      	cmp	r3, #64	; 0x40
 80044b2:	d86f      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 80044b4:	2b30      	cmp	r3, #48	; 0x30
 80044b6:	d064      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0x15a>
 80044b8:	2b30      	cmp	r3, #48	; 0x30
 80044ba:	d86b      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 80044bc:	2b20      	cmp	r3, #32
 80044be:	d060      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0x15a>
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	d867      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d05c      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0x15a>
 80044c8:	2b10      	cmp	r3, #16
 80044ca:	d05a      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0x15a>
 80044cc:	e062      	b.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044de:	f000 fb25 	bl	8004b2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	609a      	str	r2, [r3, #8]
      break;
 80044fa:	e04f      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800450c:	f000 fb0e 	bl	8004b2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800451e:	609a      	str	r2, [r3, #8]
      break;
 8004520:	e03c      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800452e:	461a      	mov	r2, r3
 8004530:	f000 fa82 	bl	8004a38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2150      	movs	r1, #80	; 0x50
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fadb 	bl	8004af6 <TIM_ITRx_SetConfig>
      break;
 8004540:	e02c      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800454e:	461a      	mov	r2, r3
 8004550:	f000 faa1 	bl	8004a96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2160      	movs	r1, #96	; 0x60
 800455a:	4618      	mov	r0, r3
 800455c:	f000 facb 	bl	8004af6 <TIM_ITRx_SetConfig>
      break;
 8004560:	e01c      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800456e:	461a      	mov	r2, r3
 8004570:	f000 fa62 	bl	8004a38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2140      	movs	r1, #64	; 0x40
 800457a:	4618      	mov	r0, r3
 800457c:	f000 fabb 	bl	8004af6 <TIM_ITRx_SetConfig>
      break;
 8004580:	e00c      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4619      	mov	r1, r3
 800458c:	4610      	mov	r0, r2
 800458e:	f000 fab2 	bl	8004af6 <TIM_ITRx_SetConfig>
      break;
 8004592:	e003      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	73fb      	strb	r3, [r7, #15]
      break;
 8004598:	e000      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800459a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b083      	sub	sp, #12
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
	...

08004608 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a3a      	ldr	r2, [pc, #232]	; (8004704 <TIM_Base_SetConfig+0xfc>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d00f      	beq.n	8004640 <TIM_Base_SetConfig+0x38>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004626:	d00b      	beq.n	8004640 <TIM_Base_SetConfig+0x38>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a37      	ldr	r2, [pc, #220]	; (8004708 <TIM_Base_SetConfig+0x100>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d007      	beq.n	8004640 <TIM_Base_SetConfig+0x38>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a36      	ldr	r2, [pc, #216]	; (800470c <TIM_Base_SetConfig+0x104>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d003      	beq.n	8004640 <TIM_Base_SetConfig+0x38>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a35      	ldr	r2, [pc, #212]	; (8004710 <TIM_Base_SetConfig+0x108>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d108      	bne.n	8004652 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004646:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	4313      	orrs	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a2b      	ldr	r2, [pc, #172]	; (8004704 <TIM_Base_SetConfig+0xfc>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d01b      	beq.n	8004692 <TIM_Base_SetConfig+0x8a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004660:	d017      	beq.n	8004692 <TIM_Base_SetConfig+0x8a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a28      	ldr	r2, [pc, #160]	; (8004708 <TIM_Base_SetConfig+0x100>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d013      	beq.n	8004692 <TIM_Base_SetConfig+0x8a>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a27      	ldr	r2, [pc, #156]	; (800470c <TIM_Base_SetConfig+0x104>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d00f      	beq.n	8004692 <TIM_Base_SetConfig+0x8a>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a26      	ldr	r2, [pc, #152]	; (8004710 <TIM_Base_SetConfig+0x108>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d00b      	beq.n	8004692 <TIM_Base_SetConfig+0x8a>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a25      	ldr	r2, [pc, #148]	; (8004714 <TIM_Base_SetConfig+0x10c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d007      	beq.n	8004692 <TIM_Base_SetConfig+0x8a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a24      	ldr	r2, [pc, #144]	; (8004718 <TIM_Base_SetConfig+0x110>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d003      	beq.n	8004692 <TIM_Base_SetConfig+0x8a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a23      	ldr	r2, [pc, #140]	; (800471c <TIM_Base_SetConfig+0x114>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d108      	bne.n	80046a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	689a      	ldr	r2, [r3, #8]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a0e      	ldr	r2, [pc, #56]	; (8004704 <TIM_Base_SetConfig+0xfc>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d103      	bne.n	80046d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	691a      	ldr	r2, [r3, #16]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d105      	bne.n	80046f6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	f023 0201 	bic.w	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	611a      	str	r2, [r3, #16]
  }
}
 80046f6:	bf00      	nop
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	40010000 	.word	0x40010000
 8004708:	40000400 	.word	0x40000400
 800470c:	40000800 	.word	0x40000800
 8004710:	40000c00 	.word	0x40000c00
 8004714:	40014000 	.word	0x40014000
 8004718:	40014400 	.word	0x40014400
 800471c:	40014800 	.word	0x40014800

08004720 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	f023 0201 	bic.w	r2, r3, #1
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 0303 	bic.w	r3, r3, #3
 8004756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	4313      	orrs	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f023 0302 	bic.w	r3, r3, #2
 8004768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	4313      	orrs	r3, r2
 8004772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a1c      	ldr	r2, [pc, #112]	; (80047e8 <TIM_OC1_SetConfig+0xc8>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d10c      	bne.n	8004796 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f023 0308 	bic.w	r3, r3, #8
 8004782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	4313      	orrs	r3, r2
 800478c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f023 0304 	bic.w	r3, r3, #4
 8004794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a13      	ldr	r2, [pc, #76]	; (80047e8 <TIM_OC1_SetConfig+0xc8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d111      	bne.n	80047c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4313      	orrs	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	621a      	str	r2, [r3, #32]
}
 80047dc:	bf00      	nop
 80047de:	371c      	adds	r7, #28
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	40010000 	.word	0x40010000

080047ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	f023 0210 	bic.w	r2, r3, #16
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800481a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	021b      	lsls	r3, r3, #8
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	4313      	orrs	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f023 0320 	bic.w	r3, r3, #32
 8004836:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	4313      	orrs	r3, r2
 8004842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a1e      	ldr	r2, [pc, #120]	; (80048c0 <TIM_OC2_SetConfig+0xd4>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d10d      	bne.n	8004868 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4313      	orrs	r3, r2
 800485e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004866:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a15      	ldr	r2, [pc, #84]	; (80048c0 <TIM_OC2_SetConfig+0xd4>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d113      	bne.n	8004898 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004876:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800487e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	4313      	orrs	r3, r2
 800488a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	4313      	orrs	r3, r2
 8004896:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	621a      	str	r2, [r3, #32]
}
 80048b2:	bf00      	nop
 80048b4:	371c      	adds	r7, #28
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40010000 	.word	0x40010000

080048c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b087      	sub	sp, #28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f023 0303 	bic.w	r3, r3, #3
 80048fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	4313      	orrs	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800490c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	021b      	lsls	r3, r3, #8
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	4313      	orrs	r3, r2
 8004918:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a1d      	ldr	r2, [pc, #116]	; (8004994 <TIM_OC3_SetConfig+0xd0>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d10d      	bne.n	800493e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004928:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	021b      	lsls	r3, r3, #8
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	4313      	orrs	r3, r2
 8004934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800493c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a14      	ldr	r2, [pc, #80]	; (8004994 <TIM_OC3_SetConfig+0xd0>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d113      	bne.n	800496e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800494c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	011b      	lsls	r3, r3, #4
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	4313      	orrs	r3, r2
 8004960:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	621a      	str	r2, [r3, #32]
}
 8004988:	bf00      	nop
 800498a:	371c      	adds	r7, #28
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	40010000 	.word	0x40010000

08004998 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	021b      	lsls	r3, r3, #8
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	4313      	orrs	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	031b      	lsls	r3, r3, #12
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a10      	ldr	r2, [pc, #64]	; (8004a34 <TIM_OC4_SetConfig+0x9c>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d109      	bne.n	8004a0c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	019b      	lsls	r3, r3, #6
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	621a      	str	r2, [r3, #32]
}
 8004a26:	bf00      	nop
 8004a28:	371c      	adds	r7, #28
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	40010000 	.word	0x40010000

08004a38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	f023 0201 	bic.w	r2, r3, #1
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	011b      	lsls	r3, r3, #4
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f023 030a 	bic.w	r3, r3, #10
 8004a74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	621a      	str	r2, [r3, #32]
}
 8004a8a:	bf00      	nop
 8004a8c:	371c      	adds	r7, #28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b087      	sub	sp, #28
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	60f8      	str	r0, [r7, #12]
 8004a9e:	60b9      	str	r1, [r7, #8]
 8004aa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	f023 0210 	bic.w	r2, r3, #16
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ac0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	031b      	lsls	r3, r3, #12
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ad2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	621a      	str	r2, [r3, #32]
}
 8004aea:	bf00      	nop
 8004aec:	371c      	adds	r7, #28
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004af6:	b480      	push	{r7}
 8004af8:	b085      	sub	sp, #20
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
 8004afe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	f043 0307 	orr.w	r3, r3, #7
 8004b18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	609a      	str	r2, [r3, #8]
}
 8004b20:	bf00      	nop
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
 8004b38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	021a      	lsls	r2, r3, #8
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	609a      	str	r2, [r3, #8]
}
 8004b60:	bf00      	nop
 8004b62:	371c      	adds	r7, #28
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f003 031f 	and.w	r3, r3, #31
 8004b7e:	2201      	movs	r2, #1
 8004b80:	fa02 f303 	lsl.w	r3, r2, r3
 8004b84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a1a      	ldr	r2, [r3, #32]
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	43db      	mvns	r3, r3
 8004b8e:	401a      	ands	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6a1a      	ldr	r2, [r3, #32]
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f003 031f 	and.w	r3, r3, #31
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	621a      	str	r2, [r3, #32]
}
 8004baa:	bf00      	nop
 8004bac:	371c      	adds	r7, #28
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
	...

08004bb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d101      	bne.n	8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bcc:	2302      	movs	r3, #2
 8004bce:	e050      	b.n	8004c72 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a1c      	ldr	r2, [pc, #112]	; (8004c80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d018      	beq.n	8004c46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c1c:	d013      	beq.n	8004c46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a18      	ldr	r2, [pc, #96]	; (8004c84 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d00e      	beq.n	8004c46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a16      	ldr	r2, [pc, #88]	; (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d009      	beq.n	8004c46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a15      	ldr	r2, [pc, #84]	; (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d004      	beq.n	8004c46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a13      	ldr	r2, [pc, #76]	; (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d10c      	bne.n	8004c60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3714      	adds	r7, #20
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	40010000 	.word	0x40010000
 8004c84:	40000400 	.word	0x40000400
 8004c88:	40000800 	.word	0x40000800
 8004c8c:	40000c00 	.word	0x40000c00
 8004c90:	40014000 	.word	0x40014000

08004c94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e042      	b.n	8004d54 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d106      	bne.n	8004ce8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7fd fcfc 	bl	80026e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2224      	movs	r2, #36	; 0x24
 8004cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fe6b 	bl	80059dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	691a      	ldr	r2, [r3, #16]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	695a      	ldr	r2, [r3, #20]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	4613      	mov	r3, r2
 8004d68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b20      	cmp	r3, #32
 8004d74:	d112      	bne.n	8004d9c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <HAL_UART_Receive_DMA+0x26>
 8004d7c:	88fb      	ldrh	r3, [r7, #6]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e00b      	b.n	8004d9e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004d8c:	88fb      	ldrh	r3, [r7, #6]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	68b9      	ldr	r1, [r7, #8]
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 fbc2 	bl	800551c <UART_Start_Receive_DMA>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	e000      	b.n	8004d9e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d9c:	2302      	movs	r3, #2
  }
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
	...

08004da8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b0ba      	sub	sp, #232	; 0xe8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dde:	f003 030f 	and.w	r3, r3, #15
 8004de2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004de6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10f      	bne.n	8004e0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df2:	f003 0320 	and.w	r3, r3, #32
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d009      	beq.n	8004e0e <HAL_UART_IRQHandler+0x66>
 8004dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dfe:	f003 0320 	and.w	r3, r3, #32
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fd29 	bl	800585e <UART_Receive_IT>
      return;
 8004e0c:	e25b      	b.n	80052c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 80de 	beq.w	8004fd4 <HAL_UART_IRQHandler+0x22c>
 8004e18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d106      	bne.n	8004e32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e28:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 80d1 	beq.w	8004fd4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00b      	beq.n	8004e56 <HAL_UART_IRQHandler+0xae>
 8004e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d005      	beq.n	8004e56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4e:	f043 0201 	orr.w	r2, r3, #1
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e5a:	f003 0304 	and.w	r3, r3, #4
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00b      	beq.n	8004e7a <HAL_UART_IRQHandler+0xd2>
 8004e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d005      	beq.n	8004e7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e72:	f043 0202 	orr.w	r2, r3, #2
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00b      	beq.n	8004e9e <HAL_UART_IRQHandler+0xf6>
 8004e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d005      	beq.n	8004e9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e96:	f043 0204 	orr.w	r2, r3, #4
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d011      	beq.n	8004ece <HAL_UART_IRQHandler+0x126>
 8004eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eae:	f003 0320 	and.w	r3, r3, #32
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d105      	bne.n	8004ec2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d005      	beq.n	8004ece <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec6:	f043 0208 	orr.w	r2, r3, #8
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 81f2 	beq.w	80052bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004edc:	f003 0320 	and.w	r3, r3, #32
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d008      	beq.n	8004ef6 <HAL_UART_IRQHandler+0x14e>
 8004ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ee8:	f003 0320 	and.w	r3, r3, #32
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fcb4 	bl	800585e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f00:	2b40      	cmp	r3, #64	; 0x40
 8004f02:	bf0c      	ite	eq
 8004f04:	2301      	moveq	r3, #1
 8004f06:	2300      	movne	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f12:	f003 0308 	and.w	r3, r3, #8
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d103      	bne.n	8004f22 <HAL_UART_IRQHandler+0x17a>
 8004f1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d04f      	beq.n	8004fc2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fbbc 	bl	80056a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f32:	2b40      	cmp	r3, #64	; 0x40
 8004f34:	d141      	bne.n	8004fba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3314      	adds	r3, #20
 8004f3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004f4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3314      	adds	r3, #20
 8004f5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f72:	e841 2300 	strex	r3, r2, [r1]
 8004f76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1d9      	bne.n	8004f36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d013      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8e:	4a7e      	ldr	r2, [pc, #504]	; (8005188 <HAL_UART_IRQHandler+0x3e0>)
 8004f90:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fd ff87 	bl	8002eaa <HAL_DMA_Abort_IT>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d016      	beq.n	8004fd0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004fac:	4610      	mov	r0, r2
 8004fae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb0:	e00e      	b.n	8004fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f99e 	bl	80052f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb8:	e00a      	b.n	8004fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f99a 	bl	80052f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc0:	e006      	b.n	8004fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f996 	bl	80052f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004fce:	e175      	b.n	80052bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd0:	bf00      	nop
    return;
 8004fd2:	e173      	b.n	80052bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	f040 814f 	bne.w	800527c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fe2:	f003 0310 	and.w	r3, r3, #16
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 8148 	beq.w	800527c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ff0:	f003 0310 	and.w	r3, r3, #16
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 8141 	beq.w	800527c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60bb      	str	r3, [r7, #8]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	60bb      	str	r3, [r7, #8]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	60bb      	str	r3, [r7, #8]
 800500e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501a:	2b40      	cmp	r3, #64	; 0x40
 800501c:	f040 80b6 	bne.w	800518c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800502c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 8145 	beq.w	80052c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800503a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800503e:	429a      	cmp	r2, r3
 8005040:	f080 813e 	bcs.w	80052c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800504a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005056:	f000 8088 	beq.w	800516a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	330c      	adds	r3, #12
 8005060:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005064:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005068:	e853 3f00 	ldrex	r3, [r3]
 800506c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005070:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005078:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	330c      	adds	r3, #12
 8005082:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005086:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800508a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005092:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005096:	e841 2300 	strex	r3, r2, [r1]
 800509a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800509e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1d9      	bne.n	800505a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3314      	adds	r3, #20
 80050ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050b0:	e853 3f00 	ldrex	r3, [r3]
 80050b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80050b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050b8:	f023 0301 	bic.w	r3, r3, #1
 80050bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3314      	adds	r3, #20
 80050c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80050ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80050ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80050d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80050d6:	e841 2300 	strex	r3, r2, [r1]
 80050da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80050dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1e1      	bne.n	80050a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3314      	adds	r3, #20
 80050e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050ec:	e853 3f00 	ldrex	r3, [r3]
 80050f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80050f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3314      	adds	r3, #20
 8005102:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005106:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005108:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800510c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800510e:	e841 2300 	strex	r3, r2, [r1]
 8005112:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005114:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1e3      	bne.n	80050e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2220      	movs	r2, #32
 800511e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	330c      	adds	r3, #12
 800512e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005132:	e853 3f00 	ldrex	r3, [r3]
 8005136:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005138:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800513a:	f023 0310 	bic.w	r3, r3, #16
 800513e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	330c      	adds	r3, #12
 8005148:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800514c:	65ba      	str	r2, [r7, #88]	; 0x58
 800514e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005150:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005152:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005154:	e841 2300 	strex	r3, r2, [r1]
 8005158:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800515a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1e3      	bne.n	8005128 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005164:	4618      	mov	r0, r3
 8005166:	f7fd fe30 	bl	8002dca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2202      	movs	r2, #2
 800516e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005178:	b29b      	uxth	r3, r3
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	b29b      	uxth	r3, r3
 800517e:	4619      	mov	r1, r3
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f8c1 	bl	8005308 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005186:	e09b      	b.n	80052c0 <HAL_UART_IRQHandler+0x518>
 8005188:	08005767 	.word	0x08005767
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005194:	b29b      	uxth	r3, r3
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 808e 	beq.w	80052c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80051a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 8089 	beq.w	80052c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	330c      	adds	r3, #12
 80051b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051bc:	e853 3f00 	ldrex	r3, [r3]
 80051c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80051c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	330c      	adds	r3, #12
 80051d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80051d6:	647a      	str	r2, [r7, #68]	; 0x44
 80051d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051de:	e841 2300 	strex	r3, r2, [r1]
 80051e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1e3      	bne.n	80051b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	3314      	adds	r3, #20
 80051f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	e853 3f00 	ldrex	r3, [r3]
 80051f8:	623b      	str	r3, [r7, #32]
   return(result);
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	f023 0301 	bic.w	r3, r3, #1
 8005200:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3314      	adds	r3, #20
 800520a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800520e:	633a      	str	r2, [r7, #48]	; 0x30
 8005210:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005212:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005216:	e841 2300 	strex	r3, r2, [r1]
 800521a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800521c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1e3      	bne.n	80051ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2220      	movs	r2, #32
 8005226:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	330c      	adds	r3, #12
 8005236:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	e853 3f00 	ldrex	r3, [r3]
 800523e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f023 0310 	bic.w	r3, r3, #16
 8005246:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	330c      	adds	r3, #12
 8005250:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005254:	61fa      	str	r2, [r7, #28]
 8005256:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005258:	69b9      	ldr	r1, [r7, #24]
 800525a:	69fa      	ldr	r2, [r7, #28]
 800525c:	e841 2300 	strex	r3, r2, [r1]
 8005260:	617b      	str	r3, [r7, #20]
   return(result);
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1e3      	bne.n	8005230 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2202      	movs	r2, #2
 800526c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800526e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005272:	4619      	mov	r1, r3
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f847 	bl	8005308 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800527a:	e023      	b.n	80052c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800527c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005284:	2b00      	cmp	r3, #0
 8005286:	d009      	beq.n	800529c <HAL_UART_IRQHandler+0x4f4>
 8005288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800528c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005290:	2b00      	cmp	r3, #0
 8005292:	d003      	beq.n	800529c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 fa7a 	bl	800578e <UART_Transmit_IT>
    return;
 800529a:	e014      	b.n	80052c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800529c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00e      	beq.n	80052c6 <HAL_UART_IRQHandler+0x51e>
 80052a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d008      	beq.n	80052c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 faba 	bl	800582e <UART_EndTransmit_IT>
    return;
 80052ba:	e004      	b.n	80052c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80052bc:	bf00      	nop
 80052be:	e002      	b.n	80052c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80052c0:	bf00      	nop
 80052c2:	e000      	b.n	80052c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80052c4:	bf00      	nop
  }
}
 80052c6:	37e8      	adds	r7, #232	; 0xe8
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	460b      	mov	r3, r1
 8005312:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b09c      	sub	sp, #112	; 0x70
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005338:	2b00      	cmp	r3, #0
 800533a:	d172      	bne.n	8005422 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800533c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800533e:	2200      	movs	r2, #0
 8005340:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	330c      	adds	r3, #12
 8005348:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800534c:	e853 3f00 	ldrex	r3, [r3]
 8005350:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005354:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005358:	66bb      	str	r3, [r7, #104]	; 0x68
 800535a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	330c      	adds	r3, #12
 8005360:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005362:	65ba      	str	r2, [r7, #88]	; 0x58
 8005364:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005366:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005368:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800536a:	e841 2300 	strex	r3, r2, [r1]
 800536e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1e5      	bne.n	8005342 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3314      	adds	r3, #20
 800537c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005380:	e853 3f00 	ldrex	r3, [r3]
 8005384:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005388:	f023 0301 	bic.w	r3, r3, #1
 800538c:	667b      	str	r3, [r7, #100]	; 0x64
 800538e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3314      	adds	r3, #20
 8005394:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005396:	647a      	str	r2, [r7, #68]	; 0x44
 8005398:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800539c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800539e:	e841 2300 	strex	r3, r2, [r1]
 80053a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1e5      	bne.n	8005376 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3314      	adds	r3, #20
 80053b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	e853 3f00 	ldrex	r3, [r3]
 80053b8:	623b      	str	r3, [r7, #32]
   return(result);
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053c0:	663b      	str	r3, [r7, #96]	; 0x60
 80053c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	3314      	adds	r3, #20
 80053c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053ca:	633a      	str	r2, [r7, #48]	; 0x30
 80053cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053d2:	e841 2300 	strex	r3, r2, [r1]
 80053d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1e5      	bne.n	80053aa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80053de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e0:	2220      	movs	r2, #32
 80053e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d119      	bne.n	8005422 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	330c      	adds	r3, #12
 80053f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	e853 3f00 	ldrex	r3, [r3]
 80053fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f023 0310 	bic.w	r3, r3, #16
 8005404:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	330c      	adds	r3, #12
 800540c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800540e:	61fa      	str	r2, [r7, #28]
 8005410:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005412:	69b9      	ldr	r1, [r7, #24]
 8005414:	69fa      	ldr	r2, [r7, #28]
 8005416:	e841 2300 	strex	r3, r2, [r1]
 800541a:	617b      	str	r3, [r7, #20]
   return(result);
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1e5      	bne.n	80053ee <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005424:	2200      	movs	r2, #0
 8005426:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800542a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542c:	2b01      	cmp	r3, #1
 800542e:	d106      	bne.n	800543e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005432:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005434:	4619      	mov	r1, r3
 8005436:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005438:	f7ff ff66 	bl	8005308 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800543c:	e002      	b.n	8005444 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800543e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005440:	f7fc f99a 	bl	8001778 <HAL_UART_RxCpltCallback>
}
 8005444:	bf00      	nop
 8005446:	3770      	adds	r7, #112	; 0x70
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005458:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2201      	movs	r2, #1
 800545e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005464:	2b01      	cmp	r3, #1
 8005466:	d108      	bne.n	800547a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800546c:	085b      	lsrs	r3, r3, #1
 800546e:	b29b      	uxth	r3, r3
 8005470:	4619      	mov	r1, r3
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f7ff ff48 	bl	8005308 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005478:	e002      	b.n	8005480 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f7ff ff30 	bl	80052e0 <HAL_UART_RxHalfCpltCallback>
}
 8005480:	bf00      	nop
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005490:	2300      	movs	r3, #0
 8005492:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005498:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a4:	2b80      	cmp	r3, #128	; 0x80
 80054a6:	bf0c      	ite	eq
 80054a8:	2301      	moveq	r3, #1
 80054aa:	2300      	movne	r3, #0
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b21      	cmp	r3, #33	; 0x21
 80054ba:	d108      	bne.n	80054ce <UART_DMAError+0x46>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d005      	beq.n	80054ce <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	2200      	movs	r2, #0
 80054c6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80054c8:	68b8      	ldr	r0, [r7, #8]
 80054ca:	f000 f8c1 	bl	8005650 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d8:	2b40      	cmp	r3, #64	; 0x40
 80054da:	bf0c      	ite	eq
 80054dc:	2301      	moveq	r3, #1
 80054de:	2300      	movne	r3, #0
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b22      	cmp	r3, #34	; 0x22
 80054ee:	d108      	bne.n	8005502 <UART_DMAError+0x7a>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d005      	beq.n	8005502 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2200      	movs	r2, #0
 80054fa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80054fc:	68b8      	ldr	r0, [r7, #8]
 80054fe:	f000 f8cf 	bl	80056a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005506:	f043 0210 	orr.w	r2, r3, #16
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800550e:	68b8      	ldr	r0, [r7, #8]
 8005510:	f7ff fef0 	bl	80052f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005514:	bf00      	nop
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b098      	sub	sp, #96	; 0x60
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	4613      	mov	r3, r2
 8005528:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	88fa      	ldrh	r2, [r7, #6]
 8005534:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2222      	movs	r2, #34	; 0x22
 8005540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005548:	4a3e      	ldr	r2, [pc, #248]	; (8005644 <UART_Start_Receive_DMA+0x128>)
 800554a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005550:	4a3d      	ldr	r2, [pc, #244]	; (8005648 <UART_Start_Receive_DMA+0x12c>)
 8005552:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005558:	4a3c      	ldr	r2, [pc, #240]	; (800564c <UART_Start_Receive_DMA+0x130>)
 800555a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005560:	2200      	movs	r2, #0
 8005562:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005564:	f107 0308 	add.w	r3, r7, #8
 8005568:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3304      	adds	r3, #4
 8005574:	4619      	mov	r1, r3
 8005576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	88fb      	ldrh	r3, [r7, #6]
 800557c:	f7fd fbcd 	bl	8002d1a <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005580:	2300      	movs	r3, #0
 8005582:	613b      	str	r3, [r7, #16]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	613b      	str	r3, [r7, #16]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	613b      	str	r3, [r7, #16]
 8005594:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d019      	beq.n	80055d2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	330c      	adds	r3, #12
 80055a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055a8:	e853 3f00 	ldrex	r3, [r3]
 80055ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	330c      	adds	r3, #12
 80055bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055be:	64fa      	str	r2, [r7, #76]	; 0x4c
 80055c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80055c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055c6:	e841 2300 	strex	r3, r2, [r1]
 80055ca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80055cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1e5      	bne.n	800559e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3314      	adds	r3, #20
 80055d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e4:	f043 0301 	orr.w	r3, r3, #1
 80055e8:	657b      	str	r3, [r7, #84]	; 0x54
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	3314      	adds	r3, #20
 80055f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80055f2:	63ba      	str	r2, [r7, #56]	; 0x38
 80055f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80055f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055fa:	e841 2300 	strex	r3, r2, [r1]
 80055fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1e5      	bne.n	80055d2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	3314      	adds	r3, #20
 800560c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	e853 3f00 	ldrex	r3, [r3]
 8005614:	617b      	str	r3, [r7, #20]
   return(result);
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800561c:	653b      	str	r3, [r7, #80]	; 0x50
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3314      	adds	r3, #20
 8005624:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005626:	627a      	str	r2, [r7, #36]	; 0x24
 8005628:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562a:	6a39      	ldr	r1, [r7, #32]
 800562c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800562e:	e841 2300 	strex	r3, r2, [r1]
 8005632:	61fb      	str	r3, [r7, #28]
   return(result);
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1e5      	bne.n	8005606 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3760      	adds	r7, #96	; 0x60
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	08005321 	.word	0x08005321
 8005648:	0800544d 	.word	0x0800544d
 800564c:	08005489 	.word	0x08005489

08005650 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005650:	b480      	push	{r7}
 8005652:	b089      	sub	sp, #36	; 0x24
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	330c      	adds	r3, #12
 800565e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	e853 3f00 	ldrex	r3, [r3]
 8005666:	60bb      	str	r3, [r7, #8]
   return(result);
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800566e:	61fb      	str	r3, [r7, #28]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	330c      	adds	r3, #12
 8005676:	69fa      	ldr	r2, [r7, #28]
 8005678:	61ba      	str	r2, [r7, #24]
 800567a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567c:	6979      	ldr	r1, [r7, #20]
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	e841 2300 	strex	r3, r2, [r1]
 8005684:	613b      	str	r3, [r7, #16]
   return(result);
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1e5      	bne.n	8005658 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2220      	movs	r2, #32
 8005690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005694:	bf00      	nop
 8005696:	3724      	adds	r7, #36	; 0x24
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b095      	sub	sp, #84	; 0x54
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	330c      	adds	r3, #12
 80056ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b2:	e853 3f00 	ldrex	r3, [r3]
 80056b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	330c      	adds	r3, #12
 80056c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056c8:	643a      	str	r2, [r7, #64]	; 0x40
 80056ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056d0:	e841 2300 	strex	r3, r2, [r1]
 80056d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1e5      	bne.n	80056a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	3314      	adds	r3, #20
 80056e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	e853 3f00 	ldrex	r3, [r3]
 80056ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	f023 0301 	bic.w	r3, r3, #1
 80056f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	3314      	adds	r3, #20
 80056fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005700:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005704:	e841 2300 	strex	r3, r2, [r1]
 8005708:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1e5      	bne.n	80056dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005714:	2b01      	cmp	r3, #1
 8005716:	d119      	bne.n	800574c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	330c      	adds	r3, #12
 800571e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	e853 3f00 	ldrex	r3, [r3]
 8005726:	60bb      	str	r3, [r7, #8]
   return(result);
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f023 0310 	bic.w	r3, r3, #16
 800572e:	647b      	str	r3, [r7, #68]	; 0x44
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	330c      	adds	r3, #12
 8005736:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005738:	61ba      	str	r2, [r7, #24]
 800573a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573c:	6979      	ldr	r1, [r7, #20]
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	e841 2300 	strex	r3, r2, [r1]
 8005744:	613b      	str	r3, [r7, #16]
   return(result);
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1e5      	bne.n	8005718 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2220      	movs	r2, #32
 8005750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	631a      	str	r2, [r3, #48]	; 0x30
}
 800575a:	bf00      	nop
 800575c:	3754      	adds	r7, #84	; 0x54
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b084      	sub	sp, #16
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005772:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f7ff fdb7 	bl	80052f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005786:	bf00      	nop
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800578e:	b480      	push	{r7}
 8005790:	b085      	sub	sp, #20
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b21      	cmp	r3, #33	; 0x21
 80057a0:	d13e      	bne.n	8005820 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057aa:	d114      	bne.n	80057d6 <UART_Transmit_IT+0x48>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d110      	bne.n	80057d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	461a      	mov	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	1c9a      	adds	r2, r3, #2
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	621a      	str	r2, [r3, #32]
 80057d4:	e008      	b.n	80057e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	1c59      	adds	r1, r3, #1
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6211      	str	r1, [r2, #32]
 80057e0:	781a      	ldrb	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	3b01      	subs	r3, #1
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	4619      	mov	r1, r3
 80057f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10f      	bne.n	800581c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800580a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68da      	ldr	r2, [r3, #12]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800581a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800581c:	2300      	movs	r3, #0
 800581e:	e000      	b.n	8005822 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005820:	2302      	movs	r3, #2
  }
}
 8005822:	4618      	mov	r0, r3
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b082      	sub	sp, #8
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68da      	ldr	r2, [r3, #12]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005844:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2220      	movs	r2, #32
 800584a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7ff fd3c 	bl	80052cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b08c      	sub	sp, #48	; 0x30
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b22      	cmp	r3, #34	; 0x22
 8005870:	f040 80ae 	bne.w	80059d0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800587c:	d117      	bne.n	80058ae <UART_Receive_IT+0x50>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d113      	bne.n	80058ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005886:	2300      	movs	r3, #0
 8005888:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	b29b      	uxth	r3, r3
 8005898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800589c:	b29a      	uxth	r2, r3
 800589e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a6:	1c9a      	adds	r2, r3, #2
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	629a      	str	r2, [r3, #40]	; 0x28
 80058ac:	e026      	b.n	80058fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80058b4:	2300      	movs	r3, #0
 80058b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c0:	d007      	beq.n	80058d2 <UART_Receive_IT+0x74>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10a      	bne.n	80058e0 <UART_Receive_IT+0x82>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d106      	bne.n	80058e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	b2da      	uxtb	r2, r3
 80058da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058dc:	701a      	strb	r2, [r3, #0]
 80058de:	e008      	b.n	80058f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f6:	1c5a      	adds	r2, r3, #1
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005900:	b29b      	uxth	r3, r3
 8005902:	3b01      	subs	r3, #1
 8005904:	b29b      	uxth	r3, r3
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	4619      	mov	r1, r3
 800590a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800590c:	2b00      	cmp	r3, #0
 800590e:	d15d      	bne.n	80059cc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68da      	ldr	r2, [r3, #12]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 0220 	bic.w	r2, r2, #32
 800591e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800592e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	695a      	ldr	r2, [r3, #20]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 0201 	bic.w	r2, r2, #1
 800593e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2220      	movs	r2, #32
 8005944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005952:	2b01      	cmp	r3, #1
 8005954:	d135      	bne.n	80059c2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	330c      	adds	r3, #12
 8005962:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	e853 3f00 	ldrex	r3, [r3]
 800596a:	613b      	str	r3, [r7, #16]
   return(result);
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	f023 0310 	bic.w	r3, r3, #16
 8005972:	627b      	str	r3, [r7, #36]	; 0x24
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	330c      	adds	r3, #12
 800597a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800597c:	623a      	str	r2, [r7, #32]
 800597e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005980:	69f9      	ldr	r1, [r7, #28]
 8005982:	6a3a      	ldr	r2, [r7, #32]
 8005984:	e841 2300 	strex	r3, r2, [r1]
 8005988:	61bb      	str	r3, [r7, #24]
   return(result);
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1e5      	bne.n	800595c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0310 	and.w	r3, r3, #16
 800599a:	2b10      	cmp	r3, #16
 800599c:	d10a      	bne.n	80059b4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800599e:	2300      	movs	r3, #0
 80059a0:	60fb      	str	r3, [r7, #12]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	60fb      	str	r3, [r7, #12]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	60fb      	str	r3, [r7, #12]
 80059b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059b8:	4619      	mov	r1, r3
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7ff fca4 	bl	8005308 <HAL_UARTEx_RxEventCallback>
 80059c0:	e002      	b.n	80059c8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7fb fed8 	bl	8001778 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80059c8:	2300      	movs	r3, #0
 80059ca:	e002      	b.n	80059d2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	e000      	b.n	80059d2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80059d0:	2302      	movs	r3, #2
  }
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3730      	adds	r7, #48	; 0x30
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
	...

080059dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059e0:	b0c0      	sub	sp, #256	; 0x100
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80059f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f8:	68d9      	ldr	r1, [r3, #12]
 80059fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	ea40 0301 	orr.w	r3, r0, r1
 8005a04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a0a:	689a      	ldr	r2, [r3, #8]
 8005a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	431a      	orrs	r2, r3
 8005a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a34:	f021 010c 	bic.w	r1, r1, #12
 8005a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a42:	430b      	orrs	r3, r1
 8005a44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a56:	6999      	ldr	r1, [r3, #24]
 8005a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	ea40 0301 	orr.w	r3, r0, r1
 8005a62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	4b8f      	ldr	r3, [pc, #572]	; (8005ca8 <UART_SetConfig+0x2cc>)
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d005      	beq.n	8005a7c <UART_SetConfig+0xa0>
 8005a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	4b8d      	ldr	r3, [pc, #564]	; (8005cac <UART_SetConfig+0x2d0>)
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d104      	bne.n	8005a86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a7c:	f7fe f862 	bl	8003b44 <HAL_RCC_GetPCLK2Freq>
 8005a80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005a84:	e003      	b.n	8005a8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a86:	f7fe f849 	bl	8003b1c <HAL_RCC_GetPCLK1Freq>
 8005a8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a92:	69db      	ldr	r3, [r3, #28]
 8005a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a98:	f040 810c 	bne.w	8005cb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005aa6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005aaa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005aae:	4622      	mov	r2, r4
 8005ab0:	462b      	mov	r3, r5
 8005ab2:	1891      	adds	r1, r2, r2
 8005ab4:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ab6:	415b      	adcs	r3, r3
 8005ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005aba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005abe:	4621      	mov	r1, r4
 8005ac0:	eb12 0801 	adds.w	r8, r2, r1
 8005ac4:	4629      	mov	r1, r5
 8005ac6:	eb43 0901 	adc.w	r9, r3, r1
 8005aca:	f04f 0200 	mov.w	r2, #0
 8005ace:	f04f 0300 	mov.w	r3, #0
 8005ad2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ad6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ada:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ade:	4690      	mov	r8, r2
 8005ae0:	4699      	mov	r9, r3
 8005ae2:	4623      	mov	r3, r4
 8005ae4:	eb18 0303 	adds.w	r3, r8, r3
 8005ae8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005aec:	462b      	mov	r3, r5
 8005aee:	eb49 0303 	adc.w	r3, r9, r3
 8005af2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005b06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	18db      	adds	r3, r3, r3
 8005b0e:	653b      	str	r3, [r7, #80]	; 0x50
 8005b10:	4613      	mov	r3, r2
 8005b12:	eb42 0303 	adc.w	r3, r2, r3
 8005b16:	657b      	str	r3, [r7, #84]	; 0x54
 8005b18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005b1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005b20:	f7fa ffd8 	bl	8000ad4 <__aeabi_uldivmod>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	4b61      	ldr	r3, [pc, #388]	; (8005cb0 <UART_SetConfig+0x2d4>)
 8005b2a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b2e:	095b      	lsrs	r3, r3, #5
 8005b30:	011c      	lsls	r4, r3, #4
 8005b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b36:	2200      	movs	r2, #0
 8005b38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005b40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005b44:	4642      	mov	r2, r8
 8005b46:	464b      	mov	r3, r9
 8005b48:	1891      	adds	r1, r2, r2
 8005b4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005b4c:	415b      	adcs	r3, r3
 8005b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b54:	4641      	mov	r1, r8
 8005b56:	eb12 0a01 	adds.w	sl, r2, r1
 8005b5a:	4649      	mov	r1, r9
 8005b5c:	eb43 0b01 	adc.w	fp, r3, r1
 8005b60:	f04f 0200 	mov.w	r2, #0
 8005b64:	f04f 0300 	mov.w	r3, #0
 8005b68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b74:	4692      	mov	sl, r2
 8005b76:	469b      	mov	fp, r3
 8005b78:	4643      	mov	r3, r8
 8005b7a:	eb1a 0303 	adds.w	r3, sl, r3
 8005b7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b82:	464b      	mov	r3, r9
 8005b84:	eb4b 0303 	adc.w	r3, fp, r3
 8005b88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005b9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	18db      	adds	r3, r3, r3
 8005ba4:	643b      	str	r3, [r7, #64]	; 0x40
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	eb42 0303 	adc.w	r3, r2, r3
 8005bac:	647b      	str	r3, [r7, #68]	; 0x44
 8005bae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005bb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005bb6:	f7fa ff8d 	bl	8000ad4 <__aeabi_uldivmod>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	4611      	mov	r1, r2
 8005bc0:	4b3b      	ldr	r3, [pc, #236]	; (8005cb0 <UART_SetConfig+0x2d4>)
 8005bc2:	fba3 2301 	umull	r2, r3, r3, r1
 8005bc6:	095b      	lsrs	r3, r3, #5
 8005bc8:	2264      	movs	r2, #100	; 0x64
 8005bca:	fb02 f303 	mul.w	r3, r2, r3
 8005bce:	1acb      	subs	r3, r1, r3
 8005bd0:	00db      	lsls	r3, r3, #3
 8005bd2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005bd6:	4b36      	ldr	r3, [pc, #216]	; (8005cb0 <UART_SetConfig+0x2d4>)
 8005bd8:	fba3 2302 	umull	r2, r3, r3, r2
 8005bdc:	095b      	lsrs	r3, r3, #5
 8005bde:	005b      	lsls	r3, r3, #1
 8005be0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005be4:	441c      	add	r4, r3
 8005be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bea:	2200      	movs	r2, #0
 8005bec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bf0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005bf4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005bf8:	4642      	mov	r2, r8
 8005bfa:	464b      	mov	r3, r9
 8005bfc:	1891      	adds	r1, r2, r2
 8005bfe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c00:	415b      	adcs	r3, r3
 8005c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c08:	4641      	mov	r1, r8
 8005c0a:	1851      	adds	r1, r2, r1
 8005c0c:	6339      	str	r1, [r7, #48]	; 0x30
 8005c0e:	4649      	mov	r1, r9
 8005c10:	414b      	adcs	r3, r1
 8005c12:	637b      	str	r3, [r7, #52]	; 0x34
 8005c14:	f04f 0200 	mov.w	r2, #0
 8005c18:	f04f 0300 	mov.w	r3, #0
 8005c1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005c20:	4659      	mov	r1, fp
 8005c22:	00cb      	lsls	r3, r1, #3
 8005c24:	4651      	mov	r1, sl
 8005c26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c2a:	4651      	mov	r1, sl
 8005c2c:	00ca      	lsls	r2, r1, #3
 8005c2e:	4610      	mov	r0, r2
 8005c30:	4619      	mov	r1, r3
 8005c32:	4603      	mov	r3, r0
 8005c34:	4642      	mov	r2, r8
 8005c36:	189b      	adds	r3, r3, r2
 8005c38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c3c:	464b      	mov	r3, r9
 8005c3e:	460a      	mov	r2, r1
 8005c40:	eb42 0303 	adc.w	r3, r2, r3
 8005c44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	18db      	adds	r3, r3, r3
 8005c60:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c62:	4613      	mov	r3, r2
 8005c64:	eb42 0303 	adc.w	r3, r2, r3
 8005c68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005c72:	f7fa ff2f 	bl	8000ad4 <__aeabi_uldivmod>
 8005c76:	4602      	mov	r2, r0
 8005c78:	460b      	mov	r3, r1
 8005c7a:	4b0d      	ldr	r3, [pc, #52]	; (8005cb0 <UART_SetConfig+0x2d4>)
 8005c7c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c80:	095b      	lsrs	r3, r3, #5
 8005c82:	2164      	movs	r1, #100	; 0x64
 8005c84:	fb01 f303 	mul.w	r3, r1, r3
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	00db      	lsls	r3, r3, #3
 8005c8c:	3332      	adds	r3, #50	; 0x32
 8005c8e:	4a08      	ldr	r2, [pc, #32]	; (8005cb0 <UART_SetConfig+0x2d4>)
 8005c90:	fba2 2303 	umull	r2, r3, r2, r3
 8005c94:	095b      	lsrs	r3, r3, #5
 8005c96:	f003 0207 	and.w	r2, r3, #7
 8005c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4422      	add	r2, r4
 8005ca2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ca4:	e106      	b.n	8005eb4 <UART_SetConfig+0x4d8>
 8005ca6:	bf00      	nop
 8005ca8:	40011000 	.word	0x40011000
 8005cac:	40011400 	.word	0x40011400
 8005cb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005cbe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005cc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005cc6:	4642      	mov	r2, r8
 8005cc8:	464b      	mov	r3, r9
 8005cca:	1891      	adds	r1, r2, r2
 8005ccc:	6239      	str	r1, [r7, #32]
 8005cce:	415b      	adcs	r3, r3
 8005cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8005cd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cd6:	4641      	mov	r1, r8
 8005cd8:	1854      	adds	r4, r2, r1
 8005cda:	4649      	mov	r1, r9
 8005cdc:	eb43 0501 	adc.w	r5, r3, r1
 8005ce0:	f04f 0200 	mov.w	r2, #0
 8005ce4:	f04f 0300 	mov.w	r3, #0
 8005ce8:	00eb      	lsls	r3, r5, #3
 8005cea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cee:	00e2      	lsls	r2, r4, #3
 8005cf0:	4614      	mov	r4, r2
 8005cf2:	461d      	mov	r5, r3
 8005cf4:	4643      	mov	r3, r8
 8005cf6:	18e3      	adds	r3, r4, r3
 8005cf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005cfc:	464b      	mov	r3, r9
 8005cfe:	eb45 0303 	adc.w	r3, r5, r3
 8005d02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d16:	f04f 0200 	mov.w	r2, #0
 8005d1a:	f04f 0300 	mov.w	r3, #0
 8005d1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005d22:	4629      	mov	r1, r5
 8005d24:	008b      	lsls	r3, r1, #2
 8005d26:	4621      	mov	r1, r4
 8005d28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d2c:	4621      	mov	r1, r4
 8005d2e:	008a      	lsls	r2, r1, #2
 8005d30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005d34:	f7fa fece 	bl	8000ad4 <__aeabi_uldivmod>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	4b60      	ldr	r3, [pc, #384]	; (8005ec0 <UART_SetConfig+0x4e4>)
 8005d3e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d42:	095b      	lsrs	r3, r3, #5
 8005d44:	011c      	lsls	r4, r3, #4
 8005d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d58:	4642      	mov	r2, r8
 8005d5a:	464b      	mov	r3, r9
 8005d5c:	1891      	adds	r1, r2, r2
 8005d5e:	61b9      	str	r1, [r7, #24]
 8005d60:	415b      	adcs	r3, r3
 8005d62:	61fb      	str	r3, [r7, #28]
 8005d64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d68:	4641      	mov	r1, r8
 8005d6a:	1851      	adds	r1, r2, r1
 8005d6c:	6139      	str	r1, [r7, #16]
 8005d6e:	4649      	mov	r1, r9
 8005d70:	414b      	adcs	r3, r1
 8005d72:	617b      	str	r3, [r7, #20]
 8005d74:	f04f 0200 	mov.w	r2, #0
 8005d78:	f04f 0300 	mov.w	r3, #0
 8005d7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d80:	4659      	mov	r1, fp
 8005d82:	00cb      	lsls	r3, r1, #3
 8005d84:	4651      	mov	r1, sl
 8005d86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d8a:	4651      	mov	r1, sl
 8005d8c:	00ca      	lsls	r2, r1, #3
 8005d8e:	4610      	mov	r0, r2
 8005d90:	4619      	mov	r1, r3
 8005d92:	4603      	mov	r3, r0
 8005d94:	4642      	mov	r2, r8
 8005d96:	189b      	adds	r3, r3, r2
 8005d98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d9c:	464b      	mov	r3, r9
 8005d9e:	460a      	mov	r2, r1
 8005da0:	eb42 0303 	adc.w	r3, r2, r3
 8005da4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005db2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005db4:	f04f 0200 	mov.w	r2, #0
 8005db8:	f04f 0300 	mov.w	r3, #0
 8005dbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005dc0:	4649      	mov	r1, r9
 8005dc2:	008b      	lsls	r3, r1, #2
 8005dc4:	4641      	mov	r1, r8
 8005dc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dca:	4641      	mov	r1, r8
 8005dcc:	008a      	lsls	r2, r1, #2
 8005dce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005dd2:	f7fa fe7f 	bl	8000ad4 <__aeabi_uldivmod>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	460b      	mov	r3, r1
 8005dda:	4611      	mov	r1, r2
 8005ddc:	4b38      	ldr	r3, [pc, #224]	; (8005ec0 <UART_SetConfig+0x4e4>)
 8005dde:	fba3 2301 	umull	r2, r3, r3, r1
 8005de2:	095b      	lsrs	r3, r3, #5
 8005de4:	2264      	movs	r2, #100	; 0x64
 8005de6:	fb02 f303 	mul.w	r3, r2, r3
 8005dea:	1acb      	subs	r3, r1, r3
 8005dec:	011b      	lsls	r3, r3, #4
 8005dee:	3332      	adds	r3, #50	; 0x32
 8005df0:	4a33      	ldr	r2, [pc, #204]	; (8005ec0 <UART_SetConfig+0x4e4>)
 8005df2:	fba2 2303 	umull	r2, r3, r2, r3
 8005df6:	095b      	lsrs	r3, r3, #5
 8005df8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dfc:	441c      	add	r4, r3
 8005dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e02:	2200      	movs	r2, #0
 8005e04:	673b      	str	r3, [r7, #112]	; 0x70
 8005e06:	677a      	str	r2, [r7, #116]	; 0x74
 8005e08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005e0c:	4642      	mov	r2, r8
 8005e0e:	464b      	mov	r3, r9
 8005e10:	1891      	adds	r1, r2, r2
 8005e12:	60b9      	str	r1, [r7, #8]
 8005e14:	415b      	adcs	r3, r3
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e1c:	4641      	mov	r1, r8
 8005e1e:	1851      	adds	r1, r2, r1
 8005e20:	6039      	str	r1, [r7, #0]
 8005e22:	4649      	mov	r1, r9
 8005e24:	414b      	adcs	r3, r1
 8005e26:	607b      	str	r3, [r7, #4]
 8005e28:	f04f 0200 	mov.w	r2, #0
 8005e2c:	f04f 0300 	mov.w	r3, #0
 8005e30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e34:	4659      	mov	r1, fp
 8005e36:	00cb      	lsls	r3, r1, #3
 8005e38:	4651      	mov	r1, sl
 8005e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e3e:	4651      	mov	r1, sl
 8005e40:	00ca      	lsls	r2, r1, #3
 8005e42:	4610      	mov	r0, r2
 8005e44:	4619      	mov	r1, r3
 8005e46:	4603      	mov	r3, r0
 8005e48:	4642      	mov	r2, r8
 8005e4a:	189b      	adds	r3, r3, r2
 8005e4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e4e:	464b      	mov	r3, r9
 8005e50:	460a      	mov	r2, r1
 8005e52:	eb42 0303 	adc.w	r3, r2, r3
 8005e56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	663b      	str	r3, [r7, #96]	; 0x60
 8005e62:	667a      	str	r2, [r7, #100]	; 0x64
 8005e64:	f04f 0200 	mov.w	r2, #0
 8005e68:	f04f 0300 	mov.w	r3, #0
 8005e6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005e70:	4649      	mov	r1, r9
 8005e72:	008b      	lsls	r3, r1, #2
 8005e74:	4641      	mov	r1, r8
 8005e76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e7a:	4641      	mov	r1, r8
 8005e7c:	008a      	lsls	r2, r1, #2
 8005e7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005e82:	f7fa fe27 	bl	8000ad4 <__aeabi_uldivmod>
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4b0d      	ldr	r3, [pc, #52]	; (8005ec0 <UART_SetConfig+0x4e4>)
 8005e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e90:	095b      	lsrs	r3, r3, #5
 8005e92:	2164      	movs	r1, #100	; 0x64
 8005e94:	fb01 f303 	mul.w	r3, r1, r3
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	3332      	adds	r3, #50	; 0x32
 8005e9e:	4a08      	ldr	r2, [pc, #32]	; (8005ec0 <UART_SetConfig+0x4e4>)
 8005ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea4:	095b      	lsrs	r3, r3, #5
 8005ea6:	f003 020f 	and.w	r2, r3, #15
 8005eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4422      	add	r2, r4
 8005eb2:	609a      	str	r2, [r3, #8]
}
 8005eb4:	bf00      	nop
 8005eb6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ec0:	51eb851f 	.word	0x51eb851f

08005ec4 <memset>:
 8005ec4:	4402      	add	r2, r0
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d100      	bne.n	8005ece <memset+0xa>
 8005ecc:	4770      	bx	lr
 8005ece:	f803 1b01 	strb.w	r1, [r3], #1
 8005ed2:	e7f9      	b.n	8005ec8 <memset+0x4>

08005ed4 <__libc_init_array>:
 8005ed4:	b570      	push	{r4, r5, r6, lr}
 8005ed6:	4d0d      	ldr	r5, [pc, #52]	; (8005f0c <__libc_init_array+0x38>)
 8005ed8:	4c0d      	ldr	r4, [pc, #52]	; (8005f10 <__libc_init_array+0x3c>)
 8005eda:	1b64      	subs	r4, r4, r5
 8005edc:	10a4      	asrs	r4, r4, #2
 8005ede:	2600      	movs	r6, #0
 8005ee0:	42a6      	cmp	r6, r4
 8005ee2:	d109      	bne.n	8005ef8 <__libc_init_array+0x24>
 8005ee4:	4d0b      	ldr	r5, [pc, #44]	; (8005f14 <__libc_init_array+0x40>)
 8005ee6:	4c0c      	ldr	r4, [pc, #48]	; (8005f18 <__libc_init_array+0x44>)
 8005ee8:	f000 f826 	bl	8005f38 <_init>
 8005eec:	1b64      	subs	r4, r4, r5
 8005eee:	10a4      	asrs	r4, r4, #2
 8005ef0:	2600      	movs	r6, #0
 8005ef2:	42a6      	cmp	r6, r4
 8005ef4:	d105      	bne.n	8005f02 <__libc_init_array+0x2e>
 8005ef6:	bd70      	pop	{r4, r5, r6, pc}
 8005ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005efc:	4798      	blx	r3
 8005efe:	3601      	adds	r6, #1
 8005f00:	e7ee      	b.n	8005ee0 <__libc_init_array+0xc>
 8005f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f06:	4798      	blx	r3
 8005f08:	3601      	adds	r6, #1
 8005f0a:	e7f2      	b.n	8005ef2 <__libc_init_array+0x1e>
 8005f0c:	08005f70 	.word	0x08005f70
 8005f10:	08005f70 	.word	0x08005f70
 8005f14:	08005f70 	.word	0x08005f70
 8005f18:	08005f74 	.word	0x08005f74

08005f1c <memcpy>:
 8005f1c:	440a      	add	r2, r1
 8005f1e:	4291      	cmp	r1, r2
 8005f20:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f24:	d100      	bne.n	8005f28 <memcpy+0xc>
 8005f26:	4770      	bx	lr
 8005f28:	b510      	push	{r4, lr}
 8005f2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f32:	4291      	cmp	r1, r2
 8005f34:	d1f9      	bne.n	8005f2a <memcpy+0xe>
 8005f36:	bd10      	pop	{r4, pc}

08005f38 <_init>:
 8005f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f3a:	bf00      	nop
 8005f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f3e:	bc08      	pop	{r3}
 8005f40:	469e      	mov	lr, r3
 8005f42:	4770      	bx	lr

08005f44 <_fini>:
 8005f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f46:	bf00      	nop
 8005f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f4a:	bc08      	pop	{r3}
 8005f4c:	469e      	mov	lr, r3
 8005f4e:	4770      	bx	lr
