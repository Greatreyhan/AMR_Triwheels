
AMR_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cbc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08006e54  08006e54  00016e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f78  08006f78  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006f78  08006f78  00016f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f80  08006f80  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f80  08006f80  00016f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f84  08006f84  00016f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006f88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b8  20000060  08006fe4  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000818  08006fe4  00020818  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f3f1  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002202  00000000  00000000  0002f4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d98  00000000  00000000  000316c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aae  00000000  00000000  00032460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016b84  00000000  00000000  00032f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000faa4  00000000  00000000  00049a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f3db  00000000  00000000  00059536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003db4  00000000  00000000  000e8914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000ec6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000060 	.word	0x20000060
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006e3c 	.word	0x08006e3c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000064 	.word	0x20000064
 80001d4:	08006e3c 	.word	0x08006e3c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b970 	b.w	8000e6c <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9e08      	ldr	r6, [sp, #32]
 8000baa:	460d      	mov	r5, r1
 8000bac:	4604      	mov	r4, r0
 8000bae:	460f      	mov	r7, r1
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d14a      	bne.n	8000c4a <__udivmoddi4+0xa6>
 8000bb4:	428a      	cmp	r2, r1
 8000bb6:	4694      	mov	ip, r2
 8000bb8:	d965      	bls.n	8000c86 <__udivmoddi4+0xe2>
 8000bba:	fab2 f382 	clz	r3, r2
 8000bbe:	b143      	cbz	r3, 8000bd2 <__udivmoddi4+0x2e>
 8000bc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bc4:	f1c3 0220 	rsb	r2, r3, #32
 8000bc8:	409f      	lsls	r7, r3
 8000bca:	fa20 f202 	lsr.w	r2, r0, r2
 8000bce:	4317      	orrs	r7, r2
 8000bd0:	409c      	lsls	r4, r3
 8000bd2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bd6:	fa1f f58c 	uxth.w	r5, ip
 8000bda:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bde:	0c22      	lsrs	r2, r4, #16
 8000be0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000be4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000be8:	fb01 f005 	mul.w	r0, r1, r5
 8000bec:	4290      	cmp	r0, r2
 8000bee:	d90a      	bls.n	8000c06 <__udivmoddi4+0x62>
 8000bf0:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bf8:	f080 811c 	bcs.w	8000e34 <__udivmoddi4+0x290>
 8000bfc:	4290      	cmp	r0, r2
 8000bfe:	f240 8119 	bls.w	8000e34 <__udivmoddi4+0x290>
 8000c02:	3902      	subs	r1, #2
 8000c04:	4462      	add	r2, ip
 8000c06:	1a12      	subs	r2, r2, r0
 8000c08:	b2a4      	uxth	r4, r4
 8000c0a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c0e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c12:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c16:	fb00 f505 	mul.w	r5, r0, r5
 8000c1a:	42a5      	cmp	r5, r4
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x90>
 8000c1e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c22:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c26:	f080 8107 	bcs.w	8000e38 <__udivmoddi4+0x294>
 8000c2a:	42a5      	cmp	r5, r4
 8000c2c:	f240 8104 	bls.w	8000e38 <__udivmoddi4+0x294>
 8000c30:	4464      	add	r4, ip
 8000c32:	3802      	subs	r0, #2
 8000c34:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c38:	1b64      	subs	r4, r4, r5
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	b11e      	cbz	r6, 8000c46 <__udivmoddi4+0xa2>
 8000c3e:	40dc      	lsrs	r4, r3
 8000c40:	2300      	movs	r3, #0
 8000c42:	e9c6 4300 	strd	r4, r3, [r6]
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0xbc>
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	f000 80ed 	beq.w	8000e2e <__udivmoddi4+0x28a>
 8000c54:	2100      	movs	r1, #0
 8000c56:	e9c6 0500 	strd	r0, r5, [r6]
 8000c5a:	4608      	mov	r0, r1
 8000c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c60:	fab3 f183 	clz	r1, r3
 8000c64:	2900      	cmp	r1, #0
 8000c66:	d149      	bne.n	8000cfc <__udivmoddi4+0x158>
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	d302      	bcc.n	8000c72 <__udivmoddi4+0xce>
 8000c6c:	4282      	cmp	r2, r0
 8000c6e:	f200 80f8 	bhi.w	8000e62 <__udivmoddi4+0x2be>
 8000c72:	1a84      	subs	r4, r0, r2
 8000c74:	eb65 0203 	sbc.w	r2, r5, r3
 8000c78:	2001      	movs	r0, #1
 8000c7a:	4617      	mov	r7, r2
 8000c7c:	2e00      	cmp	r6, #0
 8000c7e:	d0e2      	beq.n	8000c46 <__udivmoddi4+0xa2>
 8000c80:	e9c6 4700 	strd	r4, r7, [r6]
 8000c84:	e7df      	b.n	8000c46 <__udivmoddi4+0xa2>
 8000c86:	b902      	cbnz	r2, 8000c8a <__udivmoddi4+0xe6>
 8000c88:	deff      	udf	#255	; 0xff
 8000c8a:	fab2 f382 	clz	r3, r2
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f040 8090 	bne.w	8000db4 <__udivmoddi4+0x210>
 8000c94:	1a8a      	subs	r2, r1, r2
 8000c96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9a:	fa1f fe8c 	uxth.w	lr, ip
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ca4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ca8:	0c22      	lsrs	r2, r4, #16
 8000caa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cae:	fb0e f005 	mul.w	r0, lr, r5
 8000cb2:	4290      	cmp	r0, r2
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x124>
 8000cb6:	eb1c 0202 	adds.w	r2, ip, r2
 8000cba:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x122>
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	f200 80cb 	bhi.w	8000e5c <__udivmoddi4+0x2b8>
 8000cc6:	4645      	mov	r5, r8
 8000cc8:	1a12      	subs	r2, r2, r0
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cd0:	fb07 2210 	mls	r2, r7, r0, r2
 8000cd4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cdc:	45a6      	cmp	lr, r4
 8000cde:	d908      	bls.n	8000cf2 <__udivmoddi4+0x14e>
 8000ce0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ce8:	d202      	bcs.n	8000cf0 <__udivmoddi4+0x14c>
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	f200 80bb 	bhi.w	8000e66 <__udivmoddi4+0x2c2>
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	eba4 040e 	sub.w	r4, r4, lr
 8000cf6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cfa:	e79f      	b.n	8000c3c <__udivmoddi4+0x98>
 8000cfc:	f1c1 0720 	rsb	r7, r1, #32
 8000d00:	408b      	lsls	r3, r1
 8000d02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d0a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d0e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d12:	40fd      	lsrs	r5, r7
 8000d14:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d18:	4323      	orrs	r3, r4
 8000d1a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	fb09 5518 	mls	r5, r9, r8, r5
 8000d26:	0c1c      	lsrs	r4, r3, #16
 8000d28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d2c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d30:	42a5      	cmp	r5, r4
 8000d32:	fa02 f201 	lsl.w	r2, r2, r1
 8000d36:	fa00 f001 	lsl.w	r0, r0, r1
 8000d3a:	d90b      	bls.n	8000d54 <__udivmoddi4+0x1b0>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d44:	f080 8088 	bcs.w	8000e58 <__udivmoddi4+0x2b4>
 8000d48:	42a5      	cmp	r5, r4
 8000d4a:	f240 8085 	bls.w	8000e58 <__udivmoddi4+0x2b4>
 8000d4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d52:	4464      	add	r4, ip
 8000d54:	1b64      	subs	r4, r4, r5
 8000d56:	b29d      	uxth	r5, r3
 8000d58:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d5c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d60:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d64:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x1da>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d74:	d26c      	bcs.n	8000e50 <__udivmoddi4+0x2ac>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	d96a      	bls.n	8000e50 <__udivmoddi4+0x2ac>
 8000d7a:	3b02      	subs	r3, #2
 8000d7c:	4464      	add	r4, ip
 8000d7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d82:	fba3 9502 	umull	r9, r5, r3, r2
 8000d86:	eba4 040e 	sub.w	r4, r4, lr
 8000d8a:	42ac      	cmp	r4, r5
 8000d8c:	46c8      	mov	r8, r9
 8000d8e:	46ae      	mov	lr, r5
 8000d90:	d356      	bcc.n	8000e40 <__udivmoddi4+0x29c>
 8000d92:	d053      	beq.n	8000e3c <__udivmoddi4+0x298>
 8000d94:	b156      	cbz	r6, 8000dac <__udivmoddi4+0x208>
 8000d96:	ebb0 0208 	subs.w	r2, r0, r8
 8000d9a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000da2:	40ca      	lsrs	r2, r1
 8000da4:	40cc      	lsrs	r4, r1
 8000da6:	4317      	orrs	r7, r2
 8000da8:	e9c6 7400 	strd	r7, r4, [r6]
 8000dac:	4618      	mov	r0, r3
 8000dae:	2100      	movs	r1, #0
 8000db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db4:	f1c3 0120 	rsb	r1, r3, #32
 8000db8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dbc:	fa20 f201 	lsr.w	r2, r0, r1
 8000dc0:	fa25 f101 	lsr.w	r1, r5, r1
 8000dc4:	409d      	lsls	r5, r3
 8000dc6:	432a      	orrs	r2, r5
 8000dc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dcc:	fa1f fe8c 	uxth.w	lr, ip
 8000dd0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd4:	fb07 1510 	mls	r5, r7, r0, r1
 8000dd8:	0c11      	lsrs	r1, r2, #16
 8000dda:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dde:	fb00 f50e 	mul.w	r5, r0, lr
 8000de2:	428d      	cmp	r5, r1
 8000de4:	fa04 f403 	lsl.w	r4, r4, r3
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x258>
 8000dea:	eb1c 0101 	adds.w	r1, ip, r1
 8000dee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000df2:	d22f      	bcs.n	8000e54 <__udivmoddi4+0x2b0>
 8000df4:	428d      	cmp	r5, r1
 8000df6:	d92d      	bls.n	8000e54 <__udivmoddi4+0x2b0>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4461      	add	r1, ip
 8000dfc:	1b49      	subs	r1, r1, r5
 8000dfe:	b292      	uxth	r2, r2
 8000e00:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e04:	fb07 1115 	mls	r1, r7, r5, r1
 8000e08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e0c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e10:	4291      	cmp	r1, r2
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x282>
 8000e14:	eb1c 0202 	adds.w	r2, ip, r2
 8000e18:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e1c:	d216      	bcs.n	8000e4c <__udivmoddi4+0x2a8>
 8000e1e:	4291      	cmp	r1, r2
 8000e20:	d914      	bls.n	8000e4c <__udivmoddi4+0x2a8>
 8000e22:	3d02      	subs	r5, #2
 8000e24:	4462      	add	r2, ip
 8000e26:	1a52      	subs	r2, r2, r1
 8000e28:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e2c:	e738      	b.n	8000ca0 <__udivmoddi4+0xfc>
 8000e2e:	4631      	mov	r1, r6
 8000e30:	4630      	mov	r0, r6
 8000e32:	e708      	b.n	8000c46 <__udivmoddi4+0xa2>
 8000e34:	4639      	mov	r1, r7
 8000e36:	e6e6      	b.n	8000c06 <__udivmoddi4+0x62>
 8000e38:	4610      	mov	r0, r2
 8000e3a:	e6fb      	b.n	8000c34 <__udivmoddi4+0x90>
 8000e3c:	4548      	cmp	r0, r9
 8000e3e:	d2a9      	bcs.n	8000d94 <__udivmoddi4+0x1f0>
 8000e40:	ebb9 0802 	subs.w	r8, r9, r2
 8000e44:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	e7a3      	b.n	8000d94 <__udivmoddi4+0x1f0>
 8000e4c:	4645      	mov	r5, r8
 8000e4e:	e7ea      	b.n	8000e26 <__udivmoddi4+0x282>
 8000e50:	462b      	mov	r3, r5
 8000e52:	e794      	b.n	8000d7e <__udivmoddi4+0x1da>
 8000e54:	4640      	mov	r0, r8
 8000e56:	e7d1      	b.n	8000dfc <__udivmoddi4+0x258>
 8000e58:	46d0      	mov	r8, sl
 8000e5a:	e77b      	b.n	8000d54 <__udivmoddi4+0x1b0>
 8000e5c:	3d02      	subs	r5, #2
 8000e5e:	4462      	add	r2, ip
 8000e60:	e732      	b.n	8000cc8 <__udivmoddi4+0x124>
 8000e62:	4608      	mov	r0, r1
 8000e64:	e70a      	b.n	8000c7c <__udivmoddi4+0xd8>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	e742      	b.n	8000cf2 <__udivmoddi4+0x14e>

08000e6c <__aeabi_idiv0>:
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <BNO08X_GetData>:
#include "BNO08X.h"

static uint8_t RX_Data[19];
static UART_HandleTypeDef huart;

void BNO08X_GetData(BNO08X_Typedef *sensorData){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
    sensorData->header = RX_Data[0];
 8000e78:	4b34      	ldr	r3, [pc, #208]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000e7a:	781a      	ldrb	r2, [r3, #0]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	701a      	strb	r2, [r3, #0]
    sensorData->index = RX_Data[2];
 8000e80:	4b32      	ldr	r3, [pc, #200]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000e82:	789a      	ldrb	r2, [r3, #2]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	705a      	strb	r2, [r3, #1]
    sensorData->yaw = (int16_t)((RX_Data[4] << 8) | RX_Data[3]);
 8000e88:	4b30      	ldr	r3, [pc, #192]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000e8a:	791b      	ldrb	r3, [r3, #4]
 8000e8c:	021b      	lsls	r3, r3, #8
 8000e8e:	b21a      	sxth	r2, r3
 8000e90:	4b2e      	ldr	r3, [pc, #184]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000e92:	78db      	ldrb	r3, [r3, #3]
 8000e94:	b21b      	sxth	r3, r3
 8000e96:	4313      	orrs	r3, r2
 8000e98:	b21a      	sxth	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	805a      	strh	r2, [r3, #2]
    sensorData->pitch = (int16_t)((RX_Data[6] << 8) | RX_Data[5]);
 8000e9e:	4b2b      	ldr	r3, [pc, #172]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000ea0:	799b      	ldrb	r3, [r3, #6]
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	b21a      	sxth	r2, r3
 8000ea6:	4b29      	ldr	r3, [pc, #164]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000ea8:	795b      	ldrb	r3, [r3, #5]
 8000eaa:	b21b      	sxth	r3, r3
 8000eac:	4313      	orrs	r3, r2
 8000eae:	b21a      	sxth	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	809a      	strh	r2, [r3, #4]
    sensorData->roll = (int16_t)((RX_Data[8] << 8) | RX_Data[7]);
 8000eb4:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000eb6:	7a1b      	ldrb	r3, [r3, #8]
 8000eb8:	021b      	lsls	r3, r3, #8
 8000eba:	b21a      	sxth	r2, r3
 8000ebc:	4b23      	ldr	r3, [pc, #140]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000ebe:	79db      	ldrb	r3, [r3, #7]
 8000ec0:	b21b      	sxth	r3, r3
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	b21a      	sxth	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	80da      	strh	r2, [r3, #6]
    sensorData->x_acceleration = (int16_t)((RX_Data[10] << 8) | RX_Data[9]);
 8000eca:	4b20      	ldr	r3, [pc, #128]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000ecc:	7a9b      	ldrb	r3, [r3, #10]
 8000ece:	021b      	lsls	r3, r3, #8
 8000ed0:	b21a      	sxth	r2, r3
 8000ed2:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000ed4:	7a5b      	ldrb	r3, [r3, #9]
 8000ed6:	b21b      	sxth	r3, r3
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	b21a      	sxth	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	811a      	strh	r2, [r3, #8]
    sensorData->y_acceleration = (int16_t)((RX_Data[12] << 8) | RX_Data[11]);
 8000ee0:	4b1a      	ldr	r3, [pc, #104]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000ee2:	7b1b      	ldrb	r3, [r3, #12]
 8000ee4:	021b      	lsls	r3, r3, #8
 8000ee6:	b21a      	sxth	r2, r3
 8000ee8:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000eea:	7adb      	ldrb	r3, [r3, #11]
 8000eec:	b21b      	sxth	r3, r3
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	b21a      	sxth	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	815a      	strh	r2, [r3, #10]
    sensorData->z_acceleration = (int16_t)((RX_Data[14] << 8) | RX_Data[13]);
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000ef8:	7b9b      	ldrb	r3, [r3, #14]
 8000efa:	021b      	lsls	r3, r3, #8
 8000efc:	b21a      	sxth	r2, r3
 8000efe:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000f00:	7b5b      	ldrb	r3, [r3, #13]
 8000f02:	b21b      	sxth	r3, r3
 8000f04:	4313      	orrs	r3, r2
 8000f06:	b21a      	sxth	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	819a      	strh	r2, [r3, #12]

    // MI, MR, Reserved bytes
    for (int i = 0; i < 3; i++) {
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	e00c      	b.n	8000f2c <BNO08X_GetData+0xbc>
        sensorData->mi_mr_reserved[i] = RX_Data[15 + i];
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	330f      	adds	r3, #15
 8000f16:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000f18:	5cd1      	ldrb	r1, [r2, r3]
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4413      	add	r3, r2
 8000f20:	330e      	adds	r3, #14
 8000f22:	460a      	mov	r2, r1
 8000f24:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	ddef      	ble.n	8000f12 <BNO08X_GetData+0xa2>
    }

    sensorData->checksum = RX_Data[18];
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000f34:	7c9a      	ldrb	r2, [r3, #18]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	745a      	strb	r2, [r3, #17]
    HAL_UART_Receive_DMA(&huart, RX_Data, sizeof(RX_Data));
 8000f3a:	2213      	movs	r2, #19
 8000f3c:	4903      	ldr	r1, [pc, #12]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000f3e:	4804      	ldr	r0, [pc, #16]	; (8000f50 <BNO08X_GetData+0xe0>)
 8000f40:	f004 fdf8 	bl	8005b34 <HAL_UART_Receive_DMA>
}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	2000007c 	.word	0x2000007c
 8000f50:	20000090 	.word	0x20000090

08000f54 <BNO08X_Init>:

void BNO08X_Init(UART_HandleTypeDef *huart_instance){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	huart = *huart_instance;
 8000f5c:	4a08      	ldr	r2, [pc, #32]	; (8000f80 <BNO08X_Init+0x2c>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4610      	mov	r0, r2
 8000f62:	4619      	mov	r1, r3
 8000f64:	2348      	movs	r3, #72	; 0x48
 8000f66:	461a      	mov	r2, r3
 8000f68:	f005 ff5a 	bl	8006e20 <memcpy>
	HAL_UART_Receive_DMA(&huart, RX_Data, sizeof(RX_Data));
 8000f6c:	2213      	movs	r2, #19
 8000f6e:	4905      	ldr	r1, [pc, #20]	; (8000f84 <BNO08X_Init+0x30>)
 8000f70:	4803      	ldr	r0, [pc, #12]	; (8000f80 <BNO08X_Init+0x2c>)
 8000f72:	f004 fddf 	bl	8005b34 <HAL_UART_Receive_DMA>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000090 	.word	0x20000090
 8000f84:	2000007c 	.word	0x2000007c

08000f88 <BNO08X_Set_Init_Yaw>:

//////////////////////////////////// KINEMATIC FUNCTION ///////////////////////////////////////////
void BNO08X_Set_Init_Yaw(BNO08X_Typedef *sensorData){
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	sensorData->setpoint_yaw = sensorData->yaw;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	825a      	strh	r2, [r3, #18]
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <BNO08X_relative_yaw>:

int16_t BNO08X_relative_yaw(int16_t current_position, int16_t reading){
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	460a      	mov	r2, r1
 8000fb0:	80fb      	strh	r3, [r7, #6]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	80bb      	strh	r3, [r7, #4]
	if(current_position > 0){
 8000fb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	dd14      	ble.n	8000fe8 <BNO08X_relative_yaw+0x42>
		if(reading > (-current_position)){
 8000fbe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000fc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fc6:	425b      	negs	r3, r3
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	dd05      	ble.n	8000fd8 <BNO08X_relative_yaw+0x32>
			return (reading-current_position);
 8000fcc:	88ba      	ldrh	r2, [r7, #4]
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	b21b      	sxth	r3, r3
 8000fd6:	e022      	b.n	800101e <BNO08X_relative_yaw+0x78>
		}
		else{
			return (reading + current_position + 180);
 8000fd8:	88ba      	ldrh	r2, [r7, #4]
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	4413      	add	r3, r2
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	33b4      	adds	r3, #180	; 0xb4
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	b21b      	sxth	r3, r3
 8000fe6:	e01a      	b.n	800101e <BNO08X_relative_yaw+0x78>
		}
	}
	else if(current_position < 0){
 8000fe8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	da14      	bge.n	800101a <BNO08X_relative_yaw+0x74>
		if(reading > (-current_position)){
 8000ff0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000ff4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ff8:	425b      	negs	r3, r3
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	dd07      	ble.n	800100e <BNO08X_relative_yaw+0x68>
			return (reading + current_position - 180);
 8000ffe:	88ba      	ldrh	r2, [r7, #4]
 8001000:	88fb      	ldrh	r3, [r7, #6]
 8001002:	4413      	add	r3, r2
 8001004:	b29b      	uxth	r3, r3
 8001006:	3bb4      	subs	r3, #180	; 0xb4
 8001008:	b29b      	uxth	r3, r3
 800100a:	b21b      	sxth	r3, r3
 800100c:	e007      	b.n	800101e <BNO08X_relative_yaw+0x78>
		}
		else{
			return (reading - current_position);
 800100e:	88ba      	ldrh	r2, [r7, #4]
 8001010:	88fb      	ldrh	r3, [r7, #6]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	b29b      	uxth	r3, r3
 8001016:	b21b      	sxth	r3, r3
 8001018:	e001      	b.n	800101e <BNO08X_relative_yaw+0x78>
		}
	}
	else{
		return (reading);
 800101a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
	}
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <agv_run_motor>:
#include "Motor.h"
#include <math.h>
#include <float.h>
#include <stdlib.h>

void agv_run_motor(motor_t motor, int16_t speed){
 800102a:	b084      	sub	sp, #16
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
 8001030:	f107 0c08 	add.w	ip, r7, #8
 8001034:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_GPIO_WritePin(motor.EN_PORT_R, motor.EN_PIN_R, GPIO_PIN_SET);
 8001038:	6a3b      	ldr	r3, [r7, #32]
 800103a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800103c:	2201      	movs	r2, #1
 800103e:	4618      	mov	r0, r3
 8001040:	f002 fff4 	bl	800402c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor.EN_PORT_L, motor.EN_PIN_L, GPIO_PIN_SET);
 8001044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001046:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8001048:	2201      	movs	r2, #1
 800104a:	4618      	mov	r0, r3
 800104c:	f002 ffee 	bl	800402c <HAL_GPIO_WritePin>

	if(speed >= 0){
 8001050:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001054:	2b00      	cmp	r3, #0
 8001056:	db62      	blt.n	800111e <agv_run_motor+0xf4>
		if(motor.channel_R == 1){
 8001058:	7e3b      	ldrb	r3, [r7, #24]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d108      	bne.n	8001070 <agv_run_motor+0x46>
			motor.tim_number_R->CCR1 = 0;
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	2200      	movs	r2, #0
 8001062:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_1);
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	2100      	movs	r1, #0
 8001068:	4618      	mov	r0, r3
 800106a:	f003 fd13 	bl	8004a94 <HAL_TIM_PWM_Start>
 800106e:	e022      	b.n	80010b6 <agv_run_motor+0x8c>
		}
		else if(motor.channel_R == 2){
 8001070:	7e3b      	ldrb	r3, [r7, #24]
 8001072:	2b02      	cmp	r3, #2
 8001074:	d108      	bne.n	8001088 <agv_run_motor+0x5e>
			motor.tim_number_R->CCR2 = 0;
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	2200      	movs	r2, #0
 800107a:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_2);
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	2104      	movs	r1, #4
 8001080:	4618      	mov	r0, r3
 8001082:	f003 fd07 	bl	8004a94 <HAL_TIM_PWM_Start>
 8001086:	e016      	b.n	80010b6 <agv_run_motor+0x8c>
		}
		else if(motor.channel_R == 3){
 8001088:	7e3b      	ldrb	r3, [r7, #24]
 800108a:	2b03      	cmp	r3, #3
 800108c:	d108      	bne.n	80010a0 <agv_run_motor+0x76>
			motor.tim_number_R->CCR3 = 0;
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	2200      	movs	r2, #0
 8001092:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_3);
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	2108      	movs	r1, #8
 8001098:	4618      	mov	r0, r3
 800109a:	f003 fcfb 	bl	8004a94 <HAL_TIM_PWM_Start>
 800109e:	e00a      	b.n	80010b6 <agv_run_motor+0x8c>
		}
		else if(motor.channel_R == 4){
 80010a0:	7e3b      	ldrb	r3, [r7, #24]
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	d107      	bne.n	80010b6 <agv_run_motor+0x8c>
			motor.tim_number_R->CCR4 = 0;
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	2200      	movs	r2, #0
 80010aa:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_4);
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	210c      	movs	r1, #12
 80010b0:	4618      	mov	r0, r3
 80010b2:	f003 fcef 	bl	8004a94 <HAL_TIM_PWM_Start>
		}
		if(motor.channel_L == 1){
 80010b6:	7e7b      	ldrb	r3, [r7, #25]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d109      	bne.n	80010d0 <agv_run_motor+0xa6>
			motor.tim_number_L->CCR1 = speed;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 80010c2:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_1);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f003 fce3 	bl	8004a94 <HAL_TIM_PWM_Start>
		else if(motor.channel_L == 4){
			motor.tim_number_L->CCR4 = 0;
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_4);
		}
	}
}
 80010ce:	e090      	b.n	80011f2 <agv_run_motor+0x1c8>
		else if(motor.channel_L == 2){
 80010d0:	7e7b      	ldrb	r3, [r7, #25]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d109      	bne.n	80010ea <agv_run_motor+0xc0>
			motor.tim_number_L->CCR2 = speed;
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 80010dc:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_2);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2104      	movs	r1, #4
 80010e2:	4618      	mov	r0, r3
 80010e4:	f003 fcd6 	bl	8004a94 <HAL_TIM_PWM_Start>
}
 80010e8:	e083      	b.n	80011f2 <agv_run_motor+0x1c8>
		else if(motor.channel_L == 3){
 80010ea:	7e7b      	ldrb	r3, [r7, #25]
 80010ec:	2b03      	cmp	r3, #3
 80010ee:	d109      	bne.n	8001104 <agv_run_motor+0xda>
			motor.tim_number_L->CCR3 = speed;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 80010f6:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_3);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2108      	movs	r1, #8
 80010fc:	4618      	mov	r0, r3
 80010fe:	f003 fcc9 	bl	8004a94 <HAL_TIM_PWM_Start>
}
 8001102:	e076      	b.n	80011f2 <agv_run_motor+0x1c8>
		else if(motor.channel_L == 4){
 8001104:	7e7b      	ldrb	r3, [r7, #25]
 8001106:	2b04      	cmp	r3, #4
 8001108:	d173      	bne.n	80011f2 <agv_run_motor+0x1c8>
			motor.tim_number_L->CCR4 = speed;
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8001110:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_4);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	210c      	movs	r1, #12
 8001116:	4618      	mov	r0, r3
 8001118:	f003 fcbc 	bl	8004a94 <HAL_TIM_PWM_Start>
}
 800111c:	e069      	b.n	80011f2 <agv_run_motor+0x1c8>
	else if(speed < 0){
 800111e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001122:	2b00      	cmp	r3, #0
 8001124:	da65      	bge.n	80011f2 <agv_run_motor+0x1c8>
		if(motor.channel_R == 1){
 8001126:	7e3b      	ldrb	r3, [r7, #24]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d10a      	bne.n	8001142 <agv_run_motor+0x118>
			motor.tim_number_R->CCR1 = -speed;
 800112c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001130:	425a      	negs	r2, r3
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_1);
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f003 fcaa 	bl	8004a94 <HAL_TIM_PWM_Start>
 8001140:	e028      	b.n	8001194 <agv_run_motor+0x16a>
		else if(motor.channel_R == 2){
 8001142:	7e3b      	ldrb	r3, [r7, #24]
 8001144:	2b02      	cmp	r3, #2
 8001146:	d10a      	bne.n	800115e <agv_run_motor+0x134>
			motor.tim_number_R->CCR2 = -speed;
 8001148:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800114c:	425a      	negs	r2, r3
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_2);
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	2104      	movs	r1, #4
 8001156:	4618      	mov	r0, r3
 8001158:	f003 fc9c 	bl	8004a94 <HAL_TIM_PWM_Start>
 800115c:	e01a      	b.n	8001194 <agv_run_motor+0x16a>
		else if(motor.channel_R == 3){
 800115e:	7e3b      	ldrb	r3, [r7, #24]
 8001160:	2b03      	cmp	r3, #3
 8001162:	d10a      	bne.n	800117a <agv_run_motor+0x150>
			motor.tim_number_R->CCR3 = -speed;
 8001164:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001168:	425a      	negs	r2, r3
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_3);
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	2108      	movs	r1, #8
 8001172:	4618      	mov	r0, r3
 8001174:	f003 fc8e 	bl	8004a94 <HAL_TIM_PWM_Start>
 8001178:	e00c      	b.n	8001194 <agv_run_motor+0x16a>
		else if(motor.channel_R == 4){
 800117a:	7e3b      	ldrb	r3, [r7, #24]
 800117c:	2b04      	cmp	r3, #4
 800117e:	d109      	bne.n	8001194 <agv_run_motor+0x16a>
			motor.tim_number_R->CCR4 = -speed;
 8001180:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001184:	425a      	negs	r2, r3
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_4);
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	210c      	movs	r1, #12
 800118e:	4618      	mov	r0, r3
 8001190:	f003 fc80 	bl	8004a94 <HAL_TIM_PWM_Start>
		if(motor.channel_L == 1){
 8001194:	7e7b      	ldrb	r3, [r7, #25]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d108      	bne.n	80011ac <agv_run_motor+0x182>
			motor.tim_number_L->CCR1 = 0;
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	2200      	movs	r2, #0
 800119e:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_1);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f003 fc75 	bl	8004a94 <HAL_TIM_PWM_Start>
}
 80011aa:	e022      	b.n	80011f2 <agv_run_motor+0x1c8>
		else if(motor.channel_L == 2){
 80011ac:	7e7b      	ldrb	r3, [r7, #25]
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d108      	bne.n	80011c4 <agv_run_motor+0x19a>
			motor.tim_number_L->CCR2 = 0;
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	2200      	movs	r2, #0
 80011b6:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_2);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2104      	movs	r1, #4
 80011bc:	4618      	mov	r0, r3
 80011be:	f003 fc69 	bl	8004a94 <HAL_TIM_PWM_Start>
}
 80011c2:	e016      	b.n	80011f2 <agv_run_motor+0x1c8>
		else if(motor.channel_L == 3){
 80011c4:	7e7b      	ldrb	r3, [r7, #25]
 80011c6:	2b03      	cmp	r3, #3
 80011c8:	d108      	bne.n	80011dc <agv_run_motor+0x1b2>
			motor.tim_number_L->CCR3 = 0;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	2200      	movs	r2, #0
 80011ce:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_3);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2108      	movs	r1, #8
 80011d4:	4618      	mov	r0, r3
 80011d6:	f003 fc5d 	bl	8004a94 <HAL_TIM_PWM_Start>
}
 80011da:	e00a      	b.n	80011f2 <agv_run_motor+0x1c8>
		else if(motor.channel_L == 4){
 80011dc:	7e7b      	ldrb	r3, [r7, #25]
 80011de:	2b04      	cmp	r3, #4
 80011e0:	d107      	bne.n	80011f2 <agv_run_motor+0x1c8>
			motor.tim_number_L->CCR4 = 0;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	2200      	movs	r2, #0
 80011e6:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_4);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	210c      	movs	r1, #12
 80011ec:	4618      	mov	r0, r3
 80011ee:	f003 fc51 	bl	8004a94 <HAL_TIM_PWM_Start>
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011fa:	b004      	add	sp, #16
 80011fc:	4770      	bx	lr

080011fe <agv_stop>:


void agv_stop(motor_t motor){
 80011fe:	b084      	sub	sp, #16
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
 8001204:	f107 0c08 	add.w	ip, r7, #8
 8001208:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_GPIO_WritePin(motor.EN_PORT_R, motor.EN_PIN_R, GPIO_PIN_RESET);
 800120c:	6a3b      	ldr	r3, [r7, #32]
 800120e:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001210:	2200      	movs	r2, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f002 ff0a 	bl	800402c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor.EN_PORT_L, motor.EN_PIN_L, GPIO_PIN_RESET);
 8001218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121a:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800121c:	2200      	movs	r2, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f002 ff04 	bl	800402c <HAL_GPIO_WritePin>
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800122c:	b004      	add	sp, #16
 800122e:	4770      	bx	lr

08001230 <agv_stop_all>:

void agv_stop_all(motor_t motorA, motor_t motorB, motor_t motorC){
 8001230:	b084      	sub	sp, #16
 8001232:	b5b0      	push	{r4, r5, r7, lr}
 8001234:	b08c      	sub	sp, #48	; 0x30
 8001236:	af0c      	add	r7, sp, #48	; 0x30
 8001238:	f107 0410 	add.w	r4, r7, #16
 800123c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	agv_stop(motorA);
 8001240:	466d      	mov	r5, sp
 8001242:	f107 0420 	add.w	r4, r7, #32
 8001246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800124a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800124c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800124e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001252:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001256:	f107 0310 	add.w	r3, r7, #16
 800125a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800125c:	f7ff ffcf 	bl	80011fe <agv_stop>
	agv_stop(motorB);
 8001260:	466d      	mov	r5, sp
 8001262:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8001266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800126a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800126c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800126e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001272:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001276:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800127a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800127c:	f7ff ffbf 	bl	80011fe <agv_stop>
	agv_stop(motorC);
 8001280:	466d      	mov	r5, sp
 8001282:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8001286:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001288:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800128a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800128c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800128e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001292:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001296:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800129a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800129c:	f7ff ffaf 	bl	80011fe <agv_stop>
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80012a8:	b004      	add	sp, #16
 80012aa:	4770      	bx	lr

080012ac <agv_reset_all>:

void agv_reset_all(motor_t motorA, motor_t motorB, motor_t motorC){
 80012ac:	b084      	sub	sp, #16
 80012ae:	b5b0      	push	{r4, r5, r7, lr}
 80012b0:	b08c      	sub	sp, #48	; 0x30
 80012b2:	af0c      	add	r7, sp, #48	; 0x30
 80012b4:	f107 0410 	add.w	r4, r7, #16
 80012b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	agv_run_motor(motorA,0);
 80012bc:	2300      	movs	r3, #0
 80012be:	930b      	str	r3, [sp, #44]	; 0x2c
 80012c0:	466d      	mov	r5, sp
 80012c2:	f107 0420 	add.w	r4, r7, #32
 80012c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ce:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80012d2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80012d6:	f107 0310 	add.w	r3, r7, #16
 80012da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012dc:	f7ff fea5 	bl	800102a <agv_run_motor>
	agv_run_motor(motorB,0);
 80012e0:	2300      	movs	r3, #0
 80012e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80012e4:	466d      	mov	r5, sp
 80012e6:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 80012ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80012f6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80012fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001300:	f7ff fe93 	bl	800102a <agv_run_motor>
	agv_run_motor(motorC,0);
 8001304:	2300      	movs	r3, #0
 8001306:	930b      	str	r3, [sp, #44]	; 0x2c
 8001308:	466d      	mov	r5, sp
 800130a:	f107 0498 	add.w	r4, r7, #152	; 0x98
 800130e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001310:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001312:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001314:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001316:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800131a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800131e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001322:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001324:	f7ff fe81 	bl	800102a <agv_run_motor>
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001330:	b004      	add	sp, #16
 8001332:	4770      	bx	lr

08001334 <agv_encoder_start>:

void agv_encoder_start(encoder_t encoder, TIM_HandleTypeDef* tim,TIM_TypeDef* tim_number){
 8001334:	b084      	sub	sp, #16
 8001336:	b580      	push	{r7, lr}
 8001338:	af00      	add	r7, sp, #0
 800133a:	f107 0c08 	add.w	ip, r7, #8
 800133e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	encoder.tim = tim;
 8001342:	6a3b      	ldr	r3, [r7, #32]
 8001344:	60bb      	str	r3, [r7, #8]
	encoder.tim_number = tim_number;
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	60fb      	str	r3, [r7, #12]
	HAL_TIM_Encoder_Start_IT(tim, TIM_CHANNEL_ALL);
 800134a:	213c      	movs	r1, #60	; 0x3c
 800134c:	6a38      	ldr	r0, [r7, #32]
 800134e:	f003 fcf7 	bl	8004d40 <HAL_TIM_Encoder_Start_IT>
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800135a:	b004      	add	sp, #16
 800135c:	4770      	bx	lr
	...

08001360 <agv_kinematic_Sy>:

// Kinematics
double agv_kinematic_Sy(int pos_A, int pos_B, int pos_C){
 8001360:	b5b0      	push	{r4, r5, r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
	double sy = (0.866*pos_A) + (-0.866*pos_B) + (0*pos_C);
 800136c:	68f8      	ldr	r0, [r7, #12]
 800136e:	f7ff f885 	bl	800047c <__aeabi_i2d>
 8001372:	a319      	add	r3, pc, #100	; (adr r3, 80013d8 <agv_kinematic_Sy+0x78>)
 8001374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001378:	f7ff f8ea 	bl	8000550 <__aeabi_dmul>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4614      	mov	r4, r2
 8001382:	461d      	mov	r5, r3
 8001384:	68b8      	ldr	r0, [r7, #8]
 8001386:	f7ff f879 	bl	800047c <__aeabi_i2d>
 800138a:	a315      	add	r3, pc, #84	; (adr r3, 80013e0 <agv_kinematic_Sy+0x80>)
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	f7ff f8de 	bl	8000550 <__aeabi_dmul>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4620      	mov	r0, r4
 800139a:	4629      	mov	r1, r5
 800139c:	f7fe ff22 	bl	80001e4 <__adddf3>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	f04f 0300 	mov.w	r3, #0
 80013b0:	f7fe ff18 	bl	80001e4 <__adddf3>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return sy;
 80013bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013c0:	ec43 2b17 	vmov	d7, r2, r3
}
 80013c4:	eeb0 0a47 	vmov.f32	s0, s14
 80013c8:	eef0 0a67 	vmov.f32	s1, s15
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bdb0      	pop	{r4, r5, r7, pc}
 80013d2:	bf00      	nop
 80013d4:	f3af 8000 	nop.w
 80013d8:	a1cac083 	.word	0xa1cac083
 80013dc:	3febb645 	.word	0x3febb645
 80013e0:	a1cac083 	.word	0xa1cac083
 80013e4:	bfebb645 	.word	0xbfebb645

080013e8 <agv_kinematic_Sx>:
double agv_kinematic_Sx(int pos_A, int pos_B, int pos_C){
 80013e8:	b5b0      	push	{r4, r5, r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
	double sx = (-0.5*pos_A) + (-0.5*pos_B) + (1*pos_C);
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	f7ff f841 	bl	800047c <__aeabi_i2d>
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <agv_kinematic_Sx+0x78>)
 8001400:	f7ff f8a6 	bl	8000550 <__aeabi_dmul>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4614      	mov	r4, r2
 800140a:	461d      	mov	r5, r3
 800140c:	68b8      	ldr	r0, [r7, #8]
 800140e:	f7ff f835 	bl	800047c <__aeabi_i2d>
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <agv_kinematic_Sx+0x78>)
 8001418:	f7ff f89a 	bl	8000550 <__aeabi_dmul>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4620      	mov	r0, r4
 8001422:	4629      	mov	r1, r5
 8001424:	f7fe fede 	bl	80001e4 <__adddf3>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4614      	mov	r4, r2
 800142e:	461d      	mov	r5, r3
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff f823 	bl	800047c <__aeabi_i2d>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4620      	mov	r0, r4
 800143c:	4629      	mov	r1, r5
 800143e:	f7fe fed1 	bl	80001e4 <__adddf3>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return sx;
 800144a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800144e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001452:	eeb0 0a47 	vmov.f32	s0, s14
 8001456:	eef0 0a67 	vmov.f32	s1, s15
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bdb0      	pop	{r4, r5, r7, pc}
 8001460:	bfe00000 	.word	0xbfe00000

08001464 <agv_kinematic_St>:
double agv_kinematic_St(int pos_A, int pos_B, int pos_C){
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
	double st = (1*pos_A) + (1*pos_B) + (1*pos_C);
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	441a      	add	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4413      	add	r3, r2
 800147a:	4618      	mov	r0, r3
 800147c:	f7fe fffe 	bl	800047c <__aeabi_i2d>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return st;
 8001488:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800148c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001490:	eeb0 0a47 	vmov.f32	s0, s14
 8001494:	eef0 0a67 	vmov.f32	s1, s15
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <agv_inverse_kinematic>:
	kinematic.Sx = (0.86*enc_A.position) + (-0.866*enc_B.position) + (0*enc_C.position);
	kinematic.Sy = (-0.5*enc_A.position) + (-0.5*enc_B.position) + (1*enc_C.position);
	kinematic.St = (1*enc_A.position) + (1*enc_B.position) + (1*enc_C.position);
}

void agv_inverse_kinematic(double vx, double vy, double vt, motor_t motorA, motor_t motorB, motor_t motorC){
 80014a0:	b084      	sub	sp, #16
 80014a2:	b5b0      	push	{r4, r5, r7, lr}
 80014a4:	b098      	sub	sp, #96	; 0x60
 80014a6:	af0c      	add	r7, sp, #48	; 0x30
 80014a8:	ed87 0b04 	vstr	d0, [r7, #16]
 80014ac:	ed87 1b02 	vstr	d1, [r7, #8]
 80014b0:	ed87 2b00 	vstr	d2, [r7]
 80014b4:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80014b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	double V1 = (-0.33*vx) + (0.58*vy) + (0.33*vt);
 80014bc:	a362      	add	r3, pc, #392	; (adr r3, 8001648 <agv_inverse_kinematic+0x1a8>)
 80014be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014c6:	f7ff f843 	bl	8000550 <__aeabi_dmul>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4614      	mov	r4, r2
 80014d0:	461d      	mov	r5, r3
 80014d2:	a35f      	add	r3, pc, #380	; (adr r3, 8001650 <agv_inverse_kinematic+0x1b0>)
 80014d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014dc:	f7ff f838 	bl	8000550 <__aeabi_dmul>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4620      	mov	r0, r4
 80014e6:	4629      	mov	r1, r5
 80014e8:	f7fe fe7c 	bl	80001e4 <__adddf3>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4614      	mov	r4, r2
 80014f2:	461d      	mov	r5, r3
 80014f4:	a358      	add	r3, pc, #352	; (adr r3, 8001658 <agv_inverse_kinematic+0x1b8>)
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014fe:	f7ff f827 	bl	8000550 <__aeabi_dmul>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4620      	mov	r0, r4
 8001508:	4629      	mov	r1, r5
 800150a:	f7fe fe6b 	bl	80001e4 <__adddf3>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double V2 = (-0.33*vx) + (-0.58*vy) + (0.33*vt);
 8001516:	a34c      	add	r3, pc, #304	; (adr r3, 8001648 <agv_inverse_kinematic+0x1a8>)
 8001518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001520:	f7ff f816 	bl	8000550 <__aeabi_dmul>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4614      	mov	r4, r2
 800152a:	461d      	mov	r5, r3
 800152c:	a34c      	add	r3, pc, #304	; (adr r3, 8001660 <agv_inverse_kinematic+0x1c0>)
 800152e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001532:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001536:	f7ff f80b 	bl	8000550 <__aeabi_dmul>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4620      	mov	r0, r4
 8001540:	4629      	mov	r1, r5
 8001542:	f7fe fe4f 	bl	80001e4 <__adddf3>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4614      	mov	r4, r2
 800154c:	461d      	mov	r5, r3
 800154e:	a342      	add	r3, pc, #264	; (adr r3, 8001658 <agv_inverse_kinematic+0x1b8>)
 8001550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001554:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001558:	f7fe fffa 	bl	8000550 <__aeabi_dmul>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4620      	mov	r0, r4
 8001562:	4629      	mov	r1, r5
 8001564:	f7fe fe3e 	bl	80001e4 <__adddf3>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double V3 = (0.67*vx) + (0*vy) + (0.33*vt);
 8001570:	a33d      	add	r3, pc, #244	; (adr r3, 8001668 <agv_inverse_kinematic+0x1c8>)
 8001572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001576:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800157a:	f7fe ffe9 	bl	8000550 <__aeabi_dmul>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4614      	mov	r4, r2
 8001584:	461d      	mov	r5, r3
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	f04f 0300 	mov.w	r3, #0
 800158e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001592:	f7fe ffdd 	bl	8000550 <__aeabi_dmul>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4620      	mov	r0, r4
 800159c:	4629      	mov	r1, r5
 800159e:	f7fe fe21 	bl	80001e4 <__adddf3>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4614      	mov	r4, r2
 80015a8:	461d      	mov	r5, r3
 80015aa:	a32b      	add	r3, pc, #172	; (adr r3, 8001658 <agv_inverse_kinematic+0x1b8>)
 80015ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015b4:	f7fe ffcc 	bl	8000550 <__aeabi_dmul>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4620      	mov	r0, r4
 80015be:	4629      	mov	r1, r5
 80015c0:	f7fe fe10 	bl	80001e4 <__adddf3>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	agv_speed_to_pwm(motorA, V1);
 80015cc:	466d      	mov	r5, sp
 80015ce:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80015d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015da:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80015de:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80015e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015e8:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 80015ec:	f000 f840 	bl	8001670 <agv_speed_to_pwm>
	agv_speed_to_pwm(motorB, V2);
 80015f0:	466d      	mov	r5, sp
 80015f2:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80015f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015fe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001602:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001606:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800160a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800160c:	ed97 0b08 	vldr	d0, [r7, #32]
 8001610:	f000 f82e 	bl	8001670 <agv_speed_to_pwm>
	agv_speed_to_pwm(motorC, V3);
 8001614:	466d      	mov	r5, sp
 8001616:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 800161a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800161c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800161e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001622:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001626:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800162a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800162e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001630:	ed97 0b06 	vldr	d0, [r7, #24]
 8001634:	f000 f81c 	bl	8001670 <agv_speed_to_pwm>
}
 8001638:	bf00      	nop
 800163a:	3730      	adds	r7, #48	; 0x30
 800163c:	46bd      	mov	sp, r7
 800163e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001642:	b004      	add	sp, #16
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	51eb851f 	.word	0x51eb851f
 800164c:	bfd51eb8 	.word	0xbfd51eb8
 8001650:	28f5c28f 	.word	0x28f5c28f
 8001654:	3fe28f5c 	.word	0x3fe28f5c
 8001658:	51eb851f 	.word	0x51eb851f
 800165c:	3fd51eb8 	.word	0x3fd51eb8
 8001660:	28f5c28f 	.word	0x28f5c28f
 8001664:	bfe28f5c 	.word	0xbfe28f5c
 8001668:	d70a3d71 	.word	0xd70a3d71
 800166c:	3fe570a3 	.word	0x3fe570a3

08001670 <agv_speed_to_pwm>:
	agv.Yp = cos(agv.St) - sin(agv.St) + 0;
	agv.Xp = sin(agv.St) + cos(agv.St) + 0;
	agv.Tp = 0 + 0 + agv.St;
}

void agv_speed_to_pwm(motor_t motor, double speed){
 8001670:	b084      	sub	sp, #16
 8001672:	b5b0      	push	{r4, r5, r7, lr}
 8001674:	b08e      	sub	sp, #56	; 0x38
 8001676:	af0c      	add	r7, sp, #48	; 0x30
 8001678:	f107 0418 	add.w	r4, r7, #24
 800167c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001680:	ed87 0b00 	vstr	d0, [r7]
	// Maximum 628,2 mm/s
	if(speed < 628.2){
 8001684:	a322      	add	r3, pc, #136	; (adr r3, 8001710 <agv_speed_to_pwm+0xa0>)
 8001686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800168e:	f7ff f9d1 	bl	8000a34 <__aeabi_dcmplt>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d020      	beq.n	80016da <agv_speed_to_pwm+0x6a>
		agv_run_motor(motor, (speed*1.592));
 8001698:	a31f      	add	r3, pc, #124	; (adr r3, 8001718 <agv_speed_to_pwm+0xa8>)
 800169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016a2:	f7fe ff55 	bl	8000550 <__aeabi_dmul>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f7ff f9e9 	bl	8000a84 <__aeabi_d2iz>
 80016b2:	4603      	mov	r3, r0
 80016b4:	b21b      	sxth	r3, r3
 80016b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80016b8:	466d      	mov	r5, sp
 80016ba:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80016be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016c6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80016ca:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80016ce:	f107 0318 	add.w	r3, r7, #24
 80016d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016d4:	f7ff fca9 	bl	800102a <agv_run_motor>
	}
	else{
		agv_run_motor(motor, (628.2*1.592));
	}
}
 80016d8:	e012      	b.n	8001700 <agv_speed_to_pwm+0x90>
		agv_run_motor(motor, (628.2*1.592));
 80016da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016de:	930b      	str	r3, [sp, #44]	; 0x2c
 80016e0:	466d      	mov	r5, sp
 80016e2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80016e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ee:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80016f2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80016f6:	f107 0318 	add.w	r3, r7, #24
 80016fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016fc:	f7ff fc95 	bl	800102a <agv_run_motor>
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800170a:	b004      	add	sp, #16
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	9999999a 	.word	0x9999999a
 8001714:	4083a199 	.word	0x4083a199
 8001718:	fdf3b646 	.word	0xfdf3b646
 800171c:	3ff978d4 	.word	0x3ff978d4

08001720 <PIDController_Init>:
 */


#include "PID_Driver.h"

void PIDController_Init(PIDController *pid) {
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError  = 0.0;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	629a      	str	r2, [r3, #40]	; 0x28

	pid->differentiator  = 0.0;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	631a      	str	r2, [r3, #48]	; 0x30

	pid->out = 0.0;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	635a      	str	r2, [r3, #52]	; 0x34

}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement) {
 800175c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001760:	b086      	sub	sp, #24
 8001762:	af00      	add	r7, sp, #0
 8001764:	60f8      	str	r0, [r7, #12]
 8001766:	ed87 0a02 	vstr	s0, [r7, #8]
 800176a:	edc7 0a01 	vstr	s1, [r7, #4]

	// Error signal
    float error = setpoint - measurement;
 800176e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001772:	edd7 7a01 	vldr	s15, [r7, #4]
 8001776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800177a:	edc7 7a05 	vstr	s15, [r7, #20]

	// Proportional
    float proportional = pid->Kp * error;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	edd3 7a00 	vldr	s15, [r3]
 8001784:	ed97 7a05 	vldr	s14, [r7, #20]
 8001788:	ee67 7a27 	vmul.f32	s15, s14, s15
 800178c:	edc7 7a04 	vstr	s15, [r7, #16]

	// Integral
    pid->integrator = pid->integrator + 0.5 * pid->Ki * pid->T_sample * (error + pid->prevError);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fe83 	bl	80004a0 <__aeabi_f2d>
 800179a:	4680      	mov	r8, r0
 800179c:	4689      	mov	r9, r1
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fe7c 	bl	80004a0 <__aeabi_f2d>
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	4b86      	ldr	r3, [pc, #536]	; (80019c8 <PIDController_Update+0x26c>)
 80017ae:	f7fe fecf 	bl	8000550 <__aeabi_dmul>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4692      	mov	sl, r2
 80017b8:	469b      	mov	fp, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe fe6e 	bl	80004a0 <__aeabi_f2d>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4650      	mov	r0, sl
 80017ca:	4659      	mov	r1, fp
 80017cc:	f7fe fec0 	bl	8000550 <__aeabi_dmul>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4692      	mov	sl, r2
 80017d6:	469b      	mov	fp, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80017de:	edd7 7a05 	vldr	s15, [r7, #20]
 80017e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e6:	ee17 0a90 	vmov	r0, s15
 80017ea:	f7fe fe59 	bl	80004a0 <__aeabi_f2d>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	4650      	mov	r0, sl
 80017f4:	4659      	mov	r1, fp
 80017f6:	f7fe feab 	bl	8000550 <__aeabi_dmul>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4640      	mov	r0, r8
 8001800:	4649      	mov	r1, r9
 8001802:	f7fe fcef 	bl	80001e4 <__adddf3>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4610      	mov	r0, r2
 800180c:	4619      	mov	r1, r3
 800180e:	f7ff f961 	bl	8000ad4 <__aeabi_d2f>
 8001812:	4602      	mov	r2, r0
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	625a      	str	r2, [r3, #36]	; 0x24

	// Anti-wind-up via integrator clamping
    if (pid->integrator > pid->limMaxInt) {
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	edd3 7a07 	vldr	s15, [r3, #28]
 8001824:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182c:	dd04      	ble.n	8001838 <PIDController_Update+0xdc>

        pid->integrator = pid->limMaxInt;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	69da      	ldr	r2, [r3, #28]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	625a      	str	r2, [r3, #36]	; 0x24
 8001836:	e00e      	b.n	8001856 <PIDController_Update+0xfa>

    } else if (pid->integrator < pid->limMinInt) {
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	edd3 7a06 	vldr	s15, [r3, #24]
 8001844:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184c:	d503      	bpl.n	8001856 <PIDController_Update+0xfa>

        pid->integrator = pid->limMinInt;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	699a      	ldr	r2, [r3, #24]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	625a      	str	r2, [r3, #36]	; 0x24

    }

	// Derivative (band-limited differentiator)
    pid->differentiator = -(2.0 * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	4618      	mov	r0, r3
 800185c:	f7fe fe20 	bl	80004a0 <__aeabi_f2d>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	f7fe fcbe 	bl	80001e4 <__adddf3>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4690      	mov	r8, r2
 800186e:	4699      	mov	r9, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001876:	ed97 7a01 	vldr	s14, [r7, #4]
 800187a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800187e:	ee17 0a90 	vmov	r0, s15
 8001882:	f7fe fe0d 	bl	80004a0 <__aeabi_f2d>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4640      	mov	r0, r8
 800188c:	4649      	mov	r1, r9
 800188e:	f7fe fe5f 	bl	8000550 <__aeabi_dmul>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4690      	mov	r8, r2
 8001898:	4699      	mov	r9, r3
                        + (2.0 * pid->tau - pid->T_sample) * pid->differentiator)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe fdfe 	bl	80004a0 <__aeabi_f2d>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	f7fe fc9c 	bl	80001e4 <__adddf3>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4692      	mov	sl, r2
 80018b2:	469b      	mov	fp, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fdf1 	bl	80004a0 <__aeabi_f2d>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4650      	mov	r0, sl
 80018c4:	4659      	mov	r1, fp
 80018c6:	f7fe fc8b 	bl	80001e0 <__aeabi_dsub>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4692      	mov	sl, r2
 80018d0:	469b      	mov	fp, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe fde2 	bl	80004a0 <__aeabi_f2d>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4650      	mov	r0, sl
 80018e2:	4659      	mov	r1, fp
 80018e4:	f7fe fe34 	bl	8000550 <__aeabi_dmul>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4640      	mov	r0, r8
 80018ee:	4649      	mov	r1, r9
 80018f0:	f7fe fc78 	bl	80001e4 <__adddf3>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
    pid->differentiator = -(2.0 * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 80018f8:	4614      	mov	r4, r2
 80018fa:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
                        / (2.0 * pid->tau + pid->T_sample);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fdcc 	bl	80004a0 <__aeabi_f2d>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	f7fe fc6a 	bl	80001e4 <__adddf3>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4690      	mov	r8, r2
 8001916:	4699      	mov	r9, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fdbf 	bl	80004a0 <__aeabi_f2d>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4640      	mov	r0, r8
 8001928:	4649      	mov	r1, r9
 800192a:	f7fe fc5b 	bl	80001e4 <__adddf3>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4620      	mov	r0, r4
 8001934:	4629      	mov	r1, r5
 8001936:	f7fe ff35 	bl	80007a4 <__aeabi_ddiv>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	4610      	mov	r0, r2
 8001940:	4619      	mov	r1, r3
 8001942:	f7ff f8c7 	bl	8000ad4 <__aeabi_d2f>
 8001946:	4602      	mov	r2, r0
    pid->differentiator = -(2.0 * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	62da      	str	r2, [r3, #44]	; 0x2c


	// Compute output and apply limits
    pid->out = proportional + pid->integrator + pid->differentiator;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001952:	edd7 7a04 	vldr	s15, [r7, #16]
 8001956:	ee37 7a27 	vadd.f32	s14, s14, s15
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    if (pid->out > pid->limMax) {
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	edd3 7a05 	vldr	s15, [r3, #20]
 8001976:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800197a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197e:	dd04      	ble.n	800198a <PIDController_Update+0x22e>

        pid->out = pid->limMax;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	695a      	ldr	r2, [r3, #20]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	635a      	str	r2, [r3, #52]	; 0x34
 8001988:	e00e      	b.n	80019a8 <PIDController_Update+0x24c>

    } else if (pid->out < pid->limMin) {
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	edd3 7a04 	vldr	s15, [r3, #16]
 8001996:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800199a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199e:	d503      	bpl.n	80019a8 <PIDController_Update+0x24c>

        pid->out = pid->limMin;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	635a      	str	r2, [r3, #52]	; 0x34

    }

	// Store error and measurement for later use
    pid->prevError       = error;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	629a      	str	r2, [r3, #40]	; 0x28
    pid->prevMeasurement = measurement;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	631a      	str	r2, [r3, #48]	; 0x30

	// Return controller output
    return pid->out;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b8:	ee07 3a90 	vmov	s15, r3
}
 80019bc:	eeb0 0a67 	vmov.f32	s0, s15
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019c8:	3fe00000 	.word	0x3fe00000

080019cc <HAL_TIM_IC_CaptureCallback>:
int ydata = 0;
int tdata = 0;
uint8_t is_started = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	if(htim->Instance  == TIM1){
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a5c      	ldr	r2, [pc, #368]	; (8001b4c <HAL_TIM_IC_CaptureCallback+0x180>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d113      	bne.n	8001a06 <HAL_TIM_IC_CaptureCallback+0x3a>
		encoder_A.counter  	= __HAL_TIM_GET_COUNTER(htim);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	4a5a      	ldr	r2, [pc, #360]	; (8001b50 <HAL_TIM_IC_CaptureCallback+0x184>)
 80019e6:	6093      	str	r3, [r2, #8]
		encoder_A.counts 	= (int16_t)encoder_A.counter;
 80019e8:	4b59      	ldr	r3, [pc, #356]	; (8001b50 <HAL_TIM_IC_CaptureCallback+0x184>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	b21a      	sxth	r2, r3
 80019ee:	4b58      	ldr	r3, [pc, #352]	; (8001b50 <HAL_TIM_IC_CaptureCallback+0x184>)
 80019f0:	819a      	strh	r2, [r3, #12]
		encoder_A.position	= encoder_A.counts/4;
 80019f2:	4b57      	ldr	r3, [pc, #348]	; (8001b50 <HAL_TIM_IC_CaptureCallback+0x184>)
 80019f4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	da00      	bge.n	80019fe <HAL_TIM_IC_CaptureCallback+0x32>
 80019fc:	3303      	adds	r3, #3
 80019fe:	109b      	asrs	r3, r3, #2
 8001a00:	b21a      	sxth	r2, r3
 8001a02:	4b53      	ldr	r3, [pc, #332]	; (8001b50 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001a04:	81da      	strh	r2, [r3, #14]
	}
	if(htim->Instance  == TIM2){
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a0e:	d113      	bne.n	8001a38 <HAL_TIM_IC_CaptureCallback+0x6c>
		encoder_B.counter  	= __HAL_TIM_GET_COUNTER(htim);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	4a4f      	ldr	r2, [pc, #316]	; (8001b54 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001a18:	6093      	str	r3, [r2, #8]
		encoder_B.counts 	= (int16_t)encoder_B.counter;
 8001a1a:	4b4e      	ldr	r3, [pc, #312]	; (8001b54 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	b21a      	sxth	r2, r3
 8001a20:	4b4c      	ldr	r3, [pc, #304]	; (8001b54 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001a22:	819a      	strh	r2, [r3, #12]
		encoder_B.position	= encoder_B.counts/4;
 8001a24:	4b4b      	ldr	r3, [pc, #300]	; (8001b54 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001a26:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	da00      	bge.n	8001a30 <HAL_TIM_IC_CaptureCallback+0x64>
 8001a2e:	3303      	adds	r3, #3
 8001a30:	109b      	asrs	r3, r3, #2
 8001a32:	b21a      	sxth	r2, r3
 8001a34:	4b47      	ldr	r3, [pc, #284]	; (8001b54 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001a36:	81da      	strh	r2, [r3, #14]
	}
	if(htim->Instance  == TIM5){
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a46      	ldr	r2, [pc, #280]	; (8001b58 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d113      	bne.n	8001a6a <HAL_TIM_IC_CaptureCallback+0x9e>
		encoder_C.counter  	= __HAL_TIM_GET_COUNTER(htim);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	4a44      	ldr	r2, [pc, #272]	; (8001b5c <HAL_TIM_IC_CaptureCallback+0x190>)
 8001a4a:	6093      	str	r3, [r2, #8]
		encoder_C.counts 		= (int16_t)encoder_C.counter;
 8001a4c:	4b43      	ldr	r3, [pc, #268]	; (8001b5c <HAL_TIM_IC_CaptureCallback+0x190>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	b21a      	sxth	r2, r3
 8001a52:	4b42      	ldr	r3, [pc, #264]	; (8001b5c <HAL_TIM_IC_CaptureCallback+0x190>)
 8001a54:	819a      	strh	r2, [r3, #12]
		encoder_C.position	= encoder_C.counts/4;
 8001a56:	4b41      	ldr	r3, [pc, #260]	; (8001b5c <HAL_TIM_IC_CaptureCallback+0x190>)
 8001a58:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	da00      	bge.n	8001a62 <HAL_TIM_IC_CaptureCallback+0x96>
 8001a60:	3303      	adds	r3, #3
 8001a62:	109b      	asrs	r3, r3, #2
 8001a64:	b21a      	sxth	r2, r3
 8001a66:	4b3d      	ldr	r3, [pc, #244]	; (8001b5c <HAL_TIM_IC_CaptureCallback+0x190>)
 8001a68:	81da      	strh	r2, [r3, #14]
	}
	kinematic.S1 = abs(encoder_A.position);
 8001a6a:	4b39      	ldr	r3, [pc, #228]	; (8001b50 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001a6c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	bfb8      	it	lt
 8001a74:	425b      	neglt	r3, r3
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fcff 	bl	800047c <__aeabi_i2d>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4937      	ldr	r1, [pc, #220]	; (8001b60 <HAL_TIM_IC_CaptureCallback+0x194>)
 8001a84:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	kinematic.S2 = abs(encoder_B.position);
 8001a88:	4b32      	ldr	r3, [pc, #200]	; (8001b54 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001a8a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	bfb8      	it	lt
 8001a92:	425b      	neglt	r3, r3
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fcf0 	bl	800047c <__aeabi_i2d>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	492f      	ldr	r1, [pc, #188]	; (8001b60 <HAL_TIM_IC_CaptureCallback+0x194>)
 8001aa2:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	kinematic.S3 = abs(encoder_C.position);
 8001aa6:	4b2d      	ldr	r3, [pc, #180]	; (8001b5c <HAL_TIM_IC_CaptureCallback+0x190>)
 8001aa8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	bfb8      	it	lt
 8001ab0:	425b      	neglt	r3, r3
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fce1 	bl	800047c <__aeabi_i2d>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4928      	ldr	r1, [pc, #160]	; (8001b60 <HAL_TIM_IC_CaptureCallback+0x194>)
 8001ac0:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	kinematic.Sx = agv_kinematic_Sx(encoder_A.position,encoder_B.position,encoder_C.position);
 8001ac4:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001ac6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001aca:	4618      	mov	r0, r3
 8001acc:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001ace:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <HAL_TIM_IC_CaptureCallback+0x190>)
 8001ad6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001ada:	461a      	mov	r2, r3
 8001adc:	f7ff fc84 	bl	80013e8 <agv_kinematic_Sx>
 8001ae0:	eeb0 7a40 	vmov.f32	s14, s0
 8001ae4:	eef0 7a60 	vmov.f32	s15, s1
 8001ae8:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <HAL_TIM_IC_CaptureCallback+0x194>)
 8001aea:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
	kinematic.Sy = agv_kinematic_Sy(encoder_A.position,encoder_B.position,encoder_C.position);
 8001aee:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001af0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001af4:	4618      	mov	r0, r3
 8001af6:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001af8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001afc:	4619      	mov	r1, r3
 8001afe:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <HAL_TIM_IC_CaptureCallback+0x190>)
 8001b00:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001b04:	461a      	mov	r2, r3
 8001b06:	f7ff fc2b 	bl	8001360 <agv_kinematic_Sy>
 8001b0a:	eeb0 7a40 	vmov.f32	s14, s0
 8001b0e:	eef0 7a60 	vmov.f32	s15, s1
 8001b12:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <HAL_TIM_IC_CaptureCallback+0x194>)
 8001b14:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
	kinematic.St = agv_kinematic_St(encoder_A.position,encoder_B.position,encoder_C.position);
 8001b18:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001b1a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001b22:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001b26:	4619      	mov	r1, r3
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <HAL_TIM_IC_CaptureCallback+0x190>)
 8001b2a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	f7ff fc98 	bl	8001464 <agv_kinematic_St>
 8001b34:	eeb0 7a40 	vmov.f32	s14, s0
 8001b38:	eef0 7a60 	vmov.f32	s15, s1
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <HAL_TIM_IC_CaptureCallback+0x194>)
 8001b3e:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40010000 	.word	0x40010000
 8001b50:	20000678 	.word	0x20000678
 8001b54:	20000690 	.word	0x20000690
 8001b58:	40000c00 	.word	0x40000c00
 8001b5c:	200006a8 	.word	0x200006a8
 8001b60:	20000420 	.word	0x20000420

08001b64 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	is_started = 1;
 8001b6c:	4b40      	ldr	r3, [pc, #256]	; (8001c70 <HAL_UART_RxCpltCallback+0x10c>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	701a      	strb	r2, [r3, #0]
	if(huart->Instance == USART1){
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a3f      	ldr	r2, [pc, #252]	; (8001c74 <HAL_UART_RxCpltCallback+0x110>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d168      	bne.n	8001c4e <HAL_UART_RxCpltCallback+0xea>
		if(rxBluetooth[0] == 'A' && rxBluetooth[1] == 'A'){
 8001b7c:	4b3e      	ldr	r3, [pc, #248]	; (8001c78 <HAL_UART_RxCpltCallback+0x114>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b41      	cmp	r3, #65	; 0x41
 8001b82:	d15a      	bne.n	8001c3a <HAL_UART_RxCpltCallback+0xd6>
 8001b84:	4b3c      	ldr	r3, [pc, #240]	; (8001c78 <HAL_UART_RxCpltCallback+0x114>)
 8001b86:	785b      	ldrb	r3, [r3, #1]
 8001b88:	2b41      	cmp	r3, #65	; 0x41
 8001b8a:	d156      	bne.n	8001c3a <HAL_UART_RxCpltCallback+0xd6>
			uint8_t holder[3];
			holder[0] = rxBluetooth[3];
 8001b8c:	4b3a      	ldr	r3, [pc, #232]	; (8001c78 <HAL_UART_RxCpltCallback+0x114>)
 8001b8e:	78db      	ldrb	r3, [r3, #3]
 8001b90:	733b      	strb	r3, [r7, #12]
			holder[1] = rxBluetooth[4];
 8001b92:	4b39      	ldr	r3, [pc, #228]	; (8001c78 <HAL_UART_RxCpltCallback+0x114>)
 8001b94:	791b      	ldrb	r3, [r3, #4]
 8001b96:	737b      	strb	r3, [r7, #13]
			holder[2] = rxBluetooth[5];
 8001b98:	4b37      	ldr	r3, [pc, #220]	; (8001c78 <HAL_UART_RxCpltCallback+0x114>)
 8001b9a:	795b      	ldrb	r3, [r3, #5]
 8001b9c:	73bb      	strb	r3, [r7, #14]
			xdata = rxBluetooth[2] == 'N' ? atoi((char *)holder)*(-1) : atoi((char *)holder);
 8001b9e:	4b36      	ldr	r3, [pc, #216]	; (8001c78 <HAL_UART_RxCpltCallback+0x114>)
 8001ba0:	789b      	ldrb	r3, [r3, #2]
 8001ba2:	2b4e      	cmp	r3, #78	; 0x4e
 8001ba4:	d107      	bne.n	8001bb6 <HAL_UART_RxCpltCallback+0x52>
 8001ba6:	f107 030c 	add.w	r3, r7, #12
 8001baa:	4618      	mov	r0, r3
 8001bac:	f005 f876 	bl	8006c9c <atoi>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	425b      	negs	r3, r3
 8001bb4:	e005      	b.n	8001bc2 <HAL_UART_RxCpltCallback+0x5e>
 8001bb6:	f107 030c 	add.w	r3, r7, #12
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f005 f86e 	bl	8006c9c <atoi>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4a2e      	ldr	r2, [pc, #184]	; (8001c7c <HAL_UART_RxCpltCallback+0x118>)
 8001bc4:	6013      	str	r3, [r2, #0]
			holder[0] = rxBluetooth[7];
 8001bc6:	4b2c      	ldr	r3, [pc, #176]	; (8001c78 <HAL_UART_RxCpltCallback+0x114>)
 8001bc8:	79db      	ldrb	r3, [r3, #7]
 8001bca:	733b      	strb	r3, [r7, #12]
			holder[1] = rxBluetooth[8];
 8001bcc:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <HAL_UART_RxCpltCallback+0x114>)
 8001bce:	7a1b      	ldrb	r3, [r3, #8]
 8001bd0:	737b      	strb	r3, [r7, #13]
			holder[2] = rxBluetooth[9];
 8001bd2:	4b29      	ldr	r3, [pc, #164]	; (8001c78 <HAL_UART_RxCpltCallback+0x114>)
 8001bd4:	7a5b      	ldrb	r3, [r3, #9]
 8001bd6:	73bb      	strb	r3, [r7, #14]
			ydata = rxBluetooth[6] == 'N' ? atoi((char *)holder)*(-1) : atoi((char *)holder);
 8001bd8:	4b27      	ldr	r3, [pc, #156]	; (8001c78 <HAL_UART_RxCpltCallback+0x114>)
 8001bda:	799b      	ldrb	r3, [r3, #6]
 8001bdc:	2b4e      	cmp	r3, #78	; 0x4e
 8001bde:	d107      	bne.n	8001bf0 <HAL_UART_RxCpltCallback+0x8c>
 8001be0:	f107 030c 	add.w	r3, r7, #12
 8001be4:	4618      	mov	r0, r3
 8001be6:	f005 f859 	bl	8006c9c <atoi>
 8001bea:	4603      	mov	r3, r0
 8001bec:	425b      	negs	r3, r3
 8001bee:	e005      	b.n	8001bfc <HAL_UART_RxCpltCallback+0x98>
 8001bf0:	f107 030c 	add.w	r3, r7, #12
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f005 f851 	bl	8006c9c <atoi>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4a20      	ldr	r2, [pc, #128]	; (8001c80 <HAL_UART_RxCpltCallback+0x11c>)
 8001bfe:	6013      	str	r3, [r2, #0]
			holder[0] = rxBluetooth[11];
 8001c00:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <HAL_UART_RxCpltCallback+0x114>)
 8001c02:	7adb      	ldrb	r3, [r3, #11]
 8001c04:	733b      	strb	r3, [r7, #12]
			holder[1] = rxBluetooth[12];
 8001c06:	4b1c      	ldr	r3, [pc, #112]	; (8001c78 <HAL_UART_RxCpltCallback+0x114>)
 8001c08:	7b1b      	ldrb	r3, [r3, #12]
 8001c0a:	737b      	strb	r3, [r7, #13]
			holder[2] = rxBluetooth[13];
 8001c0c:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <HAL_UART_RxCpltCallback+0x114>)
 8001c0e:	7b5b      	ldrb	r3, [r3, #13]
 8001c10:	73bb      	strb	r3, [r7, #14]
			tdata = rxBluetooth[10] == 'N' ? atoi((char *)holder)*(-1) : atoi((char *)holder);
 8001c12:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <HAL_UART_RxCpltCallback+0x114>)
 8001c14:	7a9b      	ldrb	r3, [r3, #10]
 8001c16:	2b4e      	cmp	r3, #78	; 0x4e
 8001c18:	d107      	bne.n	8001c2a <HAL_UART_RxCpltCallback+0xc6>
 8001c1a:	f107 030c 	add.w	r3, r7, #12
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f005 f83c 	bl	8006c9c <atoi>
 8001c24:	4603      	mov	r3, r0
 8001c26:	425b      	negs	r3, r3
 8001c28:	e005      	b.n	8001c36 <HAL_UART_RxCpltCallback+0xd2>
 8001c2a:	f107 030c 	add.w	r3, r7, #12
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f005 f834 	bl	8006c9c <atoi>
 8001c34:	4603      	mov	r3, r0
 8001c36:	4a13      	ldr	r2, [pc, #76]	; (8001c84 <HAL_UART_RxCpltCallback+0x120>)
 8001c38:	6013      	str	r3, [r2, #0]
		}
		HAL_UART_Receive_DMA(&huart1, rxBluetooth, sizeof(rxBluetooth));
 8001c3a:	220f      	movs	r2, #15
 8001c3c:	490e      	ldr	r1, [pc, #56]	; (8001c78 <HAL_UART_RxCpltCallback+0x114>)
 8001c3e:	4812      	ldr	r0, [pc, #72]	; (8001c88 <HAL_UART_RxCpltCallback+0x124>)
 8001c40:	f003 ff78 	bl	8005b34 <HAL_UART_Receive_DMA>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001c44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c48:	4810      	ldr	r0, [pc, #64]	; (8001c8c <HAL_UART_RxCpltCallback+0x128>)
 8001c4a:	f002 fa08 	bl	800405e <HAL_GPIO_TogglePin>
	}
	if (huart == &huart6) {
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a0f      	ldr	r2, [pc, #60]	; (8001c90 <HAL_UART_RxCpltCallback+0x12c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d102      	bne.n	8001c5c <HAL_UART_RxCpltCallback+0xf8>

		// Callback for BNO08X Data
		BNO08X_GetData(&BNO08x_Data);
 8001c56:	480f      	ldr	r0, [pc, #60]	; (8001c94 <HAL_UART_RxCpltCallback+0x130>)
 8001c58:	f7ff f90a 	bl	8000e70 <BNO08X_GetData>

	}
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001c5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c60:	480a      	ldr	r0, [pc, #40]	; (8001c8c <HAL_UART_RxCpltCallback+0x128>)
 8001c62:	f002 f9fc 	bl	800405e <HAL_GPIO_TogglePin>
}
 8001c66:	bf00      	nop
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200005c0 	.word	0x200005c0
 8001c74:	40011000 	.word	0x40011000
 8001c78:	20000590 	.word	0x20000590
 8001c7c:	200005b4 	.word	0x200005b4
 8001c80:	200005b8 	.word	0x200005b8
 8001c84:	200005bc 	.word	0x200005bc
 8001c88:	2000032c 	.word	0x2000032c
 8001c8c:	40020800 	.word	0x40020800
 8001c90:	20000374 	.word	0x20000374
 8001c94:	200000d8 	.word	0x200000d8

08001c98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9a:	b0ab      	sub	sp, #172	; 0xac
 8001c9c:	af2a      	add	r7, sp, #168	; 0xa8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c9e:	f001 fabb 	bl	8003218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ca2:	f000 f9c5 	bl	8002030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ca6:	f000 fd41 	bl	800272c <MX_GPIO_Init>
  MX_DMA_Init();
 8001caa:	f000 fd1f 	bl	80026ec <MX_DMA_Init>
  MX_TIM1_Init();
 8001cae:	f000 fa27 	bl	8002100 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001cb2:	f000 fa7d 	bl	80021b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001cb6:	f000 facf 	bl	8002258 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001cba:	f000 fb65 	bl	8002388 <MX_TIM4_Init>
  MX_TIM9_Init();
 8001cbe:	f000 fc0b 	bl	80024d8 <MX_TIM9_Init>
  MX_TIM10_Init();
 8001cc2:	f000 fc77 	bl	80025b4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001cc6:	f000 fc99 	bl	80025fc <MX_TIM11_Init>
  MX_USART6_UART_Init();
 8001cca:	f000 fce5 	bl	8002698 <MX_USART6_UART_Init>
  MX_USART1_UART_Init();
 8001cce:	f000 fcb9 	bl	8002644 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8001cd2:	f000 fbad 	bl	8002430 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  //+++++++++++++++++++++++++++++++++ MOTOR INITIALIZATION +++++++++++++++++++++++++++++//
  // Configuration 'Motor A'
  motor_A.tim_R = &htim3;
 8001cd6:	4b9a      	ldr	r3, [pc, #616]	; (8001f40 <main+0x2a8>)
 8001cd8:	4a9a      	ldr	r2, [pc, #616]	; (8001f44 <main+0x2ac>)
 8001cda:	601a      	str	r2, [r3, #0]
  motor_A.tim_L = &htim3;
 8001cdc:	4b98      	ldr	r3, [pc, #608]	; (8001f40 <main+0x2a8>)
 8001cde:	4a99      	ldr	r2, [pc, #612]	; (8001f44 <main+0x2ac>)
 8001ce0:	605a      	str	r2, [r3, #4]
  motor_A.tim_number_R = TIM3;
 8001ce2:	4b97      	ldr	r3, [pc, #604]	; (8001f40 <main+0x2a8>)
 8001ce4:	4a98      	ldr	r2, [pc, #608]	; (8001f48 <main+0x2b0>)
 8001ce6:	609a      	str	r2, [r3, #8]
  motor_A.tim_number_L = TIM3;
 8001ce8:	4b95      	ldr	r3, [pc, #596]	; (8001f40 <main+0x2a8>)
 8001cea:	4a97      	ldr	r2, [pc, #604]	; (8001f48 <main+0x2b0>)
 8001cec:	60da      	str	r2, [r3, #12]
  motor_A.channel_R = 1;
 8001cee:	4b94      	ldr	r3, [pc, #592]	; (8001f40 <main+0x2a8>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	741a      	strb	r2, [r3, #16]
  motor_A.channel_L = 2;
 8001cf4:	4b92      	ldr	r3, [pc, #584]	; (8001f40 <main+0x2a8>)
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	745a      	strb	r2, [r3, #17]
  motor_A.EN_PORT_R = ENR_A_GPIO_Port;
 8001cfa:	4b91      	ldr	r3, [pc, #580]	; (8001f40 <main+0x2a8>)
 8001cfc:	4a93      	ldr	r2, [pc, #588]	; (8001f4c <main+0x2b4>)
 8001cfe:	619a      	str	r2, [r3, #24]
  motor_A.EN_PORT_L = ENL_A_GPIO_Port;
 8001d00:	4b8f      	ldr	r3, [pc, #572]	; (8001f40 <main+0x2a8>)
 8001d02:	4a92      	ldr	r2, [pc, #584]	; (8001f4c <main+0x2b4>)
 8001d04:	61da      	str	r2, [r3, #28]
  motor_A.EN_PIN_R = ENR_A_Pin;
 8001d06:	4b8e      	ldr	r3, [pc, #568]	; (8001f40 <main+0x2a8>)
 8001d08:	2204      	movs	r2, #4
 8001d0a:	841a      	strh	r2, [r3, #32]
  motor_A.EN_PIN_L = ENL_A_Pin;
 8001d0c:	4b8c      	ldr	r3, [pc, #560]	; (8001f40 <main+0x2a8>)
 8001d0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d12:	845a      	strh	r2, [r3, #34]	; 0x22

  // Configuration 'Motor B'
  motor_B.tim_R = &htim3;
 8001d14:	4b8e      	ldr	r3, [pc, #568]	; (8001f50 <main+0x2b8>)
 8001d16:	4a8b      	ldr	r2, [pc, #556]	; (8001f44 <main+0x2ac>)
 8001d18:	601a      	str	r2, [r3, #0]
  motor_B.tim_L = &htim3;
 8001d1a:	4b8d      	ldr	r3, [pc, #564]	; (8001f50 <main+0x2b8>)
 8001d1c:	4a89      	ldr	r2, [pc, #548]	; (8001f44 <main+0x2ac>)
 8001d1e:	605a      	str	r2, [r3, #4]
  motor_B.tim_number_R = TIM3;
 8001d20:	4b8b      	ldr	r3, [pc, #556]	; (8001f50 <main+0x2b8>)
 8001d22:	4a89      	ldr	r2, [pc, #548]	; (8001f48 <main+0x2b0>)
 8001d24:	609a      	str	r2, [r3, #8]
  motor_B.tim_number_L = TIM3;
 8001d26:	4b8a      	ldr	r3, [pc, #552]	; (8001f50 <main+0x2b8>)
 8001d28:	4a87      	ldr	r2, [pc, #540]	; (8001f48 <main+0x2b0>)
 8001d2a:	60da      	str	r2, [r3, #12]
  motor_B.channel_R = 3;
 8001d2c:	4b88      	ldr	r3, [pc, #544]	; (8001f50 <main+0x2b8>)
 8001d2e:	2203      	movs	r2, #3
 8001d30:	741a      	strb	r2, [r3, #16]
  motor_B.channel_L = 4;
 8001d32:	4b87      	ldr	r3, [pc, #540]	; (8001f50 <main+0x2b8>)
 8001d34:	2204      	movs	r2, #4
 8001d36:	745a      	strb	r2, [r3, #17]
  motor_B.EN_PORT_R = ENR_B_GPIO_Port;
 8001d38:	4b85      	ldr	r3, [pc, #532]	; (8001f50 <main+0x2b8>)
 8001d3a:	4a84      	ldr	r2, [pc, #528]	; (8001f4c <main+0x2b4>)
 8001d3c:	619a      	str	r2, [r3, #24]
  motor_B.EN_PORT_L = ENL_B_GPIO_Port;
 8001d3e:	4b84      	ldr	r3, [pc, #528]	; (8001f50 <main+0x2b8>)
 8001d40:	4a82      	ldr	r2, [pc, #520]	; (8001f4c <main+0x2b4>)
 8001d42:	61da      	str	r2, [r3, #28]
  motor_B.EN_PIN_R = ENR_B_Pin;
 8001d44:	4b82      	ldr	r3, [pc, #520]	; (8001f50 <main+0x2b8>)
 8001d46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d4a:	841a      	strh	r2, [r3, #32]
  motor_B.EN_PIN_L = ENL_B_Pin;
 8001d4c:	4b80      	ldr	r3, [pc, #512]	; (8001f50 <main+0x2b8>)
 8001d4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d52:	845a      	strh	r2, [r3, #34]	; 0x22

  // Configuration 'Motor C
  motor_C.tim_R = &htim9;
 8001d54:	4b7f      	ldr	r3, [pc, #508]	; (8001f54 <main+0x2bc>)
 8001d56:	4a80      	ldr	r2, [pc, #512]	; (8001f58 <main+0x2c0>)
 8001d58:	601a      	str	r2, [r3, #0]
  motor_C.tim_L = &htim9;
 8001d5a:	4b7e      	ldr	r3, [pc, #504]	; (8001f54 <main+0x2bc>)
 8001d5c:	4a7e      	ldr	r2, [pc, #504]	; (8001f58 <main+0x2c0>)
 8001d5e:	605a      	str	r2, [r3, #4]
  motor_C.tim_number_R = TIM9;
 8001d60:	4b7c      	ldr	r3, [pc, #496]	; (8001f54 <main+0x2bc>)
 8001d62:	4a7e      	ldr	r2, [pc, #504]	; (8001f5c <main+0x2c4>)
 8001d64:	609a      	str	r2, [r3, #8]
  motor_C.tim_number_L = TIM9;
 8001d66:	4b7b      	ldr	r3, [pc, #492]	; (8001f54 <main+0x2bc>)
 8001d68:	4a7c      	ldr	r2, [pc, #496]	; (8001f5c <main+0x2c4>)
 8001d6a:	60da      	str	r2, [r3, #12]
  motor_C.channel_R = 1;
 8001d6c:	4b79      	ldr	r3, [pc, #484]	; (8001f54 <main+0x2bc>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	741a      	strb	r2, [r3, #16]
  motor_C.channel_L = 2;
 8001d72:	4b78      	ldr	r3, [pc, #480]	; (8001f54 <main+0x2bc>)
 8001d74:	2202      	movs	r2, #2
 8001d76:	745a      	strb	r2, [r3, #17]
  motor_C.EN_PORT_R = ENR_C_GPIO_Port;
 8001d78:	4b76      	ldr	r3, [pc, #472]	; (8001f54 <main+0x2bc>)
 8001d7a:	4a74      	ldr	r2, [pc, #464]	; (8001f4c <main+0x2b4>)
 8001d7c:	619a      	str	r2, [r3, #24]
  motor_C.EN_PORT_L = ENL_C_GPIO_Port;
 8001d7e:	4b75      	ldr	r3, [pc, #468]	; (8001f54 <main+0x2bc>)
 8001d80:	4a72      	ldr	r2, [pc, #456]	; (8001f4c <main+0x2b4>)
 8001d82:	61da      	str	r2, [r3, #28]
  motor_C.EN_PIN_R = ENR_C_Pin;
 8001d84:	4b73      	ldr	r3, [pc, #460]	; (8001f54 <main+0x2bc>)
 8001d86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d8a:	841a      	strh	r2, [r3, #32]
  motor_C.EN_PIN_L = ENL_C_Pin;
 8001d8c:	4b71      	ldr	r3, [pc, #452]	; (8001f54 <main+0x2bc>)
 8001d8e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d92:	845a      	strh	r2, [r3, #34]	; 0x22

  //+++++++++++++++++++++++++++++++++ ENCODER INITIALIZATION ++++++++++++++++++++++++++++++//
  agv_encoder_start(encoder_A, &htim1, TIM1);
 8001d94:	4b72      	ldr	r3, [pc, #456]	; (8001f60 <main+0x2c8>)
 8001d96:	4a73      	ldr	r2, [pc, #460]	; (8001f64 <main+0x2cc>)
 8001d98:	9203      	str	r2, [sp, #12]
 8001d9a:	4a73      	ldr	r2, [pc, #460]	; (8001f68 <main+0x2d0>)
 8001d9c:	9202      	str	r2, [sp, #8]
 8001d9e:	466c      	mov	r4, sp
 8001da0:	f103 0210 	add.w	r2, r3, #16
 8001da4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001da8:	e884 0003 	stmia.w	r4, {r0, r1}
 8001dac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dae:	f7ff fac1 	bl	8001334 <agv_encoder_start>
  agv_encoder_start(encoder_B, &htim2, TIM2);
 8001db2:	4b6e      	ldr	r3, [pc, #440]	; (8001f6c <main+0x2d4>)
 8001db4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001db8:	9203      	str	r2, [sp, #12]
 8001dba:	4a6d      	ldr	r2, [pc, #436]	; (8001f70 <main+0x2d8>)
 8001dbc:	9202      	str	r2, [sp, #8]
 8001dbe:	466c      	mov	r4, sp
 8001dc0:	f103 0210 	add.w	r2, r3, #16
 8001dc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dc8:	e884 0003 	stmia.w	r4, {r0, r1}
 8001dcc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dce:	f7ff fab1 	bl	8001334 <agv_encoder_start>
  agv_encoder_start(encoder_C, &htim5, TIM5);
 8001dd2:	4b68      	ldr	r3, [pc, #416]	; (8001f74 <main+0x2dc>)
 8001dd4:	4a68      	ldr	r2, [pc, #416]	; (8001f78 <main+0x2e0>)
 8001dd6:	9203      	str	r2, [sp, #12]
 8001dd8:	4a68      	ldr	r2, [pc, #416]	; (8001f7c <main+0x2e4>)
 8001dda:	9202      	str	r2, [sp, #8]
 8001ddc:	466c      	mov	r4, sp
 8001dde:	f103 0210 	add.w	r2, r3, #16
 8001de2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001de6:	e884 0003 	stmia.w	r4, {r0, r1}
 8001dea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dec:	f7ff faa2 	bl	8001334 <agv_encoder_start>

  //+++++++++++++++++++++++++++++++++ ENCODER TO MOTOR ++++++++++++++++++++++++++++++++++++//
  motor_A.ENC = encoder_A;
 8001df0:	4b53      	ldr	r3, [pc, #332]	; (8001f40 <main+0x2a8>)
 8001df2:	4a5b      	ldr	r2, [pc, #364]	; (8001f60 <main+0x2c8>)
 8001df4:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8001df8:	4615      	mov	r5, r2
 8001dfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dfe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e02:	e884 0003 	stmia.w	r4, {r0, r1}
  motor_B.ENC = encoder_B;
 8001e06:	4b52      	ldr	r3, [pc, #328]	; (8001f50 <main+0x2b8>)
 8001e08:	4a58      	ldr	r2, [pc, #352]	; (8001f6c <main+0x2d4>)
 8001e0a:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8001e0e:	4615      	mov	r5, r2
 8001e10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e14:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e18:	e884 0003 	stmia.w	r4, {r0, r1}
  motor_C.ENC = encoder_C;
 8001e1c:	4b4d      	ldr	r3, [pc, #308]	; (8001f54 <main+0x2bc>)
 8001e1e:	4a55      	ldr	r2, [pc, #340]	; (8001f74 <main+0x2dc>)
 8001e20:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8001e24:	4615      	mov	r5, r2
 8001e26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e2a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e2e:	e884 0003 	stmia.w	r4, {r0, r1}

  // STOP ALL Motor
  agv_stop_all(motor_A, motor_B, motor_C);
 8001e32:	4e43      	ldr	r6, [pc, #268]	; (8001f40 <main+0x2a8>)
 8001e34:	4b47      	ldr	r3, [pc, #284]	; (8001f54 <main+0x2bc>)
 8001e36:	ac1a      	add	r4, sp, #104	; 0x68
 8001e38:	461d      	mov	r5, r3
 8001e3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001e4e:	4b40      	ldr	r3, [pc, #256]	; (8001f50 <main+0x2b8>)
 8001e50:	ac0b      	add	r4, sp, #44	; 0x2c
 8001e52:	461d      	mov	r5, r3
 8001e54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001e68:	466d      	mov	r5, sp
 8001e6a:	f106 0410 	add.w	r4, r6, #16
 8001e6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e76:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001e7a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001e7e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001e82:	f7ff f9d5 	bl	8001230 <agv_stop_all>

  //+++++++++++++++++++++++++++++++++ PID INITIALIZATION ++++++++++++++++++++++++++++++//
  // Y Axis
  pid_vy.Kp = 2.3;			pid_vy.Ki = 1;				pid_vy.Kd = -0.0006;
 8001e86:	4b3e      	ldr	r3, [pc, #248]	; (8001f80 <main+0x2e8>)
 8001e88:	4a3e      	ldr	r2, [pc, #248]	; (8001f84 <main+0x2ec>)
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	4b3c      	ldr	r3, [pc, #240]	; (8001f80 <main+0x2e8>)
 8001e8e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e92:	605a      	str	r2, [r3, #4]
 8001e94:	4b3a      	ldr	r3, [pc, #232]	; (8001f80 <main+0x2e8>)
 8001e96:	4a3c      	ldr	r2, [pc, #240]	; (8001f88 <main+0x2f0>)
 8001e98:	609a      	str	r2, [r3, #8]
  pid_vy.limMax = 500; 		pid_vy.limMin = -500; 		pid_vy.limMaxInt = 5; 	pid_vy.limMinInt = -5;
 8001e9a:	4b39      	ldr	r3, [pc, #228]	; (8001f80 <main+0x2e8>)
 8001e9c:	4a3b      	ldr	r2, [pc, #236]	; (8001f8c <main+0x2f4>)
 8001e9e:	615a      	str	r2, [r3, #20]
 8001ea0:	4b37      	ldr	r3, [pc, #220]	; (8001f80 <main+0x2e8>)
 8001ea2:	4a3b      	ldr	r2, [pc, #236]	; (8001f90 <main+0x2f8>)
 8001ea4:	611a      	str	r2, [r3, #16]
 8001ea6:	4b36      	ldr	r3, [pc, #216]	; (8001f80 <main+0x2e8>)
 8001ea8:	4a3a      	ldr	r2, [pc, #232]	; (8001f94 <main+0x2fc>)
 8001eaa:	61da      	str	r2, [r3, #28]
 8001eac:	4b34      	ldr	r3, [pc, #208]	; (8001f80 <main+0x2e8>)
 8001eae:	4a3a      	ldr	r2, [pc, #232]	; (8001f98 <main+0x300>)
 8001eb0:	619a      	str	r2, [r3, #24]
  pid_vy.T_sample = 0.01;
 8001eb2:	4b33      	ldr	r3, [pc, #204]	; (8001f80 <main+0x2e8>)
 8001eb4:	4a39      	ldr	r2, [pc, #228]	; (8001f9c <main+0x304>)
 8001eb6:	621a      	str	r2, [r3, #32]
  PIDController_Init(&pid_vy);
 8001eb8:	4831      	ldr	r0, [pc, #196]	; (8001f80 <main+0x2e8>)
 8001eba:	f7ff fc31 	bl	8001720 <PIDController_Init>

  // X Axis
  pid_vx.Kp = 2.3;			pid_vx.Ki = 1;				pid_vx.Kd = -0.0006;
 8001ebe:	4b38      	ldr	r3, [pc, #224]	; (8001fa0 <main+0x308>)
 8001ec0:	4a30      	ldr	r2, [pc, #192]	; (8001f84 <main+0x2ec>)
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	4b36      	ldr	r3, [pc, #216]	; (8001fa0 <main+0x308>)
 8001ec6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	4b34      	ldr	r3, [pc, #208]	; (8001fa0 <main+0x308>)
 8001ece:	4a2e      	ldr	r2, [pc, #184]	; (8001f88 <main+0x2f0>)
 8001ed0:	609a      	str	r2, [r3, #8]
  pid_vx.limMax = 500; 		pid_vx.limMin = -500; 		pid_vx.limMaxInt = 5; 	pid_vx.limMinInt = -5;
 8001ed2:	4b33      	ldr	r3, [pc, #204]	; (8001fa0 <main+0x308>)
 8001ed4:	4a2d      	ldr	r2, [pc, #180]	; (8001f8c <main+0x2f4>)
 8001ed6:	615a      	str	r2, [r3, #20]
 8001ed8:	4b31      	ldr	r3, [pc, #196]	; (8001fa0 <main+0x308>)
 8001eda:	4a2d      	ldr	r2, [pc, #180]	; (8001f90 <main+0x2f8>)
 8001edc:	611a      	str	r2, [r3, #16]
 8001ede:	4b30      	ldr	r3, [pc, #192]	; (8001fa0 <main+0x308>)
 8001ee0:	4a2c      	ldr	r2, [pc, #176]	; (8001f94 <main+0x2fc>)
 8001ee2:	61da      	str	r2, [r3, #28]
 8001ee4:	4b2e      	ldr	r3, [pc, #184]	; (8001fa0 <main+0x308>)
 8001ee6:	4a2c      	ldr	r2, [pc, #176]	; (8001f98 <main+0x300>)
 8001ee8:	619a      	str	r2, [r3, #24]
  pid_vx.T_sample = 0.01;
 8001eea:	4b2d      	ldr	r3, [pc, #180]	; (8001fa0 <main+0x308>)
 8001eec:	4a2b      	ldr	r2, [pc, #172]	; (8001f9c <main+0x304>)
 8001eee:	621a      	str	r2, [r3, #32]
  PIDController_Init(&pid_vx);
 8001ef0:	482b      	ldr	r0, [pc, #172]	; (8001fa0 <main+0x308>)
 8001ef2:	f7ff fc15 	bl	8001720 <PIDController_Init>

  // T Axis
  pid_vt.Kp = 2.3;			pid_vt.Ki = 1;				pid_vt.Kd = -0.0006;
 8001ef6:	4b2b      	ldr	r3, [pc, #172]	; (8001fa4 <main+0x30c>)
 8001ef8:	4a22      	ldr	r2, [pc, #136]	; (8001f84 <main+0x2ec>)
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	4b29      	ldr	r3, [pc, #164]	; (8001fa4 <main+0x30c>)
 8001efe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	4b27      	ldr	r3, [pc, #156]	; (8001fa4 <main+0x30c>)
 8001f06:	4a20      	ldr	r2, [pc, #128]	; (8001f88 <main+0x2f0>)
 8001f08:	609a      	str	r2, [r3, #8]
  pid_vt.limMax = 500; 		pid_vt.limMin = -500; 		pid_vt.limMaxInt = 5; 	pid_vt.limMinInt = -5;
 8001f0a:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <main+0x30c>)
 8001f0c:	4a1f      	ldr	r2, [pc, #124]	; (8001f8c <main+0x2f4>)
 8001f0e:	615a      	str	r2, [r3, #20]
 8001f10:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <main+0x30c>)
 8001f12:	4a1f      	ldr	r2, [pc, #124]	; (8001f90 <main+0x2f8>)
 8001f14:	611a      	str	r2, [r3, #16]
 8001f16:	4b23      	ldr	r3, [pc, #140]	; (8001fa4 <main+0x30c>)
 8001f18:	4a1e      	ldr	r2, [pc, #120]	; (8001f94 <main+0x2fc>)
 8001f1a:	61da      	str	r2, [r3, #28]
 8001f1c:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <main+0x30c>)
 8001f1e:	4a1e      	ldr	r2, [pc, #120]	; (8001f98 <main+0x300>)
 8001f20:	619a      	str	r2, [r3, #24]
  pid_vt.T_sample = 0.01;
 8001f22:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <main+0x30c>)
 8001f24:	4a1d      	ldr	r2, [pc, #116]	; (8001f9c <main+0x304>)
 8001f26:	621a      	str	r2, [r3, #32]
  PIDController_Init(&pid_vt);
 8001f28:	481e      	ldr	r0, [pc, #120]	; (8001fa4 <main+0x30c>)
 8001f2a:	f7ff fbf9 	bl	8001720 <PIDController_Init>

  // Yaw Direction
  pid_yaw.Kp = 1;			pid_yaw.Ki = 1;				pid_yaw.Kd = -0.0006;
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <main+0x310>)
 8001f30:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	4b1c      	ldr	r3, [pc, #112]	; (8001fa8 <main+0x310>)
 8001f38:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	e035      	b.n	8001fac <main+0x314>
 8001f40:	200005c4 	.word	0x200005c4
 8001f44:	2000017c 	.word	0x2000017c
 8001f48:	40000400 	.word	0x40000400
 8001f4c:	40020400 	.word	0x40020400
 8001f50:	20000600 	.word	0x20000600
 8001f54:	2000063c 	.word	0x2000063c
 8001f58:	20000254 	.word	0x20000254
 8001f5c:	40014000 	.word	0x40014000
 8001f60:	20000678 	.word	0x20000678
 8001f64:	40010000 	.word	0x40010000
 8001f68:	200000ec 	.word	0x200000ec
 8001f6c:	20000690 	.word	0x20000690
 8001f70:	20000134 	.word	0x20000134
 8001f74:	200006a8 	.word	0x200006a8
 8001f78:	40000c00 	.word	0x40000c00
 8001f7c:	2000020c 	.word	0x2000020c
 8001f80:	200004b0 	.word	0x200004b0
 8001f84:	40133333 	.word	0x40133333
 8001f88:	ba1d4952 	.word	0xba1d4952
 8001f8c:	43fa0000 	.word	0x43fa0000
 8001f90:	c3fa0000 	.word	0xc3fa0000
 8001f94:	40a00000 	.word	0x40a00000
 8001f98:	c0a00000 	.word	0xc0a00000
 8001f9c:	3c23d70a 	.word	0x3c23d70a
 8001fa0:	200004e8 	.word	0x200004e8
 8001fa4:	20000520 	.word	0x20000520
 8001fa8:	20000558 	.word	0x20000558
 8001fac:	4b14      	ldr	r3, [pc, #80]	; (8002000 <main+0x368>)
 8001fae:	4a15      	ldr	r2, [pc, #84]	; (8002004 <main+0x36c>)
 8001fb0:	609a      	str	r2, [r3, #8]
  pid_yaw.limMax = 180; 	pid_yaw.limMin = -180; 		pid_yaw.limMaxInt = 5; 	pid_yaw.limMinInt = -5;
 8001fb2:	4b13      	ldr	r3, [pc, #76]	; (8002000 <main+0x368>)
 8001fb4:	4a14      	ldr	r2, [pc, #80]	; (8002008 <main+0x370>)
 8001fb6:	615a      	str	r2, [r3, #20]
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <main+0x368>)
 8001fba:	4a14      	ldr	r2, [pc, #80]	; (800200c <main+0x374>)
 8001fbc:	611a      	str	r2, [r3, #16]
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <main+0x368>)
 8001fc0:	4a13      	ldr	r2, [pc, #76]	; (8002010 <main+0x378>)
 8001fc2:	61da      	str	r2, [r3, #28]
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <main+0x368>)
 8001fc6:	4a13      	ldr	r2, [pc, #76]	; (8002014 <main+0x37c>)
 8001fc8:	619a      	str	r2, [r3, #24]
  pid_yaw.T_sample = 0.01;
 8001fca:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <main+0x368>)
 8001fcc:	4a12      	ldr	r2, [pc, #72]	; (8002018 <main+0x380>)
 8001fce:	621a      	str	r2, [r3, #32]
  PIDController_Init(&pid_yaw);
 8001fd0:	480b      	ldr	r0, [pc, #44]	; (8002000 <main+0x368>)
 8001fd2:	f7ff fba5 	bl	8001720 <PIDController_Init>

  //+++++++++++++++++++++++++++++++++ Bluetooth INITIALIZATION ++++++++++++++++++++++++++++++//
  HAL_UART_Receive_DMA(&huart1, rxBluetooth, sizeof(rxBluetooth));
 8001fd6:	220f      	movs	r2, #15
 8001fd8:	4910      	ldr	r1, [pc, #64]	; (800201c <main+0x384>)
 8001fda:	4811      	ldr	r0, [pc, #68]	; (8002020 <main+0x388>)
 8001fdc:	f003 fdaa 	bl	8005b34 <HAL_UART_Receive_DMA>

  //+++++++++++++++++++++++++++++++++ BNO08X INITIALIZATION ++++++++++++++++++++++++++++++//
  BNO08X_Init(&huart6);
 8001fe0:	4810      	ldr	r0, [pc, #64]	; (8002024 <main+0x38c>)
 8001fe2:	f7fe ffb7 	bl	8000f54 <BNO08X_Init>

  // Set Starting Yaw Point
  while(is_started == 0);
 8001fe6:	bf00      	nop
 8001fe8:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <main+0x390>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0fb      	beq.n	8001fe8 <main+0x350>
  BNO08X_Set_Init_Yaw(&BNO08X_sensor);
 8001ff0:	480e      	ldr	r0, [pc, #56]	; (800202c <main+0x394>)
 8001ff2:	f7fe ffc9 	bl	8000f88 <BNO08X_Set_Init_Yaw>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Set Heading
	  handle_heading(0,5);
 8001ff6:	2105      	movs	r1, #5
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	f000 fc25 	bl	8002848 <handle_heading>
 8001ffe:	e7fa      	b.n	8001ff6 <main+0x35e>
 8002000:	20000558 	.word	0x20000558
 8002004:	ba1d4952 	.word	0xba1d4952
 8002008:	43340000 	.word	0x43340000
 800200c:	c3340000 	.word	0xc3340000
 8002010:	40a00000 	.word	0x40a00000
 8002014:	c0a00000 	.word	0xc0a00000
 8002018:	3c23d70a 	.word	0x3c23d70a
 800201c:	20000590 	.word	0x20000590
 8002020:	2000032c 	.word	0x2000032c
 8002024:	20000374 	.word	0x20000374
 8002028:	200005c0 	.word	0x200005c0
 800202c:	200005a0 	.word	0x200005a0

08002030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b094      	sub	sp, #80	; 0x50
 8002034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002036:	f107 0320 	add.w	r3, r7, #32
 800203a:	2230      	movs	r2, #48	; 0x30
 800203c:	2100      	movs	r1, #0
 800203e:	4618      	mov	r0, r3
 8002040:	f004 febc 	bl	8006dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002044:	f107 030c 	add.w	r3, r7, #12
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002054:	2300      	movs	r3, #0
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	4b27      	ldr	r3, [pc, #156]	; (80020f8 <SystemClock_Config+0xc8>)
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	4a26      	ldr	r2, [pc, #152]	; (80020f8 <SystemClock_Config+0xc8>)
 800205e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002062:	6413      	str	r3, [r2, #64]	; 0x40
 8002064:	4b24      	ldr	r3, [pc, #144]	; (80020f8 <SystemClock_Config+0xc8>)
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002070:	2300      	movs	r3, #0
 8002072:	607b      	str	r3, [r7, #4]
 8002074:	4b21      	ldr	r3, [pc, #132]	; (80020fc <SystemClock_Config+0xcc>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a20      	ldr	r2, [pc, #128]	; (80020fc <SystemClock_Config+0xcc>)
 800207a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800207e:	6013      	str	r3, [r2, #0]
 8002080:	4b1e      	ldr	r3, [pc, #120]	; (80020fc <SystemClock_Config+0xcc>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002088:	607b      	str	r3, [r7, #4]
 800208a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800208c:	2302      	movs	r3, #2
 800208e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002090:	2301      	movs	r3, #1
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002094:	2310      	movs	r3, #16
 8002096:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002098:	2302      	movs	r3, #2
 800209a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800209c:	2300      	movs	r3, #0
 800209e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80020a0:	2308      	movs	r3, #8
 80020a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80020a4:	2364      	movs	r3, #100	; 0x64
 80020a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020a8:	2302      	movs	r3, #2
 80020aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80020ac:	2304      	movs	r3, #4
 80020ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020b0:	f107 0320 	add.w	r3, r7, #32
 80020b4:	4618      	mov	r0, r3
 80020b6:	f001 ffed 	bl	8004094 <HAL_RCC_OscConfig>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80020c0:	f000 fcc4 	bl	8002a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020c4:	230f      	movs	r3, #15
 80020c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020c8:	2302      	movs	r3, #2
 80020ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80020da:	f107 030c 	add.w	r3, r7, #12
 80020de:	2103      	movs	r1, #3
 80020e0:	4618      	mov	r0, r3
 80020e2:	f002 fa4f 	bl	8004584 <HAL_RCC_ClockConfig>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80020ec:	f000 fcae 	bl	8002a4c <Error_Handler>
  }
}
 80020f0:	bf00      	nop
 80020f2:	3750      	adds	r7, #80	; 0x50
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40007000 	.word	0x40007000

08002100 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08c      	sub	sp, #48	; 0x30
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002106:	f107 030c 	add.w	r3, r7, #12
 800210a:	2224      	movs	r2, #36	; 0x24
 800210c:	2100      	movs	r1, #0
 800210e:	4618      	mov	r0, r3
 8002110:	f004 fe54 	bl	8006dbc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002114:	1d3b      	adds	r3, r7, #4
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800211c:	4b22      	ldr	r3, [pc, #136]	; (80021a8 <MX_TIM1_Init+0xa8>)
 800211e:	4a23      	ldr	r2, [pc, #140]	; (80021ac <MX_TIM1_Init+0xac>)
 8002120:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002122:	4b21      	ldr	r3, [pc, #132]	; (80021a8 <MX_TIM1_Init+0xa8>)
 8002124:	2200      	movs	r2, #0
 8002126:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002128:	4b1f      	ldr	r3, [pc, #124]	; (80021a8 <MX_TIM1_Init+0xa8>)
 800212a:	2200      	movs	r2, #0
 800212c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800212e:	4b1e      	ldr	r3, [pc, #120]	; (80021a8 <MX_TIM1_Init+0xa8>)
 8002130:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002134:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002136:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <MX_TIM1_Init+0xa8>)
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800213c:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <MX_TIM1_Init+0xa8>)
 800213e:	2200      	movs	r2, #0
 8002140:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002142:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <MX_TIM1_Init+0xa8>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002148:	2301      	movs	r3, #1
 800214a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800214c:	2300      	movs	r3, #0
 800214e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002150:	2301      	movs	r3, #1
 8002152:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002154:	2300      	movs	r3, #0
 8002156:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800215c:	2300      	movs	r3, #0
 800215e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002160:	2301      	movs	r3, #1
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002164:	2300      	movs	r3, #0
 8002166:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800216c:	f107 030c 	add.w	r3, r7, #12
 8002170:	4619      	mov	r1, r3
 8002172:	480d      	ldr	r0, [pc, #52]	; (80021a8 <MX_TIM1_Init+0xa8>)
 8002174:	f002 fd3e 	bl	8004bf4 <HAL_TIM_Encoder_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800217e:	f000 fc65 	bl	8002a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800218a:	1d3b      	adds	r3, r7, #4
 800218c:	4619      	mov	r1, r3
 800218e:	4806      	ldr	r0, [pc, #24]	; (80021a8 <MX_TIM1_Init+0xa8>)
 8002190:	f003 fbfe 	bl	8005990 <HAL_TIMEx_MasterConfigSynchronization>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800219a:	f000 fc57 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800219e:	bf00      	nop
 80021a0:	3730      	adds	r7, #48	; 0x30
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	200000ec 	.word	0x200000ec
 80021ac:	40010000 	.word	0x40010000

080021b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08c      	sub	sp, #48	; 0x30
 80021b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80021b6:	f107 030c 	add.w	r3, r7, #12
 80021ba:	2224      	movs	r2, #36	; 0x24
 80021bc:	2100      	movs	r1, #0
 80021be:	4618      	mov	r0, r3
 80021c0:	f004 fdfc 	bl	8006dbc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c4:	1d3b      	adds	r3, r7, #4
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021cc:	4b21      	ldr	r3, [pc, #132]	; (8002254 <MX_TIM2_Init+0xa4>)
 80021ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021d4:	4b1f      	ldr	r3, [pc, #124]	; (8002254 <MX_TIM2_Init+0xa4>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021da:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <MX_TIM2_Init+0xa4>)
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80021e0:	4b1c      	ldr	r3, [pc, #112]	; (8002254 <MX_TIM2_Init+0xa4>)
 80021e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021e8:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <MX_TIM2_Init+0xa4>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ee:	4b19      	ldr	r3, [pc, #100]	; (8002254 <MX_TIM2_Init+0xa4>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80021f4:	2301      	movs	r3, #1
 80021f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021f8:	2300      	movs	r3, #0
 80021fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021fc:	2301      	movs	r3, #1
 80021fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002200:	2300      	movs	r3, #0
 8002202:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002208:	2300      	movs	r3, #0
 800220a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800220c:	2301      	movs	r3, #1
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002210:	2300      	movs	r3, #0
 8002212:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002218:	f107 030c 	add.w	r3, r7, #12
 800221c:	4619      	mov	r1, r3
 800221e:	480d      	ldr	r0, [pc, #52]	; (8002254 <MX_TIM2_Init+0xa4>)
 8002220:	f002 fce8 	bl	8004bf4 <HAL_TIM_Encoder_Init>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800222a:	f000 fc0f 	bl	8002a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800222e:	2300      	movs	r3, #0
 8002230:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002236:	1d3b      	adds	r3, r7, #4
 8002238:	4619      	mov	r1, r3
 800223a:	4806      	ldr	r0, [pc, #24]	; (8002254 <MX_TIM2_Init+0xa4>)
 800223c:	f003 fba8 	bl	8005990 <HAL_TIMEx_MasterConfigSynchronization>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002246:	f000 fc01 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800224a:	bf00      	nop
 800224c:	3730      	adds	r7, #48	; 0x30
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000134 	.word	0x20000134

08002258 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08e      	sub	sp, #56	; 0x38
 800225c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800225e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	605a      	str	r2, [r3, #4]
 8002268:	609a      	str	r2, [r3, #8]
 800226a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800226c:	f107 0320 	add.w	r3, r7, #32
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
 8002284:	615a      	str	r2, [r3, #20]
 8002286:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002288:	4b3d      	ldr	r3, [pc, #244]	; (8002380 <MX_TIM3_Init+0x128>)
 800228a:	4a3e      	ldr	r2, [pc, #248]	; (8002384 <MX_TIM3_Init+0x12c>)
 800228c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 800228e:	4b3c      	ldr	r3, [pc, #240]	; (8002380 <MX_TIM3_Init+0x128>)
 8002290:	2263      	movs	r2, #99	; 0x63
 8002292:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002294:	4b3a      	ldr	r3, [pc, #232]	; (8002380 <MX_TIM3_Init+0x128>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800229a:	4b39      	ldr	r3, [pc, #228]	; (8002380 <MX_TIM3_Init+0x128>)
 800229c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a2:	4b37      	ldr	r3, [pc, #220]	; (8002380 <MX_TIM3_Init+0x128>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a8:	4b35      	ldr	r3, [pc, #212]	; (8002380 <MX_TIM3_Init+0x128>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022ae:	4834      	ldr	r0, [pc, #208]	; (8002380 <MX_TIM3_Init+0x128>)
 80022b0:	f002 fb48 	bl	8004944 <HAL_TIM_Base_Init>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80022ba:	f000 fbc7 	bl	8002a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022c8:	4619      	mov	r1, r3
 80022ca:	482d      	ldr	r0, [pc, #180]	; (8002380 <MX_TIM3_Init+0x128>)
 80022cc:	f002 ff98 	bl	8005200 <HAL_TIM_ConfigClockSource>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80022d6:	f000 fbb9 	bl	8002a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022da:	4829      	ldr	r0, [pc, #164]	; (8002380 <MX_TIM3_Init+0x128>)
 80022dc:	f002 fb81 	bl	80049e2 <HAL_TIM_PWM_Init>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80022e6:	f000 fbb1 	bl	8002a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ea:	2300      	movs	r3, #0
 80022ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ee:	2300      	movs	r3, #0
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022f2:	f107 0320 	add.w	r3, r7, #32
 80022f6:	4619      	mov	r1, r3
 80022f8:	4821      	ldr	r0, [pc, #132]	; (8002380 <MX_TIM3_Init+0x128>)
 80022fa:	f003 fb49 	bl	8005990 <HAL_TIMEx_MasterConfigSynchronization>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002304:	f000 fba2 	bl	8002a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002308:	2360      	movs	r3, #96	; 0x60
 800230a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002310:	2300      	movs	r3, #0
 8002312:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002318:	1d3b      	adds	r3, r7, #4
 800231a:	2200      	movs	r2, #0
 800231c:	4619      	mov	r1, r3
 800231e:	4818      	ldr	r0, [pc, #96]	; (8002380 <MX_TIM3_Init+0x128>)
 8002320:	f002 feac 	bl	800507c <HAL_TIM_PWM_ConfigChannel>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800232a:	f000 fb8f 	bl	8002a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800232e:	1d3b      	adds	r3, r7, #4
 8002330:	2204      	movs	r2, #4
 8002332:	4619      	mov	r1, r3
 8002334:	4812      	ldr	r0, [pc, #72]	; (8002380 <MX_TIM3_Init+0x128>)
 8002336:	f002 fea1 	bl	800507c <HAL_TIM_PWM_ConfigChannel>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002340:	f000 fb84 	bl	8002a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002344:	1d3b      	adds	r3, r7, #4
 8002346:	2208      	movs	r2, #8
 8002348:	4619      	mov	r1, r3
 800234a:	480d      	ldr	r0, [pc, #52]	; (8002380 <MX_TIM3_Init+0x128>)
 800234c:	f002 fe96 	bl	800507c <HAL_TIM_PWM_ConfigChannel>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002356:	f000 fb79 	bl	8002a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800235a:	1d3b      	adds	r3, r7, #4
 800235c:	220c      	movs	r2, #12
 800235e:	4619      	mov	r1, r3
 8002360:	4807      	ldr	r0, [pc, #28]	; (8002380 <MX_TIM3_Init+0x128>)
 8002362:	f002 fe8b 	bl	800507c <HAL_TIM_PWM_ConfigChannel>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 800236c:	f000 fb6e 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002370:	4803      	ldr	r0, [pc, #12]	; (8002380 <MX_TIM3_Init+0x128>)
 8002372:	f000 fd1f 	bl	8002db4 <HAL_TIM_MspPostInit>

}
 8002376:	bf00      	nop
 8002378:	3738      	adds	r7, #56	; 0x38
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	2000017c 	.word	0x2000017c
 8002384:	40000400 	.word	0x40000400

08002388 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08c      	sub	sp, #48	; 0x30
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800238e:	f107 030c 	add.w	r3, r7, #12
 8002392:	2224      	movs	r2, #36	; 0x24
 8002394:	2100      	movs	r1, #0
 8002396:	4618      	mov	r0, r3
 8002398:	f004 fd10 	bl	8006dbc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800239c:	1d3b      	adds	r3, r7, #4
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023a4:	4b20      	ldr	r3, [pc, #128]	; (8002428 <MX_TIM4_Init+0xa0>)
 80023a6:	4a21      	ldr	r2, [pc, #132]	; (800242c <MX_TIM4_Init+0xa4>)
 80023a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80023aa:	4b1f      	ldr	r3, [pc, #124]	; (8002428 <MX_TIM4_Init+0xa0>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b0:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <MX_TIM4_Init+0xa0>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80023b6:	4b1c      	ldr	r3, [pc, #112]	; (8002428 <MX_TIM4_Init+0xa0>)
 80023b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023be:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <MX_TIM4_Init+0xa0>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c4:	4b18      	ldr	r3, [pc, #96]	; (8002428 <MX_TIM4_Init+0xa0>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80023ca:	2301      	movs	r3, #1
 80023cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023d2:	2301      	movs	r3, #1
 80023d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023de:	2300      	movs	r3, #0
 80023e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023e2:	2301      	movs	r3, #1
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023e6:	2300      	movs	r3, #0
 80023e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80023ea:	2300      	movs	r3, #0
 80023ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80023ee:	f107 030c 	add.w	r3, r7, #12
 80023f2:	4619      	mov	r1, r3
 80023f4:	480c      	ldr	r0, [pc, #48]	; (8002428 <MX_TIM4_Init+0xa0>)
 80023f6:	f002 fbfd 	bl	8004bf4 <HAL_TIM_Encoder_Init>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002400:	f000 fb24 	bl	8002a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002404:	2300      	movs	r3, #0
 8002406:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002408:	2300      	movs	r3, #0
 800240a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800240c:	1d3b      	adds	r3, r7, #4
 800240e:	4619      	mov	r1, r3
 8002410:	4805      	ldr	r0, [pc, #20]	; (8002428 <MX_TIM4_Init+0xa0>)
 8002412:	f003 fabd 	bl	8005990 <HAL_TIMEx_MasterConfigSynchronization>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800241c:	f000 fb16 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002420:	bf00      	nop
 8002422:	3730      	adds	r7, #48	; 0x30
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	200001c4 	.word	0x200001c4
 800242c:	40000800 	.word	0x40000800

08002430 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08c      	sub	sp, #48	; 0x30
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002436:	f107 030c 	add.w	r3, r7, #12
 800243a:	2224      	movs	r2, #36	; 0x24
 800243c:	2100      	movs	r1, #0
 800243e:	4618      	mov	r0, r3
 8002440:	f004 fcbc 	bl	8006dbc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002444:	1d3b      	adds	r3, r7, #4
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800244c:	4b20      	ldr	r3, [pc, #128]	; (80024d0 <MX_TIM5_Init+0xa0>)
 800244e:	4a21      	ldr	r2, [pc, #132]	; (80024d4 <MX_TIM5_Init+0xa4>)
 8002450:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002452:	4b1f      	ldr	r3, [pc, #124]	; (80024d0 <MX_TIM5_Init+0xa0>)
 8002454:	2200      	movs	r2, #0
 8002456:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002458:	4b1d      	ldr	r3, [pc, #116]	; (80024d0 <MX_TIM5_Init+0xa0>)
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800245e:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <MX_TIM5_Init+0xa0>)
 8002460:	f04f 32ff 	mov.w	r2, #4294967295
 8002464:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002466:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <MX_TIM5_Init+0xa0>)
 8002468:	2200      	movs	r2, #0
 800246a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800246c:	4b18      	ldr	r3, [pc, #96]	; (80024d0 <MX_TIM5_Init+0xa0>)
 800246e:	2200      	movs	r2, #0
 8002470:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002472:	2301      	movs	r3, #1
 8002474:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002476:	2300      	movs	r3, #0
 8002478:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800247a:	2301      	movs	r3, #1
 800247c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800247e:	2300      	movs	r3, #0
 8002480:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002486:	2300      	movs	r3, #0
 8002488:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800248a:	2301      	movs	r3, #1
 800248c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800248e:	2300      	movs	r3, #0
 8002490:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002496:	f107 030c 	add.w	r3, r7, #12
 800249a:	4619      	mov	r1, r3
 800249c:	480c      	ldr	r0, [pc, #48]	; (80024d0 <MX_TIM5_Init+0xa0>)
 800249e:	f002 fba9 	bl	8004bf4 <HAL_TIM_Encoder_Init>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80024a8:	f000 fad0 	bl	8002a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ac:	2300      	movs	r3, #0
 80024ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80024b4:	1d3b      	adds	r3, r7, #4
 80024b6:	4619      	mov	r1, r3
 80024b8:	4805      	ldr	r0, [pc, #20]	; (80024d0 <MX_TIM5_Init+0xa0>)
 80024ba:	f003 fa69 	bl	8005990 <HAL_TIMEx_MasterConfigSynchronization>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80024c4:	f000 fac2 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80024c8:	bf00      	nop
 80024ca:	3730      	adds	r7, #48	; 0x30
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	2000020c 	.word	0x2000020c
 80024d4:	40000c00 	.word	0x40000c00

080024d8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08c      	sub	sp, #48	; 0x30
 80024dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024de:	f107 0320 	add.w	r3, r7, #32
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	609a      	str	r2, [r3, #8]
 80024ea:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024ec:	1d3b      	adds	r3, r7, #4
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	605a      	str	r2, [r3, #4]
 80024f4:	609a      	str	r2, [r3, #8]
 80024f6:	60da      	str	r2, [r3, #12]
 80024f8:	611a      	str	r2, [r3, #16]
 80024fa:	615a      	str	r2, [r3, #20]
 80024fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80024fe:	4b2b      	ldr	r3, [pc, #172]	; (80025ac <MX_TIM9_Init+0xd4>)
 8002500:	4a2b      	ldr	r2, [pc, #172]	; (80025b0 <MX_TIM9_Init+0xd8>)
 8002502:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 100-1;
 8002504:	4b29      	ldr	r3, [pc, #164]	; (80025ac <MX_TIM9_Init+0xd4>)
 8002506:	2263      	movs	r2, #99	; 0x63
 8002508:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800250a:	4b28      	ldr	r3, [pc, #160]	; (80025ac <MX_TIM9_Init+0xd4>)
 800250c:	2200      	movs	r2, #0
 800250e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8002510:	4b26      	ldr	r3, [pc, #152]	; (80025ac <MX_TIM9_Init+0xd4>)
 8002512:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002516:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002518:	4b24      	ldr	r3, [pc, #144]	; (80025ac <MX_TIM9_Init+0xd4>)
 800251a:	2200      	movs	r2, #0
 800251c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800251e:	4b23      	ldr	r3, [pc, #140]	; (80025ac <MX_TIM9_Init+0xd4>)
 8002520:	2200      	movs	r2, #0
 8002522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002524:	4821      	ldr	r0, [pc, #132]	; (80025ac <MX_TIM9_Init+0xd4>)
 8002526:	f002 fa0d 	bl	8004944 <HAL_TIM_Base_Init>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8002530:	f000 fa8c 	bl	8002a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002538:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800253a:	f107 0320 	add.w	r3, r7, #32
 800253e:	4619      	mov	r1, r3
 8002540:	481a      	ldr	r0, [pc, #104]	; (80025ac <MX_TIM9_Init+0xd4>)
 8002542:	f002 fe5d 	bl	8005200 <HAL_TIM_ConfigClockSource>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 800254c:	f000 fa7e 	bl	8002a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002550:	4816      	ldr	r0, [pc, #88]	; (80025ac <MX_TIM9_Init+0xd4>)
 8002552:	f002 fa46 	bl	80049e2 <HAL_TIM_PWM_Init>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 800255c:	f000 fa76 	bl	8002a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002560:	2360      	movs	r3, #96	; 0x60
 8002562:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002568:	2300      	movs	r3, #0
 800256a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002570:	1d3b      	adds	r3, r7, #4
 8002572:	2200      	movs	r2, #0
 8002574:	4619      	mov	r1, r3
 8002576:	480d      	ldr	r0, [pc, #52]	; (80025ac <MX_TIM9_Init+0xd4>)
 8002578:	f002 fd80 	bl	800507c <HAL_TIM_PWM_ConfigChannel>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8002582:	f000 fa63 	bl	8002a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002586:	1d3b      	adds	r3, r7, #4
 8002588:	2204      	movs	r2, #4
 800258a:	4619      	mov	r1, r3
 800258c:	4807      	ldr	r0, [pc, #28]	; (80025ac <MX_TIM9_Init+0xd4>)
 800258e:	f002 fd75 	bl	800507c <HAL_TIM_PWM_ConfigChannel>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 8002598:	f000 fa58 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800259c:	4803      	ldr	r0, [pc, #12]	; (80025ac <MX_TIM9_Init+0xd4>)
 800259e:	f000 fc09 	bl	8002db4 <HAL_TIM_MspPostInit>

}
 80025a2:	bf00      	nop
 80025a4:	3730      	adds	r7, #48	; 0x30
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20000254 	.word	0x20000254
 80025b0:	40014000 	.word	0x40014000

080025b4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80025b8:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <MX_TIM10_Init+0x40>)
 80025ba:	4a0f      	ldr	r2, [pc, #60]	; (80025f8 <MX_TIM10_Init+0x44>)
 80025bc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 100-1;
 80025be:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <MX_TIM10_Init+0x40>)
 80025c0:	2263      	movs	r2, #99	; 0x63
 80025c2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c4:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <MX_TIM10_Init+0x40>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 80025ca:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <MX_TIM10_Init+0x40>)
 80025cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025d0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d2:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <MX_TIM10_Init+0x40>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025d8:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <MX_TIM10_Init+0x40>)
 80025da:	2200      	movs	r2, #0
 80025dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80025de:	4805      	ldr	r0, [pc, #20]	; (80025f4 <MX_TIM10_Init+0x40>)
 80025e0:	f002 f9b0 	bl	8004944 <HAL_TIM_Base_Init>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80025ea:	f000 fa2f 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	2000029c 	.word	0x2000029c
 80025f8:	40014400 	.word	0x40014400

080025fc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002600:	4b0e      	ldr	r3, [pc, #56]	; (800263c <MX_TIM11_Init+0x40>)
 8002602:	4a0f      	ldr	r2, [pc, #60]	; (8002640 <MX_TIM11_Init+0x44>)
 8002604:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 8002606:	4b0d      	ldr	r3, [pc, #52]	; (800263c <MX_TIM11_Init+0x40>)
 8002608:	2263      	movs	r2, #99	; 0x63
 800260a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <MX_TIM11_Init+0x40>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8002612:	4b0a      	ldr	r3, [pc, #40]	; (800263c <MX_TIM11_Init+0x40>)
 8002614:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002618:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800261a:	4b08      	ldr	r3, [pc, #32]	; (800263c <MX_TIM11_Init+0x40>)
 800261c:	2200      	movs	r2, #0
 800261e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <MX_TIM11_Init+0x40>)
 8002622:	2200      	movs	r2, #0
 8002624:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002626:	4805      	ldr	r0, [pc, #20]	; (800263c <MX_TIM11_Init+0x40>)
 8002628:	f002 f98c 	bl	8004944 <HAL_TIM_Base_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002632:	f000 fa0b 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	200002e4 	.word	0x200002e4
 8002640:	40014800 	.word	0x40014800

08002644 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002648:	4b11      	ldr	r3, [pc, #68]	; (8002690 <MX_USART1_UART_Init+0x4c>)
 800264a:	4a12      	ldr	r2, [pc, #72]	; (8002694 <MX_USART1_UART_Init+0x50>)
 800264c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800264e:	4b10      	ldr	r3, [pc, #64]	; (8002690 <MX_USART1_UART_Init+0x4c>)
 8002650:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002654:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002656:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <MX_USART1_UART_Init+0x4c>)
 8002658:	2200      	movs	r2, #0
 800265a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800265c:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <MX_USART1_UART_Init+0x4c>)
 800265e:	2200      	movs	r2, #0
 8002660:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002662:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <MX_USART1_UART_Init+0x4c>)
 8002664:	2200      	movs	r2, #0
 8002666:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002668:	4b09      	ldr	r3, [pc, #36]	; (8002690 <MX_USART1_UART_Init+0x4c>)
 800266a:	220c      	movs	r2, #12
 800266c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800266e:	4b08      	ldr	r3, [pc, #32]	; (8002690 <MX_USART1_UART_Init+0x4c>)
 8002670:	2200      	movs	r2, #0
 8002672:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <MX_USART1_UART_Init+0x4c>)
 8002676:	2200      	movs	r2, #0
 8002678:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800267a:	4805      	ldr	r0, [pc, #20]	; (8002690 <MX_USART1_UART_Init+0x4c>)
 800267c:	f003 fa0a 	bl	8005a94 <HAL_UART_Init>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002686:	f000 f9e1 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	2000032c 	.word	0x2000032c
 8002694:	40011000 	.word	0x40011000

08002698 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800269c:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <MX_USART6_UART_Init+0x4c>)
 800269e:	4a12      	ldr	r2, [pc, #72]	; (80026e8 <MX_USART6_UART_Init+0x50>)
 80026a0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80026a2:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <MX_USART6_UART_Init+0x4c>)
 80026a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026a8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80026aa:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <MX_USART6_UART_Init+0x4c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80026b0:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <MX_USART6_UART_Init+0x4c>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80026b6:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <MX_USART6_UART_Init+0x4c>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80026bc:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <MX_USART6_UART_Init+0x4c>)
 80026be:	220c      	movs	r2, #12
 80026c0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026c2:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <MX_USART6_UART_Init+0x4c>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80026c8:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <MX_USART6_UART_Init+0x4c>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80026ce:	4805      	ldr	r0, [pc, #20]	; (80026e4 <MX_USART6_UART_Init+0x4c>)
 80026d0:	f003 f9e0 	bl	8005a94 <HAL_UART_Init>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80026da:	f000 f9b7 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000374 	.word	0x20000374
 80026e8:	40011400 	.word	0x40011400

080026ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <MX_DMA_Init+0x3c>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	4a0b      	ldr	r2, [pc, #44]	; (8002728 <MX_DMA_Init+0x3c>)
 80026fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002700:	6313      	str	r3, [r2, #48]	; 0x30
 8002702:	4b09      	ldr	r3, [pc, #36]	; (8002728 <MX_DMA_Init+0x3c>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800270e:	2200      	movs	r2, #0
 8002710:	2100      	movs	r1, #0
 8002712:	203a      	movs	r0, #58	; 0x3a
 8002714:	f000 fecd 	bl	80034b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002718:	203a      	movs	r0, #58	; 0x3a
 800271a:	f000 fee6 	bl	80034ea <HAL_NVIC_EnableIRQ>

}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40023800 	.word	0x40023800

0800272c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08a      	sub	sp, #40	; 0x28
 8002730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002732:	f107 0314 	add.w	r3, r7, #20
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	605a      	str	r2, [r3, #4]
 800273c:	609a      	str	r2, [r3, #8]
 800273e:	60da      	str	r2, [r3, #12]
 8002740:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	4b3b      	ldr	r3, [pc, #236]	; (8002834 <MX_GPIO_Init+0x108>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	4a3a      	ldr	r2, [pc, #232]	; (8002834 <MX_GPIO_Init+0x108>)
 800274c:	f043 0304 	orr.w	r3, r3, #4
 8002750:	6313      	str	r3, [r2, #48]	; 0x30
 8002752:	4b38      	ldr	r3, [pc, #224]	; (8002834 <MX_GPIO_Init+0x108>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	f003 0304 	and.w	r3, r3, #4
 800275a:	613b      	str	r3, [r7, #16]
 800275c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	4b34      	ldr	r3, [pc, #208]	; (8002834 <MX_GPIO_Init+0x108>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	4a33      	ldr	r2, [pc, #204]	; (8002834 <MX_GPIO_Init+0x108>)
 8002768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800276c:	6313      	str	r3, [r2, #48]	; 0x30
 800276e:	4b31      	ldr	r3, [pc, #196]	; (8002834 <MX_GPIO_Init+0x108>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	4b2d      	ldr	r3, [pc, #180]	; (8002834 <MX_GPIO_Init+0x108>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	4a2c      	ldr	r2, [pc, #176]	; (8002834 <MX_GPIO_Init+0x108>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6313      	str	r3, [r2, #48]	; 0x30
 800278a:	4b2a      	ldr	r3, [pc, #168]	; (8002834 <MX_GPIO_Init+0x108>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	607b      	str	r3, [r7, #4]
 800279a:	4b26      	ldr	r3, [pc, #152]	; (8002834 <MX_GPIO_Init+0x108>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	4a25      	ldr	r2, [pc, #148]	; (8002834 <MX_GPIO_Init+0x108>)
 80027a0:	f043 0302 	orr.w	r3, r3, #2
 80027a4:	6313      	str	r3, [r2, #48]	; 0x30
 80027a6:	4b23      	ldr	r3, [pc, #140]	; (8002834 <MX_GPIO_Init+0x108>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	607b      	str	r3, [r7, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_UART_Pin|IN3_Pin|IN4_Pin, GPIO_PIN_RESET);
 80027b2:	2200      	movs	r2, #0
 80027b4:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80027b8:	481f      	ldr	r0, [pc, #124]	; (8002838 <MX_GPIO_Init+0x10c>)
 80027ba:	f001 fc37 	bl	800402c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80027be:	2200      	movs	r2, #0
 80027c0:	2110      	movs	r1, #16
 80027c2:	481e      	ldr	r0, [pc, #120]	; (800283c <MX_GPIO_Init+0x110>)
 80027c4:	f001 fc32 	bl	800402c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENR_A_Pin|ENL_A_Pin|ENR_B_Pin|ENL_B_Pin
 80027c8:	2200      	movs	r2, #0
 80027ca:	f24f 4134 	movw	r1, #62516	; 0xf434
 80027ce:	481c      	ldr	r0, [pc, #112]	; (8002840 <MX_GPIO_Init+0x114>)
 80027d0:	f001 fc2c 	bl	800402c <HAL_GPIO_WritePin>
                          |ENR_C_Pin|ENL_C_Pin|IN1_Pin|IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_UART_Pin IN3_Pin IN4_Pin */
  GPIO_InitStruct.Pin = LED_UART_Pin|IN3_Pin|IN4_Pin;
 80027d4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80027d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027da:	2301      	movs	r3, #1
 80027dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e2:	2300      	movs	r3, #0
 80027e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027e6:	f107 0314 	add.w	r3, r7, #20
 80027ea:	4619      	mov	r1, r3
 80027ec:	4812      	ldr	r0, [pc, #72]	; (8002838 <MX_GPIO_Init+0x10c>)
 80027ee:	f001 fa99 	bl	8003d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 80027f2:	2310      	movs	r3, #16
 80027f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f6:	2301      	movs	r3, #1
 80027f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fe:	2300      	movs	r3, #0
 8002800:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8002802:	f107 0314 	add.w	r3, r7, #20
 8002806:	4619      	mov	r1, r3
 8002808:	480c      	ldr	r0, [pc, #48]	; (800283c <MX_GPIO_Init+0x110>)
 800280a:	f001 fa8b 	bl	8003d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENR_A_Pin ENL_A_Pin ENR_B_Pin ENL_B_Pin
                           ENR_C_Pin ENL_C_Pin IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = ENR_A_Pin|ENL_A_Pin|ENR_B_Pin|ENL_B_Pin
 800280e:	f24f 4334 	movw	r3, #62516	; 0xf434
 8002812:	617b      	str	r3, [r7, #20]
                          |ENR_C_Pin|ENL_C_Pin|IN1_Pin|IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002814:	2301      	movs	r3, #1
 8002816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281c:	2300      	movs	r3, #0
 800281e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002820:	f107 0314 	add.w	r3, r7, #20
 8002824:	4619      	mov	r1, r3
 8002826:	4806      	ldr	r0, [pc, #24]	; (8002840 <MX_GPIO_Init+0x114>)
 8002828:	f001 fa7c 	bl	8003d24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800282c:	bf00      	nop
 800282e:	3728      	adds	r7, #40	; 0x28
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40023800 	.word	0x40023800
 8002838:	40020800 	.word	0x40020800
 800283c:	40020000 	.word	0x40020000
 8002840:	40020400 	.word	0x40020400
 8002844:	00000000 	.word	0x00000000

08002848 <handle_heading>:
		return false;
	}

}

bool handle_heading(int16_t heading, int16_t error){
 8002848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800284c:	b0af      	sub	sp, #188	; 0xbc
 800284e:	af2a      	add	r7, sp, #168	; 0xa8
 8002850:	4603      	mov	r3, r0
 8002852:	460a      	mov	r2, r1
 8002854:	80fb      	strh	r3, [r7, #6]
 8002856:	4613      	mov	r3, r2
 8002858:	80bb      	strh	r3, [r7, #4]
	int16_t relative_reading = BNO08X_relative_yaw(BNO08X_sensor.setpoint_yaw, BNO08X_sensor.yaw);
 800285a:	4b77      	ldr	r3, [pc, #476]	; (8002a38 <handle_heading+0x1f0>)
 800285c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002860:	4a75      	ldr	r2, [pc, #468]	; (8002a38 <handle_heading+0x1f0>)
 8002862:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8002866:	4611      	mov	r1, r2
 8002868:	4618      	mov	r0, r3
 800286a:	f7fe fb9c 	bl	8000fa6 <BNO08X_relative_yaw>
 800286e:	4603      	mov	r3, r0
 8002870:	81fb      	strh	r3, [r7, #14]
	if(abs(relative_reading - heading) < error){
 8002872:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002880:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002884:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002888:	429a      	cmp	r2, r3
 800288a:	da55      	bge.n	8002938 <handle_heading+0xf0>
		agv_reset_all(motor_A, motor_B, motor_C);
 800288c:	4e6b      	ldr	r6, [pc, #428]	; (8002a3c <handle_heading+0x1f4>)
 800288e:	4b6c      	ldr	r3, [pc, #432]	; (8002a40 <handle_heading+0x1f8>)
 8002890:	ac1a      	add	r4, sp, #104	; 0x68
 8002892:	461d      	mov	r5, r3
 8002894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800289a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800289c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800289e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80028a8:	4b66      	ldr	r3, [pc, #408]	; (8002a44 <handle_heading+0x1fc>)
 80028aa:	ac0b      	add	r4, sp, #44	; 0x2c
 80028ac:	461d      	mov	r5, r3
 80028ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80028c2:	466d      	mov	r5, sp
 80028c4:	f106 0410 	add.w	r4, r6, #16
 80028c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028d0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80028d4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80028d8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80028dc:	f7fe fce6 	bl	80012ac <agv_reset_all>
		agv_stop_all(motor_A, motor_B, motor_C);
 80028e0:	4e56      	ldr	r6, [pc, #344]	; (8002a3c <handle_heading+0x1f4>)
 80028e2:	4b57      	ldr	r3, [pc, #348]	; (8002a40 <handle_heading+0x1f8>)
 80028e4:	ac1a      	add	r4, sp, #104	; 0x68
 80028e6:	461d      	mov	r5, r3
 80028e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80028fc:	4b51      	ldr	r3, [pc, #324]	; (8002a44 <handle_heading+0x1fc>)
 80028fe:	ac0b      	add	r4, sp, #44	; 0x2c
 8002900:	461d      	mov	r5, r3
 8002902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002904:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002906:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002908:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800290a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800290c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800290e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002912:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002916:	466d      	mov	r5, sp
 8002918:	f106 0410 	add.w	r4, r6, #16
 800291c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800291e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002922:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002924:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002928:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800292c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002930:	f7fe fc7e 	bl	8001230 <agv_stop_all>
		return true;
 8002934:	2301      	movs	r3, #1
 8002936:	e074      	b.n	8002a22 <handle_heading+0x1da>
	}
	else{
		PIDController_Update(&pid_yaw, heading, relative_reading);
 8002938:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800293c:	ee07 3a90 	vmov	s15, r3
 8002940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002944:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002948:	ee07 3a10 	vmov	s14, r3
 800294c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002950:	eef0 0a47 	vmov.f32	s1, s14
 8002954:	eeb0 0a67 	vmov.f32	s0, s15
 8002958:	483b      	ldr	r0, [pc, #236]	; (8002a48 <handle_heading+0x200>)
 800295a:	f7fe feff 	bl	800175c <PIDController_Update>
		agv_reset_all(motor_A, motor_B, motor_C);
 800295e:	4e37      	ldr	r6, [pc, #220]	; (8002a3c <handle_heading+0x1f4>)
 8002960:	4b37      	ldr	r3, [pc, #220]	; (8002a40 <handle_heading+0x1f8>)
 8002962:	ac1a      	add	r4, sp, #104	; 0x68
 8002964:	461d      	mov	r5, r3
 8002966:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002968:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800296a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800296c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800296e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002972:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002976:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800297a:	4b32      	ldr	r3, [pc, #200]	; (8002a44 <handle_heading+0x1fc>)
 800297c:	ac0b      	add	r4, sp, #44	; 0x2c
 800297e:	461d      	mov	r5, r3
 8002980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800298a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800298c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002990:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002994:	466d      	mov	r5, sp
 8002996:	f106 0410 	add.w	r4, r6, #16
 800299a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800299c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800299e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029a2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80029a6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80029aa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80029ae:	f7fe fc7d 	bl	80012ac <agv_reset_all>
		agv_inverse_kinematic(0, 0, pid_yaw.out, motor_A, motor_B, motor_C);
 80029b2:	4b25      	ldr	r3, [pc, #148]	; (8002a48 <handle_heading+0x200>)
 80029b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fd fd72 	bl	80004a0 <__aeabi_f2d>
 80029bc:	4680      	mov	r8, r0
 80029be:	4689      	mov	r9, r1
 80029c0:	4e1e      	ldr	r6, [pc, #120]	; (8002a3c <handle_heading+0x1f4>)
 80029c2:	4b1f      	ldr	r3, [pc, #124]	; (8002a40 <handle_heading+0x1f8>)
 80029c4:	ac1a      	add	r4, sp, #104	; 0x68
 80029c6:	461d      	mov	r5, r3
 80029c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80029d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80029dc:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <handle_heading+0x1fc>)
 80029de:	ac0b      	add	r4, sp, #44	; 0x2c
 80029e0:	461d      	mov	r5, r3
 80029e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80029f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80029f6:	466d      	mov	r5, sp
 80029f8:	f106 0410 	add.w	r4, r6, #16
 80029fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a04:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002a08:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002a0c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002a10:	ec49 8b12 	vmov	d2, r8, r9
 8002a14:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8002a30 <handle_heading+0x1e8>
 8002a18:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8002a30 <handle_heading+0x1e8>
 8002a1c:	f7fe fd40 	bl	80014a0 <agv_inverse_kinematic>
		return false;
 8002a20:	2300      	movs	r3, #0
	}
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a2c:	f3af 8000 	nop.w
	...
 8002a38:	200005a0 	.word	0x200005a0
 8002a3c:	200005c4 	.word	0x200005c4
 8002a40:	2000063c 	.word	0x2000063c
 8002a44:	20000600 	.word	0x20000600
 8002a48:	20000558 	.word	0x20000558

08002a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a50:	b672      	cpsid	i
}
 8002a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a54:	e7fe      	b.n	8002a54 <Error_Handler+0x8>
	...

08002a58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	607b      	str	r3, [r7, #4]
 8002a62:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <HAL_MspInit+0x4c>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	4a0f      	ldr	r2, [pc, #60]	; (8002aa4 <HAL_MspInit+0x4c>)
 8002a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a6e:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <HAL_MspInit+0x4c>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a76:	607b      	str	r3, [r7, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	603b      	str	r3, [r7, #0]
 8002a7e:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <HAL_MspInit+0x4c>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	4a08      	ldr	r2, [pc, #32]	; (8002aa4 <HAL_MspInit+0x4c>)
 8002a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a88:	6413      	str	r3, [r2, #64]	; 0x40
 8002a8a:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <HAL_MspInit+0x4c>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a92:	603b      	str	r3, [r7, #0]
 8002a94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40023800 	.word	0x40023800

08002aa8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b090      	sub	sp, #64	; 0x40
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	60da      	str	r2, [r3, #12]
 8002abe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a83      	ldr	r2, [pc, #524]	; (8002cd4 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d135      	bne.n	8002b36 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ace:	4b82      	ldr	r3, [pc, #520]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	4a81      	ldr	r2, [pc, #516]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ada:	4b7f      	ldr	r3, [pc, #508]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aea:	4b7b      	ldr	r3, [pc, #492]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	4a7a      	ldr	r2, [pc, #488]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	6313      	str	r3, [r2, #48]	; 0x30
 8002af6:	4b78      	ldr	r3, [pc, #480]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b10:	2300      	movs	r3, #0
 8002b12:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b14:	2301      	movs	r3, #1
 8002b16:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	486f      	ldr	r0, [pc, #444]	; (8002cdc <HAL_TIM_Encoder_MspInit+0x234>)
 8002b20:	f001 f900 	bl	8003d24 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002b24:	2200      	movs	r2, #0
 8002b26:	2100      	movs	r1, #0
 8002b28:	201b      	movs	r0, #27
 8002b2a:	f000 fcc2 	bl	80034b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002b2e:	201b      	movs	r0, #27
 8002b30:	f000 fcdb 	bl	80034ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002b34:	e0ca      	b.n	8002ccc <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM2)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b3e:	d152      	bne.n	8002be6 <HAL_TIM_Encoder_MspInit+0x13e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b40:	2300      	movs	r3, #0
 8002b42:	623b      	str	r3, [r7, #32]
 8002b44:	4b64      	ldr	r3, [pc, #400]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	4a63      	ldr	r2, [pc, #396]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b50:	4b61      	ldr	r3, [pc, #388]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	623b      	str	r3, [r7, #32]
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	61fb      	str	r3, [r7, #28]
 8002b60:	4b5d      	ldr	r3, [pc, #372]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b64:	4a5c      	ldr	r2, [pc, #368]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b6c:	4b5a      	ldr	r3, [pc, #360]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	61fb      	str	r3, [r7, #28]
 8002b76:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61bb      	str	r3, [r7, #24]
 8002b7c:	4b56      	ldr	r3, [pc, #344]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	4a55      	ldr	r2, [pc, #340]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002b82:	f043 0302 	orr.w	r3, r3, #2
 8002b86:	6313      	str	r3, [r2, #48]	; 0x30
 8002b88:	4b53      	ldr	r3, [pc, #332]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	61bb      	str	r3, [r7, #24]
 8002b92:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002b94:	2320      	movs	r3, #32
 8002b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bac:	4619      	mov	r1, r3
 8002bae:	484b      	ldr	r0, [pc, #300]	; (8002cdc <HAL_TIM_Encoder_MspInit+0x234>)
 8002bb0:	f001 f8b8 	bl	8003d24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002bb4:	2308      	movs	r3, #8
 8002bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4844      	ldr	r0, [pc, #272]	; (8002ce0 <HAL_TIM_Encoder_MspInit+0x238>)
 8002bd0:	f001 f8a8 	bl	8003d24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	201c      	movs	r0, #28
 8002bda:	f000 fc6a 	bl	80034b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bde:	201c      	movs	r0, #28
 8002be0:	f000 fc83 	bl	80034ea <HAL_NVIC_EnableIRQ>
}
 8002be4:	e072      	b.n	8002ccc <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM4)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a3e      	ldr	r2, [pc, #248]	; (8002ce4 <HAL_TIM_Encoder_MspInit+0x23c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d134      	bne.n	8002c5a <HAL_TIM_Encoder_MspInit+0x1b2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	4b38      	ldr	r3, [pc, #224]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	4a37      	ldr	r2, [pc, #220]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002bfa:	f043 0304 	orr.w	r3, r3, #4
 8002bfe:	6413      	str	r3, [r2, #64]	; 0x40
 8002c00:	4b35      	ldr	r3, [pc, #212]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	4b31      	ldr	r3, [pc, #196]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c14:	4a30      	ldr	r2, [pc, #192]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002c16:	f043 0302 	orr.w	r3, r3, #2
 8002c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1c:	4b2e      	ldr	r3, [pc, #184]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c28:	23c0      	movs	r3, #192	; 0xc0
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c34:	2300      	movs	r3, #0
 8002c36:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c38:	2302      	movs	r3, #2
 8002c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c40:	4619      	mov	r1, r3
 8002c42:	4827      	ldr	r0, [pc, #156]	; (8002ce0 <HAL_TIM_Encoder_MspInit+0x238>)
 8002c44:	f001 f86e 	bl	8003d24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	201e      	movs	r0, #30
 8002c4e:	f000 fc30 	bl	80034b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002c52:	201e      	movs	r0, #30
 8002c54:	f000 fc49 	bl	80034ea <HAL_NVIC_EnableIRQ>
}
 8002c58:	e038      	b.n	8002ccc <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM5)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a22      	ldr	r2, [pc, #136]	; (8002ce8 <HAL_TIM_Encoder_MspInit+0x240>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d133      	bne.n	8002ccc <HAL_TIM_Encoder_MspInit+0x224>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002c64:	2300      	movs	r3, #0
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	4b1b      	ldr	r3, [pc, #108]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	4a1a      	ldr	r2, [pc, #104]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002c6e:	f043 0308 	orr.w	r3, r3, #8
 8002c72:	6413      	str	r3, [r2, #64]	; 0x40
 8002c74:	4b18      	ldr	r3, [pc, #96]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	f003 0308 	and.w	r3, r3, #8
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c80:	2300      	movs	r3, #0
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	4b14      	ldr	r3, [pc, #80]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	4a13      	ldr	r2, [pc, #76]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c90:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	60bb      	str	r3, [r7, #8]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002cac:	2302      	movs	r3, #2
 8002cae:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4809      	ldr	r0, [pc, #36]	; (8002cdc <HAL_TIM_Encoder_MspInit+0x234>)
 8002cb8:	f001 f834 	bl	8003d24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	2032      	movs	r0, #50	; 0x32
 8002cc2:	f000 fbf6 	bl	80034b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002cc6:	2032      	movs	r0, #50	; 0x32
 8002cc8:	f000 fc0f 	bl	80034ea <HAL_NVIC_EnableIRQ>
}
 8002ccc:	bf00      	nop
 8002cce:	3740      	adds	r7, #64	; 0x40
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40010000 	.word	0x40010000
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40020000 	.word	0x40020000
 8002ce0:	40020400 	.word	0x40020400
 8002ce4:	40000800 	.word	0x40000800
 8002ce8:	40000c00 	.word	0x40000c00

08002cec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a29      	ldr	r2, [pc, #164]	; (8002da0 <HAL_TIM_Base_MspInit+0xb4>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d10e      	bne.n	8002d1c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	4b28      	ldr	r3, [pc, #160]	; (8002da4 <HAL_TIM_Base_MspInit+0xb8>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	4a27      	ldr	r2, [pc, #156]	; (8002da4 <HAL_TIM_Base_MspInit+0xb8>)
 8002d08:	f043 0302 	orr.w	r3, r3, #2
 8002d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d0e:	4b25      	ldr	r3, [pc, #148]	; (8002da4 <HAL_TIM_Base_MspInit+0xb8>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002d1a:	e03a      	b.n	8002d92 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM9)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a21      	ldr	r2, [pc, #132]	; (8002da8 <HAL_TIM_Base_MspInit+0xbc>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d10e      	bne.n	8002d44 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	4b1e      	ldr	r3, [pc, #120]	; (8002da4 <HAL_TIM_Base_MspInit+0xb8>)
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	4a1d      	ldr	r2, [pc, #116]	; (8002da4 <HAL_TIM_Base_MspInit+0xb8>)
 8002d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d34:	6453      	str	r3, [r2, #68]	; 0x44
 8002d36:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <HAL_TIM_Base_MspInit+0xb8>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	693b      	ldr	r3, [r7, #16]
}
 8002d42:	e026      	b.n	8002d92 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM10)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a18      	ldr	r2, [pc, #96]	; (8002dac <HAL_TIM_Base_MspInit+0xc0>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d10e      	bne.n	8002d6c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	4b14      	ldr	r3, [pc, #80]	; (8002da4 <HAL_TIM_Base_MspInit+0xb8>)
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	4a13      	ldr	r2, [pc, #76]	; (8002da4 <HAL_TIM_Base_MspInit+0xb8>)
 8002d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d5e:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <HAL_TIM_Base_MspInit+0xb8>)
 8002d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]
}
 8002d6a:	e012      	b.n	8002d92 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM11)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a0f      	ldr	r2, [pc, #60]	; (8002db0 <HAL_TIM_Base_MspInit+0xc4>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d10d      	bne.n	8002d92 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <HAL_TIM_Base_MspInit+0xb8>)
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7e:	4a09      	ldr	r2, [pc, #36]	; (8002da4 <HAL_TIM_Base_MspInit+0xb8>)
 8002d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d84:	6453      	str	r3, [r2, #68]	; 0x44
 8002d86:	4b07      	ldr	r3, [pc, #28]	; (8002da4 <HAL_TIM_Base_MspInit+0xb8>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d8e:	60bb      	str	r3, [r7, #8]
 8002d90:	68bb      	ldr	r3, [r7, #8]
}
 8002d92:	bf00      	nop
 8002d94:	371c      	adds	r7, #28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	40000400 	.word	0x40000400
 8002da4:	40023800 	.word	0x40023800
 8002da8:	40014000 	.word	0x40014000
 8002dac:	40014400 	.word	0x40014400
 8002db0:	40014800 	.word	0x40014800

08002db4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08a      	sub	sp, #40	; 0x28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dbc:	f107 0314 	add.w	r3, r7, #20
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	60da      	str	r2, [r3, #12]
 8002dca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a33      	ldr	r2, [pc, #204]	; (8002ea0 <HAL_TIM_MspPostInit+0xec>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d13c      	bne.n	8002e50 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	4b32      	ldr	r3, [pc, #200]	; (8002ea4 <HAL_TIM_MspPostInit+0xf0>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	4a31      	ldr	r2, [pc, #196]	; (8002ea4 <HAL_TIM_MspPostInit+0xf0>)
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	6313      	str	r3, [r2, #48]	; 0x30
 8002de6:	4b2f      	ldr	r3, [pc, #188]	; (8002ea4 <HAL_TIM_MspPostInit+0xf0>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	4b2b      	ldr	r3, [pc, #172]	; (8002ea4 <HAL_TIM_MspPostInit+0xf0>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	4a2a      	ldr	r2, [pc, #168]	; (8002ea4 <HAL_TIM_MspPostInit+0xf0>)
 8002dfc:	f043 0302 	orr.w	r3, r3, #2
 8002e00:	6313      	str	r3, [r2, #48]	; 0x30
 8002e02:	4b28      	ldr	r3, [pc, #160]	; (8002ea4 <HAL_TIM_MspPostInit+0xf0>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e0e:	23c0      	movs	r3, #192	; 0xc0
 8002e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e12:	2302      	movs	r3, #2
 8002e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e16:	2300      	movs	r3, #0
 8002e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e22:	f107 0314 	add.w	r3, r7, #20
 8002e26:	4619      	mov	r1, r3
 8002e28:	481f      	ldr	r0, [pc, #124]	; (8002ea8 <HAL_TIM_MspPostInit+0xf4>)
 8002e2a:	f000 ff7b 	bl	8003d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e32:	2302      	movs	r3, #2
 8002e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e42:	f107 0314 	add.w	r3, r7, #20
 8002e46:	4619      	mov	r1, r3
 8002e48:	4818      	ldr	r0, [pc, #96]	; (8002eac <HAL_TIM_MspPostInit+0xf8>)
 8002e4a:	f000 ff6b 	bl	8003d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002e4e:	e022      	b.n	8002e96 <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM9)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a16      	ldr	r2, [pc, #88]	; (8002eb0 <HAL_TIM_MspPostInit+0xfc>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d11d      	bne.n	8002e96 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <HAL_TIM_MspPostInit+0xf0>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	4a10      	ldr	r2, [pc, #64]	; (8002ea4 <HAL_TIM_MspPostInit+0xf0>)
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ea4 <HAL_TIM_MspPostInit+0xf0>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e76:	230c      	movs	r3, #12
 8002e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e82:	2300      	movs	r3, #0
 8002e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002e86:	2303      	movs	r3, #3
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e8a:	f107 0314 	add.w	r3, r7, #20
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4805      	ldr	r0, [pc, #20]	; (8002ea8 <HAL_TIM_MspPostInit+0xf4>)
 8002e92:	f000 ff47 	bl	8003d24 <HAL_GPIO_Init>
}
 8002e96:	bf00      	nop
 8002e98:	3728      	adds	r7, #40	; 0x28
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40000400 	.word	0x40000400
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	40020000 	.word	0x40020000
 8002eac:	40020400 	.word	0x40020400
 8002eb0:	40014000 	.word	0x40014000

08002eb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08c      	sub	sp, #48	; 0x30
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ebc:	f107 031c 	add.w	r3, r7, #28
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	60da      	str	r2, [r3, #12]
 8002eca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a4e      	ldr	r2, [pc, #312]	; (800300c <HAL_UART_MspInit+0x158>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d15c      	bne.n	8002f90 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61bb      	str	r3, [r7, #24]
 8002eda:	4b4d      	ldr	r3, [pc, #308]	; (8003010 <HAL_UART_MspInit+0x15c>)
 8002edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ede:	4a4c      	ldr	r2, [pc, #304]	; (8003010 <HAL_UART_MspInit+0x15c>)
 8002ee0:	f043 0310 	orr.w	r3, r3, #16
 8002ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ee6:	4b4a      	ldr	r3, [pc, #296]	; (8003010 <HAL_UART_MspInit+0x15c>)
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eea:	f003 0310 	and.w	r3, r3, #16
 8002eee:	61bb      	str	r3, [r7, #24]
 8002ef0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	4b46      	ldr	r3, [pc, #280]	; (8003010 <HAL_UART_MspInit+0x15c>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	4a45      	ldr	r2, [pc, #276]	; (8003010 <HAL_UART_MspInit+0x15c>)
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	6313      	str	r3, [r2, #48]	; 0x30
 8002f02:	4b43      	ldr	r3, [pc, #268]	; (8003010 <HAL_UART_MspInit+0x15c>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8002f0e:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8002f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f14:	2302      	movs	r3, #2
 8002f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f20:	2307      	movs	r3, #7
 8002f22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f24:	f107 031c 	add.w	r3, r7, #28
 8002f28:	4619      	mov	r1, r3
 8002f2a:	483a      	ldr	r0, [pc, #232]	; (8003014 <HAL_UART_MspInit+0x160>)
 8002f2c:	f000 fefa 	bl	8003d24 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002f30:	4b39      	ldr	r3, [pc, #228]	; (8003018 <HAL_UART_MspInit+0x164>)
 8002f32:	4a3a      	ldr	r2, [pc, #232]	; (800301c <HAL_UART_MspInit+0x168>)
 8002f34:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002f36:	4b38      	ldr	r3, [pc, #224]	; (8003018 <HAL_UART_MspInit+0x164>)
 8002f38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f3c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f3e:	4b36      	ldr	r3, [pc, #216]	; (8003018 <HAL_UART_MspInit+0x164>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f44:	4b34      	ldr	r3, [pc, #208]	; (8003018 <HAL_UART_MspInit+0x164>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f4a:	4b33      	ldr	r3, [pc, #204]	; (8003018 <HAL_UART_MspInit+0x164>)
 8002f4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f50:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f52:	4b31      	ldr	r3, [pc, #196]	; (8003018 <HAL_UART_MspInit+0x164>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f58:	4b2f      	ldr	r3, [pc, #188]	; (8003018 <HAL_UART_MspInit+0x164>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002f5e:	4b2e      	ldr	r3, [pc, #184]	; (8003018 <HAL_UART_MspInit+0x164>)
 8002f60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f64:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f66:	4b2c      	ldr	r3, [pc, #176]	; (8003018 <HAL_UART_MspInit+0x164>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f6c:	4b2a      	ldr	r3, [pc, #168]	; (8003018 <HAL_UART_MspInit+0x164>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002f72:	4829      	ldr	r0, [pc, #164]	; (8003018 <HAL_UART_MspInit+0x164>)
 8002f74:	f000 fad4 	bl	8003520 <HAL_DMA_Init>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002f7e:	f7ff fd65 	bl	8002a4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a24      	ldr	r2, [pc, #144]	; (8003018 <HAL_UART_MspInit+0x164>)
 8002f86:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f88:	4a23      	ldr	r2, [pc, #140]	; (8003018 <HAL_UART_MspInit+0x164>)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002f8e:	e039      	b.n	8003004 <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART6)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a22      	ldr	r2, [pc, #136]	; (8003020 <HAL_UART_MspInit+0x16c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d134      	bne.n	8003004 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	4b1c      	ldr	r3, [pc, #112]	; (8003010 <HAL_UART_MspInit+0x15c>)
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	4a1b      	ldr	r2, [pc, #108]	; (8003010 <HAL_UART_MspInit+0x15c>)
 8002fa4:	f043 0320 	orr.w	r3, r3, #32
 8002fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8002faa:	4b19      	ldr	r3, [pc, #100]	; (8003010 <HAL_UART_MspInit+0x15c>)
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	f003 0320 	and.w	r3, r3, #32
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	4b15      	ldr	r3, [pc, #84]	; (8003010 <HAL_UART_MspInit+0x15c>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	4a14      	ldr	r2, [pc, #80]	; (8003010 <HAL_UART_MspInit+0x15c>)
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc6:	4b12      	ldr	r3, [pc, #72]	; (8003010 <HAL_UART_MspInit+0x15c>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002fd2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd8:	2302      	movs	r3, #2
 8002fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002fe4:	2308      	movs	r3, #8
 8002fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe8:	f107 031c 	add.w	r3, r7, #28
 8002fec:	4619      	mov	r1, r3
 8002fee:	4809      	ldr	r0, [pc, #36]	; (8003014 <HAL_UART_MspInit+0x160>)
 8002ff0:	f000 fe98 	bl	8003d24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	2047      	movs	r0, #71	; 0x47
 8002ffa:	f000 fa5a 	bl	80034b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002ffe:	2047      	movs	r0, #71	; 0x47
 8003000:	f000 fa73 	bl	80034ea <HAL_NVIC_EnableIRQ>
}
 8003004:	bf00      	nop
 8003006:	3730      	adds	r7, #48	; 0x30
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40011000 	.word	0x40011000
 8003010:	40023800 	.word	0x40023800
 8003014:	40020000 	.word	0x40020000
 8003018:	200003bc 	.word	0x200003bc
 800301c:	40026440 	.word	0x40026440
 8003020:	40011400 	.word	0x40011400

08003024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003028:	e7fe      	b.n	8003028 <NMI_Handler+0x4>

0800302a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800302a:	b480      	push	{r7}
 800302c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800302e:	e7fe      	b.n	800302e <HardFault_Handler+0x4>

08003030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003034:	e7fe      	b.n	8003034 <MemManage_Handler+0x4>

08003036 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003036:	b480      	push	{r7}
 8003038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800303a:	e7fe      	b.n	800303a <BusFault_Handler+0x4>

0800303c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003040:	e7fe      	b.n	8003040 <UsageFault_Handler+0x4>

08003042 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003042:	b480      	push	{r7}
 8003044:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800305e:	b480      	push	{r7}
 8003060:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003062:	bf00      	nop
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	indexPos++;
 8003070:	4b28      	ldr	r3, [pc, #160]	; (8003114 <SysTick_Handler+0xa8>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3301      	adds	r3, #1
 8003076:	4a27      	ldr	r2, [pc, #156]	; (8003114 <SysTick_Handler+0xa8>)
 8003078:	6013      	str	r3, [r2, #0]
		if(indexPos == 500){
 800307a:	4b26      	ldr	r3, [pc, #152]	; (8003114 <SysTick_Handler+0xa8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003082:	d142      	bne.n	800310a <SysTick_Handler+0x9e>
			encoder_A.speed = ((encoder_A.position-encoder_A.old_position)*2);
 8003084:	4b24      	ldr	r3, [pc, #144]	; (8003118 <SysTick_Handler+0xac>)
 8003086:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800308a:	461a      	mov	r2, r3
 800308c:	4b22      	ldr	r3, [pc, #136]	; (8003118 <SysTick_Handler+0xac>)
 800308e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	4a20      	ldr	r2, [pc, #128]	; (8003118 <SysTick_Handler+0xac>)
 8003098:	6153      	str	r3, [r2, #20]
			encoder_A.old_position = encoder_A.position;
 800309a:	4b1f      	ldr	r3, [pc, #124]	; (8003118 <SysTick_Handler+0xac>)
 800309c:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80030a0:	4b1d      	ldr	r3, [pc, #116]	; (8003118 <SysTick_Handler+0xac>)
 80030a2:	821a      	strh	r2, [r3, #16]

			encoder_B.speed = ((encoder_B.position-encoder_B.old_position)*2);
 80030a4:	4b1d      	ldr	r3, [pc, #116]	; (800311c <SysTick_Handler+0xb0>)
 80030a6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80030aa:	461a      	mov	r2, r3
 80030ac:	4b1b      	ldr	r3, [pc, #108]	; (800311c <SysTick_Handler+0xb0>)
 80030ae:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	4a19      	ldr	r2, [pc, #100]	; (800311c <SysTick_Handler+0xb0>)
 80030b8:	6153      	str	r3, [r2, #20]
			encoder_B.old_position = encoder_B.position;
 80030ba:	4b18      	ldr	r3, [pc, #96]	; (800311c <SysTick_Handler+0xb0>)
 80030bc:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80030c0:	4b16      	ldr	r3, [pc, #88]	; (800311c <SysTick_Handler+0xb0>)
 80030c2:	821a      	strh	r2, [r3, #16]

			encoder_C.speed = ((encoder_C.position-encoder_C.old_position)*2);
 80030c4:	4b16      	ldr	r3, [pc, #88]	; (8003120 <SysTick_Handler+0xb4>)
 80030c6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80030ca:	461a      	mov	r2, r3
 80030cc:	4b14      	ldr	r3, [pc, #80]	; (8003120 <SysTick_Handler+0xb4>)
 80030ce:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	4a12      	ldr	r2, [pc, #72]	; (8003120 <SysTick_Handler+0xb4>)
 80030d8:	6153      	str	r3, [r2, #20]
			encoder_C.old_position = encoder_C.position;
 80030da:	4b11      	ldr	r3, [pc, #68]	; (8003120 <SysTick_Handler+0xb4>)
 80030dc:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80030e0:	4b0f      	ldr	r3, [pc, #60]	; (8003120 <SysTick_Handler+0xb4>)
 80030e2:	821a      	strh	r2, [r3, #16]

			encoder_D.speed = ((encoder_D.position-encoder_D.old_position)*2);
 80030e4:	4b0f      	ldr	r3, [pc, #60]	; (8003124 <SysTick_Handler+0xb8>)
 80030e6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80030ea:	461a      	mov	r2, r3
 80030ec:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <SysTick_Handler+0xb8>)
 80030ee:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	4a0b      	ldr	r2, [pc, #44]	; (8003124 <SysTick_Handler+0xb8>)
 80030f8:	6153      	str	r3, [r2, #20]
			encoder_D.old_position = encoder_D.position;
 80030fa:	4b0a      	ldr	r3, [pc, #40]	; (8003124 <SysTick_Handler+0xb8>)
 80030fc:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8003100:	4b08      	ldr	r3, [pc, #32]	; (8003124 <SysTick_Handler+0xb8>)
 8003102:	821a      	strh	r2, [r3, #16]

			indexPos = 0;
 8003104:	4b03      	ldr	r3, [pc, #12]	; (8003114 <SysTick_Handler+0xa8>)
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
		}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800310a:	f000 f8d7 	bl	80032bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	200006d8 	.word	0x200006d8
 8003118:	20000678 	.word	0x20000678
 800311c:	20000690 	.word	0x20000690
 8003120:	200006a8 	.word	0x200006a8
 8003124:	200006c0 	.word	0x200006c0

08003128 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800312c:	4802      	ldr	r0, [pc, #8]	; (8003138 <TIM1_CC_IRQHandler+0x10>)
 800312e:	f001 feb5 	bl	8004e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003132:	bf00      	nop
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	200000ec 	.word	0x200000ec

0800313c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003140:	4802      	ldr	r0, [pc, #8]	; (800314c <TIM2_IRQHandler+0x10>)
 8003142:	f001 feab 	bl	8004e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003146:	bf00      	nop
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	20000134 	.word	0x20000134

08003150 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003154:	4802      	ldr	r0, [pc, #8]	; (8003160 <TIM4_IRQHandler+0x10>)
 8003156:	f001 fea1 	bl	8004e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800315a:	bf00      	nop
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	200001c4 	.word	0x200001c4

08003164 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003168:	4802      	ldr	r0, [pc, #8]	; (8003174 <TIM5_IRQHandler+0x10>)
 800316a:	f001 fe97 	bl	8004e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800316e:	bf00      	nop
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	2000020c 	.word	0x2000020c

08003178 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800317c:	4802      	ldr	r0, [pc, #8]	; (8003188 <DMA2_Stream2_IRQHandler+0x10>)
 800317e:	f000 fb67 	bl	8003850 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003182:	bf00      	nop
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	200003bc 	.word	0x200003bc

0800318c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003190:	4802      	ldr	r0, [pc, #8]	; (800319c <USART6_IRQHandler+0x10>)
 8003192:	f002 fcf5 	bl	8005b80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003196:	bf00      	nop
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20000374 	.word	0x20000374

080031a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031a4:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <SystemInit+0x20>)
 80031a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031aa:	4a05      	ldr	r2, [pc, #20]	; (80031c0 <SystemInit+0x20>)
 80031ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031b4:	bf00      	nop
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	e000ed00 	.word	0xe000ed00

080031c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80031c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031c8:	f7ff ffea 	bl	80031a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031cc:	480c      	ldr	r0, [pc, #48]	; (8003200 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80031ce:	490d      	ldr	r1, [pc, #52]	; (8003204 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80031d0:	4a0d      	ldr	r2, [pc, #52]	; (8003208 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80031d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031d4:	e002      	b.n	80031dc <LoopCopyDataInit>

080031d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031da:	3304      	adds	r3, #4

080031dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031e0:	d3f9      	bcc.n	80031d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031e2:	4a0a      	ldr	r2, [pc, #40]	; (800320c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80031e4:	4c0a      	ldr	r4, [pc, #40]	; (8003210 <LoopFillZerobss+0x22>)
  movs r3, #0
 80031e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031e8:	e001      	b.n	80031ee <LoopFillZerobss>

080031ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031ec:	3204      	adds	r2, #4

080031ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031f0:	d3fb      	bcc.n	80031ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031f2:	f003 fdf1 	bl	8006dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031f6:	f7fe fd4f 	bl	8001c98 <main>
  bx  lr    
 80031fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80031fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003204:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8003208:	08006f88 	.word	0x08006f88
  ldr r2, =_sbss
 800320c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003210:	20000818 	.word	0x20000818

08003214 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003214:	e7fe      	b.n	8003214 <ADC_IRQHandler>
	...

08003218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800321c:	4b0e      	ldr	r3, [pc, #56]	; (8003258 <HAL_Init+0x40>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a0d      	ldr	r2, [pc, #52]	; (8003258 <HAL_Init+0x40>)
 8003222:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003226:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003228:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <HAL_Init+0x40>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a0a      	ldr	r2, [pc, #40]	; (8003258 <HAL_Init+0x40>)
 800322e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003232:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003234:	4b08      	ldr	r3, [pc, #32]	; (8003258 <HAL_Init+0x40>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a07      	ldr	r2, [pc, #28]	; (8003258 <HAL_Init+0x40>)
 800323a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800323e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003240:	2003      	movs	r0, #3
 8003242:	f000 f92b 	bl	800349c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003246:	200f      	movs	r0, #15
 8003248:	f000 f808 	bl	800325c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800324c:	f7ff fc04 	bl	8002a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40023c00 	.word	0x40023c00

0800325c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003264:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <HAL_InitTick+0x54>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	4b12      	ldr	r3, [pc, #72]	; (80032b4 <HAL_InitTick+0x58>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	4619      	mov	r1, r3
 800326e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003272:	fbb3 f3f1 	udiv	r3, r3, r1
 8003276:	fbb2 f3f3 	udiv	r3, r2, r3
 800327a:	4618      	mov	r0, r3
 800327c:	f000 f943 	bl	8003506 <HAL_SYSTICK_Config>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e00e      	b.n	80032a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b0f      	cmp	r3, #15
 800328e:	d80a      	bhi.n	80032a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003290:	2200      	movs	r2, #0
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	f04f 30ff 	mov.w	r0, #4294967295
 8003298:	f000 f90b 	bl	80034b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800329c:	4a06      	ldr	r2, [pc, #24]	; (80032b8 <HAL_InitTick+0x5c>)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	e000      	b.n	80032a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	20000000 	.word	0x20000000
 80032b4:	20000008 	.word	0x20000008
 80032b8:	20000004 	.word	0x20000004

080032bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032c0:	4b06      	ldr	r3, [pc, #24]	; (80032dc <HAL_IncTick+0x20>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	461a      	mov	r2, r3
 80032c6:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <HAL_IncTick+0x24>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4413      	add	r3, r2
 80032cc:	4a04      	ldr	r2, [pc, #16]	; (80032e0 <HAL_IncTick+0x24>)
 80032ce:	6013      	str	r3, [r2, #0]
}
 80032d0:	bf00      	nop
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	20000008 	.word	0x20000008
 80032e0:	200006dc 	.word	0x200006dc

080032e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  return uwTick;
 80032e8:	4b03      	ldr	r3, [pc, #12]	; (80032f8 <HAL_GetTick+0x14>)
 80032ea:	681b      	ldr	r3, [r3, #0]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	200006dc 	.word	0x200006dc

080032fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800330c:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <__NVIC_SetPriorityGrouping+0x44>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003318:	4013      	ands	r3, r2
 800331a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003324:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800332c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800332e:	4a04      	ldr	r2, [pc, #16]	; (8003340 <__NVIC_SetPriorityGrouping+0x44>)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	60d3      	str	r3, [r2, #12]
}
 8003334:	bf00      	nop
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	e000ed00 	.word	0xe000ed00

08003344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003348:	4b04      	ldr	r3, [pc, #16]	; (800335c <__NVIC_GetPriorityGrouping+0x18>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	0a1b      	lsrs	r3, r3, #8
 800334e:	f003 0307 	and.w	r3, r3, #7
}
 8003352:	4618      	mov	r0, r3
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	e000ed00 	.word	0xe000ed00

08003360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	2b00      	cmp	r3, #0
 8003370:	db0b      	blt.n	800338a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	f003 021f 	and.w	r2, r3, #31
 8003378:	4907      	ldr	r1, [pc, #28]	; (8003398 <__NVIC_EnableIRQ+0x38>)
 800337a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	2001      	movs	r0, #1
 8003382:	fa00 f202 	lsl.w	r2, r0, r2
 8003386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	e000e100 	.word	0xe000e100

0800339c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	6039      	str	r1, [r7, #0]
 80033a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	db0a      	blt.n	80033c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	490c      	ldr	r1, [pc, #48]	; (80033e8 <__NVIC_SetPriority+0x4c>)
 80033b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ba:	0112      	lsls	r2, r2, #4
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	440b      	add	r3, r1
 80033c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033c4:	e00a      	b.n	80033dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	4908      	ldr	r1, [pc, #32]	; (80033ec <__NVIC_SetPriority+0x50>)
 80033cc:	79fb      	ldrb	r3, [r7, #7]
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	3b04      	subs	r3, #4
 80033d4:	0112      	lsls	r2, r2, #4
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	440b      	add	r3, r1
 80033da:	761a      	strb	r2, [r3, #24]
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	e000e100 	.word	0xe000e100
 80033ec:	e000ed00 	.word	0xe000ed00

080033f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b089      	sub	sp, #36	; 0x24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f1c3 0307 	rsb	r3, r3, #7
 800340a:	2b04      	cmp	r3, #4
 800340c:	bf28      	it	cs
 800340e:	2304      	movcs	r3, #4
 8003410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	3304      	adds	r3, #4
 8003416:	2b06      	cmp	r3, #6
 8003418:	d902      	bls.n	8003420 <NVIC_EncodePriority+0x30>
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	3b03      	subs	r3, #3
 800341e:	e000      	b.n	8003422 <NVIC_EncodePriority+0x32>
 8003420:	2300      	movs	r3, #0
 8003422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003424:	f04f 32ff 	mov.w	r2, #4294967295
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43da      	mvns	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	401a      	ands	r2, r3
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003438:	f04f 31ff 	mov.w	r1, #4294967295
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	fa01 f303 	lsl.w	r3, r1, r3
 8003442:	43d9      	mvns	r1, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003448:	4313      	orrs	r3, r2
         );
}
 800344a:	4618      	mov	r0, r3
 800344c:	3724      	adds	r7, #36	; 0x24
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
	...

08003458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3b01      	subs	r3, #1
 8003464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003468:	d301      	bcc.n	800346e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800346a:	2301      	movs	r3, #1
 800346c:	e00f      	b.n	800348e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800346e:	4a0a      	ldr	r2, [pc, #40]	; (8003498 <SysTick_Config+0x40>)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3b01      	subs	r3, #1
 8003474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003476:	210f      	movs	r1, #15
 8003478:	f04f 30ff 	mov.w	r0, #4294967295
 800347c:	f7ff ff8e 	bl	800339c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003480:	4b05      	ldr	r3, [pc, #20]	; (8003498 <SysTick_Config+0x40>)
 8003482:	2200      	movs	r2, #0
 8003484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003486:	4b04      	ldr	r3, [pc, #16]	; (8003498 <SysTick_Config+0x40>)
 8003488:	2207      	movs	r2, #7
 800348a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	e000e010 	.word	0xe000e010

0800349c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7ff ff29 	bl	80032fc <__NVIC_SetPriorityGrouping>
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b086      	sub	sp, #24
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	4603      	mov	r3, r0
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034c4:	f7ff ff3e 	bl	8003344 <__NVIC_GetPriorityGrouping>
 80034c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	68b9      	ldr	r1, [r7, #8]
 80034ce:	6978      	ldr	r0, [r7, #20]
 80034d0:	f7ff ff8e 	bl	80033f0 <NVIC_EncodePriority>
 80034d4:	4602      	mov	r2, r0
 80034d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034da:	4611      	mov	r1, r2
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff ff5d 	bl	800339c <__NVIC_SetPriority>
}
 80034e2:	bf00      	nop
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	4603      	mov	r3, r0
 80034f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff ff31 	bl	8003360 <__NVIC_EnableIRQ>
}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff ffa2 	bl	8003458 <SysTick_Config>
 8003514:	4603      	mov	r3, r0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
	...

08003520 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800352c:	f7ff feda 	bl	80032e4 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e099      	b.n	8003670 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0201 	bic.w	r2, r2, #1
 800355a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800355c:	e00f      	b.n	800357e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800355e:	f7ff fec1 	bl	80032e4 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b05      	cmp	r3, #5
 800356a:	d908      	bls.n	800357e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2220      	movs	r2, #32
 8003570:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2203      	movs	r2, #3
 8003576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e078      	b.n	8003670 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1e8      	bne.n	800355e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	4b38      	ldr	r3, [pc, #224]	; (8003678 <HAL_DMA_Init+0x158>)
 8003598:	4013      	ands	r3, r2
 800359a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d107      	bne.n	80035e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e0:	4313      	orrs	r3, r2
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f023 0307 	bic.w	r3, r3, #7
 80035fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	4313      	orrs	r3, r2
 8003608:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	2b04      	cmp	r3, #4
 8003610:	d117      	bne.n	8003642 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	4313      	orrs	r3, r2
 800361a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00e      	beq.n	8003642 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fb01 	bl	8003c2c <DMA_CheckFifoParam>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d008      	beq.n	8003642 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2240      	movs	r2, #64	; 0x40
 8003634:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800363e:	2301      	movs	r3, #1
 8003640:	e016      	b.n	8003670 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 fab8 	bl	8003bc0 <DMA_CalcBaseAndBitshift>
 8003650:	4603      	mov	r3, r0
 8003652:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003658:	223f      	movs	r2, #63	; 0x3f
 800365a:	409a      	lsls	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3718      	adds	r7, #24
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	f010803f 	.word	0xf010803f

0800367c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003692:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_DMA_Start_IT+0x26>
 800369e:	2302      	movs	r3, #2
 80036a0:	e040      	b.n	8003724 <HAL_DMA_Start_IT+0xa8>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d12f      	bne.n	8003716 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2202      	movs	r2, #2
 80036ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	68b9      	ldr	r1, [r7, #8]
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 fa4a 	bl	8003b64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d4:	223f      	movs	r2, #63	; 0x3f
 80036d6:	409a      	lsls	r2, r3
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0216 	orr.w	r2, r2, #22
 80036ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d007      	beq.n	8003704 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0208 	orr.w	r2, r2, #8
 8003702:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0201 	orr.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	e005      	b.n	8003722 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800371e:	2302      	movs	r3, #2
 8003720:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003722:	7dfb      	ldrb	r3, [r7, #23]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003738:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800373a:	f7ff fdd3 	bl	80032e4 <HAL_GetTick>
 800373e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d008      	beq.n	800375e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2280      	movs	r2, #128	; 0x80
 8003750:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e052      	b.n	8003804 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0216 	bic.w	r2, r2, #22
 800376c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695a      	ldr	r2, [r3, #20]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800377c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	2b00      	cmp	r3, #0
 8003784:	d103      	bne.n	800378e <HAL_DMA_Abort+0x62>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800378a:	2b00      	cmp	r3, #0
 800378c:	d007      	beq.n	800379e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0208 	bic.w	r2, r2, #8
 800379c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0201 	bic.w	r2, r2, #1
 80037ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037ae:	e013      	b.n	80037d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037b0:	f7ff fd98 	bl	80032e4 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b05      	cmp	r3, #5
 80037bc:	d90c      	bls.n	80037d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2220      	movs	r2, #32
 80037c2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2203      	movs	r2, #3
 80037c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e015      	b.n	8003804 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1e4      	bne.n	80037b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ea:	223f      	movs	r2, #63	; 0x3f
 80037ec:	409a      	lsls	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d004      	beq.n	800382a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2280      	movs	r2, #128	; 0x80
 8003824:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e00c      	b.n	8003844 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2205      	movs	r2, #5
 800382e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0201 	bic.w	r2, r2, #1
 8003840:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800385c:	4b8e      	ldr	r3, [pc, #568]	; (8003a98 <HAL_DMA_IRQHandler+0x248>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a8e      	ldr	r2, [pc, #568]	; (8003a9c <HAL_DMA_IRQHandler+0x24c>)
 8003862:	fba2 2303 	umull	r2, r3, r2, r3
 8003866:	0a9b      	lsrs	r3, r3, #10
 8003868:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387a:	2208      	movs	r2, #8
 800387c:	409a      	lsls	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4013      	ands	r3, r2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d01a      	beq.n	80038bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d013      	beq.n	80038bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0204 	bic.w	r2, r2, #4
 80038a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a8:	2208      	movs	r2, #8
 80038aa:	409a      	lsls	r2, r3
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b4:	f043 0201 	orr.w	r2, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c0:	2201      	movs	r2, #1
 80038c2:	409a      	lsls	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4013      	ands	r3, r2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d012      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00b      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038de:	2201      	movs	r2, #1
 80038e0:	409a      	lsls	r2, r3
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ea:	f043 0202 	orr.w	r2, r3, #2
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f6:	2204      	movs	r2, #4
 80038f8:	409a      	lsls	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4013      	ands	r3, r2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d012      	beq.n	8003928 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00b      	beq.n	8003928 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003914:	2204      	movs	r2, #4
 8003916:	409a      	lsls	r2, r3
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003920:	f043 0204 	orr.w	r2, r3, #4
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392c:	2210      	movs	r2, #16
 800392e:	409a      	lsls	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4013      	ands	r3, r2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d043      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d03c      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394a:	2210      	movs	r2, #16
 800394c:	409a      	lsls	r2, r3
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d018      	beq.n	8003992 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d108      	bne.n	8003980 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	2b00      	cmp	r3, #0
 8003974:	d024      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	4798      	blx	r3
 800397e:	e01f      	b.n	80039c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003984:	2b00      	cmp	r3, #0
 8003986:	d01b      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	4798      	blx	r3
 8003990:	e016      	b.n	80039c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399c:	2b00      	cmp	r3, #0
 800399e:	d107      	bne.n	80039b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0208 	bic.w	r2, r2, #8
 80039ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c4:	2220      	movs	r2, #32
 80039c6:	409a      	lsls	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4013      	ands	r3, r2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 808f 	beq.w	8003af0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0310 	and.w	r3, r3, #16
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 8087 	beq.w	8003af0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e6:	2220      	movs	r2, #32
 80039e8:	409a      	lsls	r2, r3
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b05      	cmp	r3, #5
 80039f8:	d136      	bne.n	8003a68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0216 	bic.w	r2, r2, #22
 8003a08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695a      	ldr	r2, [r3, #20]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d103      	bne.n	8003a2a <HAL_DMA_IRQHandler+0x1da>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d007      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0208 	bic.w	r2, r2, #8
 8003a38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3e:	223f      	movs	r2, #63	; 0x3f
 8003a40:	409a      	lsls	r2, r3
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d07e      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	4798      	blx	r3
        }
        return;
 8003a66:	e079      	b.n	8003b5c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d01d      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10d      	bne.n	8003aa0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d031      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	4798      	blx	r3
 8003a94:	e02c      	b.n	8003af0 <HAL_DMA_IRQHandler+0x2a0>
 8003a96:	bf00      	nop
 8003a98:	20000000 	.word	0x20000000
 8003a9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d023      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	4798      	blx	r3
 8003ab0:	e01e      	b.n	8003af0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10f      	bne.n	8003ae0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0210 	bic.w	r2, r2, #16
 8003ace:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d032      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d022      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2205      	movs	r2, #5
 8003b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0201 	bic.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	60bb      	str	r3, [r7, #8]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d307      	bcc.n	8003b38 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1f2      	bne.n	8003b1c <HAL_DMA_IRQHandler+0x2cc>
 8003b36:	e000      	b.n	8003b3a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b38:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d005      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	4798      	blx	r3
 8003b5a:	e000      	b.n	8003b5e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b5c:	bf00      	nop
    }
  }
}
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	2b40      	cmp	r3, #64	; 0x40
 8003b90:	d108      	bne.n	8003ba4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ba2:	e007      	b.n	8003bb4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	60da      	str	r2, [r3, #12]
}
 8003bb4:	bf00      	nop
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	3b10      	subs	r3, #16
 8003bd0:	4a14      	ldr	r2, [pc, #80]	; (8003c24 <DMA_CalcBaseAndBitshift+0x64>)
 8003bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd6:	091b      	lsrs	r3, r3, #4
 8003bd8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003bda:	4a13      	ldr	r2, [pc, #76]	; (8003c28 <DMA_CalcBaseAndBitshift+0x68>)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4413      	add	r3, r2
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d909      	bls.n	8003c02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003bf6:	f023 0303 	bic.w	r3, r3, #3
 8003bfa:	1d1a      	adds	r2, r3, #4
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	659a      	str	r2, [r3, #88]	; 0x58
 8003c00:	e007      	b.n	8003c12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c0a:	f023 0303 	bic.w	r3, r3, #3
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	aaaaaaab 	.word	0xaaaaaaab
 8003c28:	08006e6c 	.word	0x08006e6c

08003c2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d11f      	bne.n	8003c86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d856      	bhi.n	8003cfa <DMA_CheckFifoParam+0xce>
 8003c4c:	a201      	add	r2, pc, #4	; (adr r2, 8003c54 <DMA_CheckFifoParam+0x28>)
 8003c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c52:	bf00      	nop
 8003c54:	08003c65 	.word	0x08003c65
 8003c58:	08003c77 	.word	0x08003c77
 8003c5c:	08003c65 	.word	0x08003c65
 8003c60:	08003cfb 	.word	0x08003cfb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d046      	beq.n	8003cfe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c74:	e043      	b.n	8003cfe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c7e:	d140      	bne.n	8003d02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c84:	e03d      	b.n	8003d02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c8e:	d121      	bne.n	8003cd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2b03      	cmp	r3, #3
 8003c94:	d837      	bhi.n	8003d06 <DMA_CheckFifoParam+0xda>
 8003c96:	a201      	add	r2, pc, #4	; (adr r2, 8003c9c <DMA_CheckFifoParam+0x70>)
 8003c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9c:	08003cad 	.word	0x08003cad
 8003ca0:	08003cb3 	.word	0x08003cb3
 8003ca4:	08003cad 	.word	0x08003cad
 8003ca8:	08003cc5 	.word	0x08003cc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	73fb      	strb	r3, [r7, #15]
      break;
 8003cb0:	e030      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d025      	beq.n	8003d0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cc2:	e022      	b.n	8003d0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ccc:	d11f      	bne.n	8003d0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003cd2:	e01c      	b.n	8003d0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d903      	bls.n	8003ce2 <DMA_CheckFifoParam+0xb6>
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b03      	cmp	r3, #3
 8003cde:	d003      	beq.n	8003ce8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ce0:	e018      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	73fb      	strb	r3, [r7, #15]
      break;
 8003ce6:	e015      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00e      	beq.n	8003d12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8003cf8:	e00b      	b.n	8003d12 <DMA_CheckFifoParam+0xe6>
      break;
 8003cfa:	bf00      	nop
 8003cfc:	e00a      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      break;
 8003cfe:	bf00      	nop
 8003d00:	e008      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      break;
 8003d02:	bf00      	nop
 8003d04:	e006      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      break;
 8003d06:	bf00      	nop
 8003d08:	e004      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      break;
 8003d0a:	bf00      	nop
 8003d0c:	e002      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d0e:	bf00      	nop
 8003d10:	e000      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      break;
 8003d12:	bf00      	nop
    }
  } 
  
  return status; 
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop

08003d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b089      	sub	sp, #36	; 0x24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
 8003d3e:	e159      	b.n	8003ff4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d40:	2201      	movs	r2, #1
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	4013      	ands	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	f040 8148 	bne.w	8003fee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d005      	beq.n	8003d76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d130      	bne.n	8003dd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	2203      	movs	r2, #3
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	43db      	mvns	r3, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dac:	2201      	movs	r2, #1
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	43db      	mvns	r3, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4013      	ands	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	091b      	lsrs	r3, r3, #4
 8003dc2:	f003 0201 	and.w	r2, r3, #1
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 0303 	and.w	r3, r3, #3
 8003de0:	2b03      	cmp	r3, #3
 8003de2:	d017      	beq.n	8003e14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	2203      	movs	r2, #3
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 0303 	and.w	r3, r3, #3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d123      	bne.n	8003e68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	08da      	lsrs	r2, r3, #3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3208      	adds	r2, #8
 8003e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	220f      	movs	r2, #15
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4013      	ands	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	08da      	lsrs	r2, r3, #3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3208      	adds	r2, #8
 8003e62:	69b9      	ldr	r1, [r7, #24]
 8003e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	2203      	movs	r2, #3
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 0203 	and.w	r2, r3, #3
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 80a2 	beq.w	8003fee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	4b57      	ldr	r3, [pc, #348]	; (800400c <HAL_GPIO_Init+0x2e8>)
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	4a56      	ldr	r2, [pc, #344]	; (800400c <HAL_GPIO_Init+0x2e8>)
 8003eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8003eba:	4b54      	ldr	r3, [pc, #336]	; (800400c <HAL_GPIO_Init+0x2e8>)
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ec6:	4a52      	ldr	r2, [pc, #328]	; (8004010 <HAL_GPIO_Init+0x2ec>)
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	089b      	lsrs	r3, r3, #2
 8003ecc:	3302      	adds	r3, #2
 8003ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	220f      	movs	r2, #15
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a49      	ldr	r2, [pc, #292]	; (8004014 <HAL_GPIO_Init+0x2f0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d019      	beq.n	8003f26 <HAL_GPIO_Init+0x202>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a48      	ldr	r2, [pc, #288]	; (8004018 <HAL_GPIO_Init+0x2f4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d013      	beq.n	8003f22 <HAL_GPIO_Init+0x1fe>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a47      	ldr	r2, [pc, #284]	; (800401c <HAL_GPIO_Init+0x2f8>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00d      	beq.n	8003f1e <HAL_GPIO_Init+0x1fa>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a46      	ldr	r2, [pc, #280]	; (8004020 <HAL_GPIO_Init+0x2fc>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d007      	beq.n	8003f1a <HAL_GPIO_Init+0x1f6>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a45      	ldr	r2, [pc, #276]	; (8004024 <HAL_GPIO_Init+0x300>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d101      	bne.n	8003f16 <HAL_GPIO_Init+0x1f2>
 8003f12:	2304      	movs	r3, #4
 8003f14:	e008      	b.n	8003f28 <HAL_GPIO_Init+0x204>
 8003f16:	2307      	movs	r3, #7
 8003f18:	e006      	b.n	8003f28 <HAL_GPIO_Init+0x204>
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e004      	b.n	8003f28 <HAL_GPIO_Init+0x204>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e002      	b.n	8003f28 <HAL_GPIO_Init+0x204>
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <HAL_GPIO_Init+0x204>
 8003f26:	2300      	movs	r3, #0
 8003f28:	69fa      	ldr	r2, [r7, #28]
 8003f2a:	f002 0203 	and.w	r2, r2, #3
 8003f2e:	0092      	lsls	r2, r2, #2
 8003f30:	4093      	lsls	r3, r2
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f38:	4935      	ldr	r1, [pc, #212]	; (8004010 <HAL_GPIO_Init+0x2ec>)
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	089b      	lsrs	r3, r3, #2
 8003f3e:	3302      	adds	r3, #2
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f46:	4b38      	ldr	r3, [pc, #224]	; (8004028 <HAL_GPIO_Init+0x304>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	4013      	ands	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003f62:	69ba      	ldr	r2, [r7, #24]
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f6a:	4a2f      	ldr	r2, [pc, #188]	; (8004028 <HAL_GPIO_Init+0x304>)
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f70:	4b2d      	ldr	r3, [pc, #180]	; (8004028 <HAL_GPIO_Init+0x304>)
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f94:	4a24      	ldr	r2, [pc, #144]	; (8004028 <HAL_GPIO_Init+0x304>)
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f9a:	4b23      	ldr	r3, [pc, #140]	; (8004028 <HAL_GPIO_Init+0x304>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fbe:	4a1a      	ldr	r2, [pc, #104]	; (8004028 <HAL_GPIO_Init+0x304>)
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fc4:	4b18      	ldr	r3, [pc, #96]	; (8004028 <HAL_GPIO_Init+0x304>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fe8:	4a0f      	ldr	r2, [pc, #60]	; (8004028 <HAL_GPIO_Init+0x304>)
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	61fb      	str	r3, [r7, #28]
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	2b0f      	cmp	r3, #15
 8003ff8:	f67f aea2 	bls.w	8003d40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ffc:	bf00      	nop
 8003ffe:	bf00      	nop
 8004000:	3724      	adds	r7, #36	; 0x24
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40023800 	.word	0x40023800
 8004010:	40013800 	.word	0x40013800
 8004014:	40020000 	.word	0x40020000
 8004018:	40020400 	.word	0x40020400
 800401c:	40020800 	.word	0x40020800
 8004020:	40020c00 	.word	0x40020c00
 8004024:	40021000 	.word	0x40021000
 8004028:	40013c00 	.word	0x40013c00

0800402c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	460b      	mov	r3, r1
 8004036:	807b      	strh	r3, [r7, #2]
 8004038:	4613      	mov	r3, r2
 800403a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800403c:	787b      	ldrb	r3, [r7, #1]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004042:	887a      	ldrh	r2, [r7, #2]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004048:	e003      	b.n	8004052 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800404a:	887b      	ldrh	r3, [r7, #2]
 800404c:	041a      	lsls	r2, r3, #16
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	619a      	str	r2, [r3, #24]
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800405e:	b480      	push	{r7}
 8004060:	b085      	sub	sp, #20
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
 8004066:	460b      	mov	r3, r1
 8004068:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004070:	887a      	ldrh	r2, [r7, #2]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	4013      	ands	r3, r2
 8004076:	041a      	lsls	r2, r3, #16
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	43d9      	mvns	r1, r3
 800407c:	887b      	ldrh	r3, [r7, #2]
 800407e:	400b      	ands	r3, r1
 8004080:	431a      	orrs	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	619a      	str	r2, [r3, #24]
}
 8004086:	bf00      	nop
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
	...

08004094 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e267      	b.n	8004576 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d075      	beq.n	800419e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040b2:	4b88      	ldr	r3, [pc, #544]	; (80042d4 <HAL_RCC_OscConfig+0x240>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f003 030c 	and.w	r3, r3, #12
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	d00c      	beq.n	80040d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040be:	4b85      	ldr	r3, [pc, #532]	; (80042d4 <HAL_RCC_OscConfig+0x240>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040c6:	2b08      	cmp	r3, #8
 80040c8:	d112      	bne.n	80040f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ca:	4b82      	ldr	r3, [pc, #520]	; (80042d4 <HAL_RCC_OscConfig+0x240>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040d6:	d10b      	bne.n	80040f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d8:	4b7e      	ldr	r3, [pc, #504]	; (80042d4 <HAL_RCC_OscConfig+0x240>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d05b      	beq.n	800419c <HAL_RCC_OscConfig+0x108>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d157      	bne.n	800419c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e242      	b.n	8004576 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f8:	d106      	bne.n	8004108 <HAL_RCC_OscConfig+0x74>
 80040fa:	4b76      	ldr	r3, [pc, #472]	; (80042d4 <HAL_RCC_OscConfig+0x240>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a75      	ldr	r2, [pc, #468]	; (80042d4 <HAL_RCC_OscConfig+0x240>)
 8004100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	e01d      	b.n	8004144 <HAL_RCC_OscConfig+0xb0>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004110:	d10c      	bne.n	800412c <HAL_RCC_OscConfig+0x98>
 8004112:	4b70      	ldr	r3, [pc, #448]	; (80042d4 <HAL_RCC_OscConfig+0x240>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a6f      	ldr	r2, [pc, #444]	; (80042d4 <HAL_RCC_OscConfig+0x240>)
 8004118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	4b6d      	ldr	r3, [pc, #436]	; (80042d4 <HAL_RCC_OscConfig+0x240>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a6c      	ldr	r2, [pc, #432]	; (80042d4 <HAL_RCC_OscConfig+0x240>)
 8004124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	e00b      	b.n	8004144 <HAL_RCC_OscConfig+0xb0>
 800412c:	4b69      	ldr	r3, [pc, #420]	; (80042d4 <HAL_RCC_OscConfig+0x240>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a68      	ldr	r2, [pc, #416]	; (80042d4 <HAL_RCC_OscConfig+0x240>)
 8004132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004136:	6013      	str	r3, [r2, #0]
 8004138:	4b66      	ldr	r3, [pc, #408]	; (80042d4 <HAL_RCC_OscConfig+0x240>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a65      	ldr	r2, [pc, #404]	; (80042d4 <HAL_RCC_OscConfig+0x240>)
 800413e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d013      	beq.n	8004174 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414c:	f7ff f8ca 	bl	80032e4 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004154:	f7ff f8c6 	bl	80032e4 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b64      	cmp	r3, #100	; 0x64
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e207      	b.n	8004576 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004166:	4b5b      	ldr	r3, [pc, #364]	; (80042d4 <HAL_RCC_OscConfig+0x240>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0f0      	beq.n	8004154 <HAL_RCC_OscConfig+0xc0>
 8004172:	e014      	b.n	800419e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004174:	f7ff f8b6 	bl	80032e4 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800417c:	f7ff f8b2 	bl	80032e4 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b64      	cmp	r3, #100	; 0x64
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e1f3      	b.n	8004576 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800418e:	4b51      	ldr	r3, [pc, #324]	; (80042d4 <HAL_RCC_OscConfig+0x240>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f0      	bne.n	800417c <HAL_RCC_OscConfig+0xe8>
 800419a:	e000      	b.n	800419e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800419c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d063      	beq.n	8004272 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041aa:	4b4a      	ldr	r3, [pc, #296]	; (80042d4 <HAL_RCC_OscConfig+0x240>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 030c 	and.w	r3, r3, #12
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00b      	beq.n	80041ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041b6:	4b47      	ldr	r3, [pc, #284]	; (80042d4 <HAL_RCC_OscConfig+0x240>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041be:	2b08      	cmp	r3, #8
 80041c0:	d11c      	bne.n	80041fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041c2:	4b44      	ldr	r3, [pc, #272]	; (80042d4 <HAL_RCC_OscConfig+0x240>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d116      	bne.n	80041fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ce:	4b41      	ldr	r3, [pc, #260]	; (80042d4 <HAL_RCC_OscConfig+0x240>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d005      	beq.n	80041e6 <HAL_RCC_OscConfig+0x152>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d001      	beq.n	80041e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e1c7      	b.n	8004576 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e6:	4b3b      	ldr	r3, [pc, #236]	; (80042d4 <HAL_RCC_OscConfig+0x240>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	4937      	ldr	r1, [pc, #220]	; (80042d4 <HAL_RCC_OscConfig+0x240>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041fa:	e03a      	b.n	8004272 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d020      	beq.n	8004246 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004204:	4b34      	ldr	r3, [pc, #208]	; (80042d8 <HAL_RCC_OscConfig+0x244>)
 8004206:	2201      	movs	r2, #1
 8004208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420a:	f7ff f86b 	bl	80032e4 <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004212:	f7ff f867 	bl	80032e4 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e1a8      	b.n	8004576 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004224:	4b2b      	ldr	r3, [pc, #172]	; (80042d4 <HAL_RCC_OscConfig+0x240>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0f0      	beq.n	8004212 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004230:	4b28      	ldr	r3, [pc, #160]	; (80042d4 <HAL_RCC_OscConfig+0x240>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	4925      	ldr	r1, [pc, #148]	; (80042d4 <HAL_RCC_OscConfig+0x240>)
 8004240:	4313      	orrs	r3, r2
 8004242:	600b      	str	r3, [r1, #0]
 8004244:	e015      	b.n	8004272 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004246:	4b24      	ldr	r3, [pc, #144]	; (80042d8 <HAL_RCC_OscConfig+0x244>)
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424c:	f7ff f84a 	bl	80032e4 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004254:	f7ff f846 	bl	80032e4 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e187      	b.n	8004576 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004266:	4b1b      	ldr	r3, [pc, #108]	; (80042d4 <HAL_RCC_OscConfig+0x240>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1f0      	bne.n	8004254 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d036      	beq.n	80042ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d016      	beq.n	80042b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004286:	4b15      	ldr	r3, [pc, #84]	; (80042dc <HAL_RCC_OscConfig+0x248>)
 8004288:	2201      	movs	r2, #1
 800428a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428c:	f7ff f82a 	bl	80032e4 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004294:	f7ff f826 	bl	80032e4 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e167      	b.n	8004576 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042a6:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <HAL_RCC_OscConfig+0x240>)
 80042a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0f0      	beq.n	8004294 <HAL_RCC_OscConfig+0x200>
 80042b2:	e01b      	b.n	80042ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042b4:	4b09      	ldr	r3, [pc, #36]	; (80042dc <HAL_RCC_OscConfig+0x248>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ba:	f7ff f813 	bl	80032e4 <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042c0:	e00e      	b.n	80042e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042c2:	f7ff f80f 	bl	80032e4 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d907      	bls.n	80042e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e150      	b.n	8004576 <HAL_RCC_OscConfig+0x4e2>
 80042d4:	40023800 	.word	0x40023800
 80042d8:	42470000 	.word	0x42470000
 80042dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042e0:	4b88      	ldr	r3, [pc, #544]	; (8004504 <HAL_RCC_OscConfig+0x470>)
 80042e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1ea      	bne.n	80042c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 8097 	beq.w	8004428 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042fa:	2300      	movs	r3, #0
 80042fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042fe:	4b81      	ldr	r3, [pc, #516]	; (8004504 <HAL_RCC_OscConfig+0x470>)
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10f      	bne.n	800432a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800430a:	2300      	movs	r3, #0
 800430c:	60bb      	str	r3, [r7, #8]
 800430e:	4b7d      	ldr	r3, [pc, #500]	; (8004504 <HAL_RCC_OscConfig+0x470>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	4a7c      	ldr	r2, [pc, #496]	; (8004504 <HAL_RCC_OscConfig+0x470>)
 8004314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004318:	6413      	str	r3, [r2, #64]	; 0x40
 800431a:	4b7a      	ldr	r3, [pc, #488]	; (8004504 <HAL_RCC_OscConfig+0x470>)
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004322:	60bb      	str	r3, [r7, #8]
 8004324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004326:	2301      	movs	r3, #1
 8004328:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800432a:	4b77      	ldr	r3, [pc, #476]	; (8004508 <HAL_RCC_OscConfig+0x474>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004332:	2b00      	cmp	r3, #0
 8004334:	d118      	bne.n	8004368 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004336:	4b74      	ldr	r3, [pc, #464]	; (8004508 <HAL_RCC_OscConfig+0x474>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a73      	ldr	r2, [pc, #460]	; (8004508 <HAL_RCC_OscConfig+0x474>)
 800433c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004342:	f7fe ffcf 	bl	80032e4 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004348:	e008      	b.n	800435c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800434a:	f7fe ffcb 	bl	80032e4 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e10c      	b.n	8004576 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800435c:	4b6a      	ldr	r3, [pc, #424]	; (8004508 <HAL_RCC_OscConfig+0x474>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0f0      	beq.n	800434a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d106      	bne.n	800437e <HAL_RCC_OscConfig+0x2ea>
 8004370:	4b64      	ldr	r3, [pc, #400]	; (8004504 <HAL_RCC_OscConfig+0x470>)
 8004372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004374:	4a63      	ldr	r2, [pc, #396]	; (8004504 <HAL_RCC_OscConfig+0x470>)
 8004376:	f043 0301 	orr.w	r3, r3, #1
 800437a:	6713      	str	r3, [r2, #112]	; 0x70
 800437c:	e01c      	b.n	80043b8 <HAL_RCC_OscConfig+0x324>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	2b05      	cmp	r3, #5
 8004384:	d10c      	bne.n	80043a0 <HAL_RCC_OscConfig+0x30c>
 8004386:	4b5f      	ldr	r3, [pc, #380]	; (8004504 <HAL_RCC_OscConfig+0x470>)
 8004388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438a:	4a5e      	ldr	r2, [pc, #376]	; (8004504 <HAL_RCC_OscConfig+0x470>)
 800438c:	f043 0304 	orr.w	r3, r3, #4
 8004390:	6713      	str	r3, [r2, #112]	; 0x70
 8004392:	4b5c      	ldr	r3, [pc, #368]	; (8004504 <HAL_RCC_OscConfig+0x470>)
 8004394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004396:	4a5b      	ldr	r2, [pc, #364]	; (8004504 <HAL_RCC_OscConfig+0x470>)
 8004398:	f043 0301 	orr.w	r3, r3, #1
 800439c:	6713      	str	r3, [r2, #112]	; 0x70
 800439e:	e00b      	b.n	80043b8 <HAL_RCC_OscConfig+0x324>
 80043a0:	4b58      	ldr	r3, [pc, #352]	; (8004504 <HAL_RCC_OscConfig+0x470>)
 80043a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a4:	4a57      	ldr	r2, [pc, #348]	; (8004504 <HAL_RCC_OscConfig+0x470>)
 80043a6:	f023 0301 	bic.w	r3, r3, #1
 80043aa:	6713      	str	r3, [r2, #112]	; 0x70
 80043ac:	4b55      	ldr	r3, [pc, #340]	; (8004504 <HAL_RCC_OscConfig+0x470>)
 80043ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b0:	4a54      	ldr	r2, [pc, #336]	; (8004504 <HAL_RCC_OscConfig+0x470>)
 80043b2:	f023 0304 	bic.w	r3, r3, #4
 80043b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d015      	beq.n	80043ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c0:	f7fe ff90 	bl	80032e4 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c6:	e00a      	b.n	80043de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043c8:	f7fe ff8c 	bl	80032e4 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e0cb      	b.n	8004576 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043de:	4b49      	ldr	r3, [pc, #292]	; (8004504 <HAL_RCC_OscConfig+0x470>)
 80043e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0ee      	beq.n	80043c8 <HAL_RCC_OscConfig+0x334>
 80043ea:	e014      	b.n	8004416 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ec:	f7fe ff7a 	bl	80032e4 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f2:	e00a      	b.n	800440a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043f4:	f7fe ff76 	bl	80032e4 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004402:	4293      	cmp	r3, r2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e0b5      	b.n	8004576 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800440a:	4b3e      	ldr	r3, [pc, #248]	; (8004504 <HAL_RCC_OscConfig+0x470>)
 800440c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1ee      	bne.n	80043f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004416:	7dfb      	ldrb	r3, [r7, #23]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d105      	bne.n	8004428 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800441c:	4b39      	ldr	r3, [pc, #228]	; (8004504 <HAL_RCC_OscConfig+0x470>)
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	4a38      	ldr	r2, [pc, #224]	; (8004504 <HAL_RCC_OscConfig+0x470>)
 8004422:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004426:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 80a1 	beq.w	8004574 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004432:	4b34      	ldr	r3, [pc, #208]	; (8004504 <HAL_RCC_OscConfig+0x470>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f003 030c 	and.w	r3, r3, #12
 800443a:	2b08      	cmp	r3, #8
 800443c:	d05c      	beq.n	80044f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	2b02      	cmp	r3, #2
 8004444:	d141      	bne.n	80044ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004446:	4b31      	ldr	r3, [pc, #196]	; (800450c <HAL_RCC_OscConfig+0x478>)
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444c:	f7fe ff4a 	bl	80032e4 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004454:	f7fe ff46 	bl	80032e4 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e087      	b.n	8004576 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004466:	4b27      	ldr	r3, [pc, #156]	; (8004504 <HAL_RCC_OscConfig+0x470>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1f0      	bne.n	8004454 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	69da      	ldr	r2, [r3, #28]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	019b      	lsls	r3, r3, #6
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004488:	085b      	lsrs	r3, r3, #1
 800448a:	3b01      	subs	r3, #1
 800448c:	041b      	lsls	r3, r3, #16
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004494:	061b      	lsls	r3, r3, #24
 8004496:	491b      	ldr	r1, [pc, #108]	; (8004504 <HAL_RCC_OscConfig+0x470>)
 8004498:	4313      	orrs	r3, r2
 800449a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800449c:	4b1b      	ldr	r3, [pc, #108]	; (800450c <HAL_RCC_OscConfig+0x478>)
 800449e:	2201      	movs	r2, #1
 80044a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a2:	f7fe ff1f 	bl	80032e4 <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044aa:	f7fe ff1b 	bl	80032e4 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e05c      	b.n	8004576 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044bc:	4b11      	ldr	r3, [pc, #68]	; (8004504 <HAL_RCC_OscConfig+0x470>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0f0      	beq.n	80044aa <HAL_RCC_OscConfig+0x416>
 80044c8:	e054      	b.n	8004574 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ca:	4b10      	ldr	r3, [pc, #64]	; (800450c <HAL_RCC_OscConfig+0x478>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d0:	f7fe ff08 	bl	80032e4 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044d8:	f7fe ff04 	bl	80032e4 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e045      	b.n	8004576 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ea:	4b06      	ldr	r3, [pc, #24]	; (8004504 <HAL_RCC_OscConfig+0x470>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f0      	bne.n	80044d8 <HAL_RCC_OscConfig+0x444>
 80044f6:	e03d      	b.n	8004574 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d107      	bne.n	8004510 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e038      	b.n	8004576 <HAL_RCC_OscConfig+0x4e2>
 8004504:	40023800 	.word	0x40023800
 8004508:	40007000 	.word	0x40007000
 800450c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004510:	4b1b      	ldr	r3, [pc, #108]	; (8004580 <HAL_RCC_OscConfig+0x4ec>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d028      	beq.n	8004570 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004528:	429a      	cmp	r2, r3
 800452a:	d121      	bne.n	8004570 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004536:	429a      	cmp	r2, r3
 8004538:	d11a      	bne.n	8004570 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004540:	4013      	ands	r3, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004546:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004548:	4293      	cmp	r3, r2
 800454a:	d111      	bne.n	8004570 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004556:	085b      	lsrs	r3, r3, #1
 8004558:	3b01      	subs	r3, #1
 800455a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800455c:	429a      	cmp	r2, r3
 800455e:	d107      	bne.n	8004570 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800456c:	429a      	cmp	r2, r3
 800456e:	d001      	beq.n	8004574 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3718      	adds	r7, #24
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	40023800 	.word	0x40023800

08004584 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e0cc      	b.n	8004732 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004598:	4b68      	ldr	r3, [pc, #416]	; (800473c <HAL_RCC_ClockConfig+0x1b8>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d90c      	bls.n	80045c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a6:	4b65      	ldr	r3, [pc, #404]	; (800473c <HAL_RCC_ClockConfig+0x1b8>)
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ae:	4b63      	ldr	r3, [pc, #396]	; (800473c <HAL_RCC_ClockConfig+0x1b8>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d001      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e0b8      	b.n	8004732 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d020      	beq.n	800460e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045d8:	4b59      	ldr	r3, [pc, #356]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	4a58      	ldr	r2, [pc, #352]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 80045de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d005      	beq.n	80045fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045f0:	4b53      	ldr	r3, [pc, #332]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	4a52      	ldr	r2, [pc, #328]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 80045f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045fc:	4b50      	ldr	r3, [pc, #320]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	494d      	ldr	r1, [pc, #308]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 800460a:	4313      	orrs	r3, r2
 800460c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d044      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d107      	bne.n	8004632 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004622:	4b47      	ldr	r3, [pc, #284]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d119      	bne.n	8004662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e07f      	b.n	8004732 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2b02      	cmp	r3, #2
 8004638:	d003      	beq.n	8004642 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800463e:	2b03      	cmp	r3, #3
 8004640:	d107      	bne.n	8004652 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004642:	4b3f      	ldr	r3, [pc, #252]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d109      	bne.n	8004662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e06f      	b.n	8004732 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004652:	4b3b      	ldr	r3, [pc, #236]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e067      	b.n	8004732 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004662:	4b37      	ldr	r3, [pc, #220]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f023 0203 	bic.w	r2, r3, #3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	4934      	ldr	r1, [pc, #208]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 8004670:	4313      	orrs	r3, r2
 8004672:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004674:	f7fe fe36 	bl	80032e4 <HAL_GetTick>
 8004678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800467a:	e00a      	b.n	8004692 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800467c:	f7fe fe32 	bl	80032e4 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	f241 3288 	movw	r2, #5000	; 0x1388
 800468a:	4293      	cmp	r3, r2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e04f      	b.n	8004732 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004692:	4b2b      	ldr	r3, [pc, #172]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 020c 	and.w	r2, r3, #12
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d1eb      	bne.n	800467c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046a4:	4b25      	ldr	r3, [pc, #148]	; (800473c <HAL_RCC_ClockConfig+0x1b8>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d20c      	bcs.n	80046cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b2:	4b22      	ldr	r3, [pc, #136]	; (800473c <HAL_RCC_ClockConfig+0x1b8>)
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	b2d2      	uxtb	r2, r2
 80046b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ba:	4b20      	ldr	r3, [pc, #128]	; (800473c <HAL_RCC_ClockConfig+0x1b8>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d001      	beq.n	80046cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e032      	b.n	8004732 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d008      	beq.n	80046ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046d8:	4b19      	ldr	r3, [pc, #100]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	4916      	ldr	r1, [pc, #88]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0308 	and.w	r3, r3, #8
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d009      	beq.n	800470a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046f6:	4b12      	ldr	r3, [pc, #72]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	490e      	ldr	r1, [pc, #56]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 8004706:	4313      	orrs	r3, r2
 8004708:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800470a:	f000 f821 	bl	8004750 <HAL_RCC_GetSysClockFreq>
 800470e:	4602      	mov	r2, r0
 8004710:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	091b      	lsrs	r3, r3, #4
 8004716:	f003 030f 	and.w	r3, r3, #15
 800471a:	490a      	ldr	r1, [pc, #40]	; (8004744 <HAL_RCC_ClockConfig+0x1c0>)
 800471c:	5ccb      	ldrb	r3, [r1, r3]
 800471e:	fa22 f303 	lsr.w	r3, r2, r3
 8004722:	4a09      	ldr	r2, [pc, #36]	; (8004748 <HAL_RCC_ClockConfig+0x1c4>)
 8004724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004726:	4b09      	ldr	r3, [pc, #36]	; (800474c <HAL_RCC_ClockConfig+0x1c8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f7fe fd96 	bl	800325c <HAL_InitTick>

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	40023c00 	.word	0x40023c00
 8004740:	40023800 	.word	0x40023800
 8004744:	08006e54 	.word	0x08006e54
 8004748:	20000000 	.word	0x20000000
 800474c:	20000004 	.word	0x20000004

08004750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004754:	b090      	sub	sp, #64	; 0x40
 8004756:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004758:	2300      	movs	r3, #0
 800475a:	637b      	str	r3, [r7, #52]	; 0x34
 800475c:	2300      	movs	r3, #0
 800475e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004760:	2300      	movs	r3, #0
 8004762:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004768:	4b59      	ldr	r3, [pc, #356]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f003 030c 	and.w	r3, r3, #12
 8004770:	2b08      	cmp	r3, #8
 8004772:	d00d      	beq.n	8004790 <HAL_RCC_GetSysClockFreq+0x40>
 8004774:	2b08      	cmp	r3, #8
 8004776:	f200 80a1 	bhi.w	80048bc <HAL_RCC_GetSysClockFreq+0x16c>
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <HAL_RCC_GetSysClockFreq+0x34>
 800477e:	2b04      	cmp	r3, #4
 8004780:	d003      	beq.n	800478a <HAL_RCC_GetSysClockFreq+0x3a>
 8004782:	e09b      	b.n	80048bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004784:	4b53      	ldr	r3, [pc, #332]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004786:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004788:	e09b      	b.n	80048c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800478a:	4b53      	ldr	r3, [pc, #332]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800478c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800478e:	e098      	b.n	80048c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004790:	4b4f      	ldr	r3, [pc, #316]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004798:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800479a:	4b4d      	ldr	r3, [pc, #308]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d028      	beq.n	80047f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047a6:	4b4a      	ldr	r3, [pc, #296]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	099b      	lsrs	r3, r3, #6
 80047ac:	2200      	movs	r2, #0
 80047ae:	623b      	str	r3, [r7, #32]
 80047b0:	627a      	str	r2, [r7, #36]	; 0x24
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80047b8:	2100      	movs	r1, #0
 80047ba:	4b47      	ldr	r3, [pc, #284]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80047bc:	fb03 f201 	mul.w	r2, r3, r1
 80047c0:	2300      	movs	r3, #0
 80047c2:	fb00 f303 	mul.w	r3, r0, r3
 80047c6:	4413      	add	r3, r2
 80047c8:	4a43      	ldr	r2, [pc, #268]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80047ca:	fba0 1202 	umull	r1, r2, r0, r2
 80047ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047d0:	460a      	mov	r2, r1
 80047d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80047d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047d6:	4413      	add	r3, r2
 80047d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047dc:	2200      	movs	r2, #0
 80047de:	61bb      	str	r3, [r7, #24]
 80047e0:	61fa      	str	r2, [r7, #28]
 80047e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80047ea:	f7fc f9c3 	bl	8000b74 <__aeabi_uldivmod>
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	4613      	mov	r3, r2
 80047f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047f6:	e053      	b.n	80048a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047f8:	4b35      	ldr	r3, [pc, #212]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	099b      	lsrs	r3, r3, #6
 80047fe:	2200      	movs	r2, #0
 8004800:	613b      	str	r3, [r7, #16]
 8004802:	617a      	str	r2, [r7, #20]
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800480a:	f04f 0b00 	mov.w	fp, #0
 800480e:	4652      	mov	r2, sl
 8004810:	465b      	mov	r3, fp
 8004812:	f04f 0000 	mov.w	r0, #0
 8004816:	f04f 0100 	mov.w	r1, #0
 800481a:	0159      	lsls	r1, r3, #5
 800481c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004820:	0150      	lsls	r0, r2, #5
 8004822:	4602      	mov	r2, r0
 8004824:	460b      	mov	r3, r1
 8004826:	ebb2 080a 	subs.w	r8, r2, sl
 800482a:	eb63 090b 	sbc.w	r9, r3, fp
 800482e:	f04f 0200 	mov.w	r2, #0
 8004832:	f04f 0300 	mov.w	r3, #0
 8004836:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800483a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800483e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004842:	ebb2 0408 	subs.w	r4, r2, r8
 8004846:	eb63 0509 	sbc.w	r5, r3, r9
 800484a:	f04f 0200 	mov.w	r2, #0
 800484e:	f04f 0300 	mov.w	r3, #0
 8004852:	00eb      	lsls	r3, r5, #3
 8004854:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004858:	00e2      	lsls	r2, r4, #3
 800485a:	4614      	mov	r4, r2
 800485c:	461d      	mov	r5, r3
 800485e:	eb14 030a 	adds.w	r3, r4, sl
 8004862:	603b      	str	r3, [r7, #0]
 8004864:	eb45 030b 	adc.w	r3, r5, fp
 8004868:	607b      	str	r3, [r7, #4]
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	f04f 0300 	mov.w	r3, #0
 8004872:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004876:	4629      	mov	r1, r5
 8004878:	028b      	lsls	r3, r1, #10
 800487a:	4621      	mov	r1, r4
 800487c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004880:	4621      	mov	r1, r4
 8004882:	028a      	lsls	r2, r1, #10
 8004884:	4610      	mov	r0, r2
 8004886:	4619      	mov	r1, r3
 8004888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800488a:	2200      	movs	r2, #0
 800488c:	60bb      	str	r3, [r7, #8]
 800488e:	60fa      	str	r2, [r7, #12]
 8004890:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004894:	f7fc f96e 	bl	8000b74 <__aeabi_uldivmod>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	4613      	mov	r3, r2
 800489e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048a0:	4b0b      	ldr	r3, [pc, #44]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	0c1b      	lsrs	r3, r3, #16
 80048a6:	f003 0303 	and.w	r3, r3, #3
 80048aa:	3301      	adds	r3, #1
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80048b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80048ba:	e002      	b.n	80048c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048bc:	4b05      	ldr	r3, [pc, #20]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80048be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80048c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3740      	adds	r7, #64	; 0x40
 80048c8:	46bd      	mov	sp, r7
 80048ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ce:	bf00      	nop
 80048d0:	40023800 	.word	0x40023800
 80048d4:	00f42400 	.word	0x00f42400
 80048d8:	017d7840 	.word	0x017d7840

080048dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048e0:	4b03      	ldr	r3, [pc, #12]	; (80048f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80048e2:	681b      	ldr	r3, [r3, #0]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	20000000 	.word	0x20000000

080048f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048f8:	f7ff fff0 	bl	80048dc <HAL_RCC_GetHCLKFreq>
 80048fc:	4602      	mov	r2, r0
 80048fe:	4b05      	ldr	r3, [pc, #20]	; (8004914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	0a9b      	lsrs	r3, r3, #10
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	4903      	ldr	r1, [pc, #12]	; (8004918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800490a:	5ccb      	ldrb	r3, [r1, r3]
 800490c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004910:	4618      	mov	r0, r3
 8004912:	bd80      	pop	{r7, pc}
 8004914:	40023800 	.word	0x40023800
 8004918:	08006e64 	.word	0x08006e64

0800491c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004920:	f7ff ffdc 	bl	80048dc <HAL_RCC_GetHCLKFreq>
 8004924:	4602      	mov	r2, r0
 8004926:	4b05      	ldr	r3, [pc, #20]	; (800493c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	0b5b      	lsrs	r3, r3, #13
 800492c:	f003 0307 	and.w	r3, r3, #7
 8004930:	4903      	ldr	r1, [pc, #12]	; (8004940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004932:	5ccb      	ldrb	r3, [r1, r3]
 8004934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004938:	4618      	mov	r0, r3
 800493a:	bd80      	pop	{r7, pc}
 800493c:	40023800 	.word	0x40023800
 8004940:	08006e64 	.word	0x08006e64

08004944 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e041      	b.n	80049da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d106      	bne.n	8004970 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fe f9be 	bl	8002cec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	3304      	adds	r3, #4
 8004980:	4619      	mov	r1, r3
 8004982:	4610      	mov	r0, r2
 8004984:	f000 fd2c 	bl	80053e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b082      	sub	sp, #8
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e041      	b.n	8004a78 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d106      	bne.n	8004a0e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f839 	bl	8004a80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2202      	movs	r2, #2
 8004a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	4619      	mov	r1, r3
 8004a20:	4610      	mov	r0, r2
 8004a22:	f000 fcdd 	bl	80053e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d109      	bne.n	8004ab8 <HAL_TIM_PWM_Start+0x24>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	bf14      	ite	ne
 8004ab0:	2301      	movne	r3, #1
 8004ab2:	2300      	moveq	r3, #0
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	e022      	b.n	8004afe <HAL_TIM_PWM_Start+0x6a>
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	2b04      	cmp	r3, #4
 8004abc:	d109      	bne.n	8004ad2 <HAL_TIM_PWM_Start+0x3e>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	bf14      	ite	ne
 8004aca:	2301      	movne	r3, #1
 8004acc:	2300      	moveq	r3, #0
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	e015      	b.n	8004afe <HAL_TIM_PWM_Start+0x6a>
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	d109      	bne.n	8004aec <HAL_TIM_PWM_Start+0x58>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	bf14      	ite	ne
 8004ae4:	2301      	movne	r3, #1
 8004ae6:	2300      	moveq	r3, #0
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	e008      	b.n	8004afe <HAL_TIM_PWM_Start+0x6a>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	bf14      	ite	ne
 8004af8:	2301      	movne	r3, #1
 8004afa:	2300      	moveq	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e068      	b.n	8004bd8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d104      	bne.n	8004b16 <HAL_TIM_PWM_Start+0x82>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b14:	e013      	b.n	8004b3e <HAL_TIM_PWM_Start+0xaa>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b04      	cmp	r3, #4
 8004b1a:	d104      	bne.n	8004b26 <HAL_TIM_PWM_Start+0x92>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b24:	e00b      	b.n	8004b3e <HAL_TIM_PWM_Start+0xaa>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b08      	cmp	r3, #8
 8004b2a:	d104      	bne.n	8004b36 <HAL_TIM_PWM_Start+0xa2>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b34:	e003      	b.n	8004b3e <HAL_TIM_PWM_Start+0xaa>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2202      	movs	r2, #2
 8004b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2201      	movs	r2, #1
 8004b44:	6839      	ldr	r1, [r7, #0]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 fefc 	bl	8005944 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a23      	ldr	r2, [pc, #140]	; (8004be0 <HAL_TIM_PWM_Start+0x14c>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d107      	bne.n	8004b66 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a1d      	ldr	r2, [pc, #116]	; (8004be0 <HAL_TIM_PWM_Start+0x14c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d018      	beq.n	8004ba2 <HAL_TIM_PWM_Start+0x10e>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b78:	d013      	beq.n	8004ba2 <HAL_TIM_PWM_Start+0x10e>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a19      	ldr	r2, [pc, #100]	; (8004be4 <HAL_TIM_PWM_Start+0x150>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d00e      	beq.n	8004ba2 <HAL_TIM_PWM_Start+0x10e>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a17      	ldr	r2, [pc, #92]	; (8004be8 <HAL_TIM_PWM_Start+0x154>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d009      	beq.n	8004ba2 <HAL_TIM_PWM_Start+0x10e>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a16      	ldr	r2, [pc, #88]	; (8004bec <HAL_TIM_PWM_Start+0x158>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d004      	beq.n	8004ba2 <HAL_TIM_PWM_Start+0x10e>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a14      	ldr	r2, [pc, #80]	; (8004bf0 <HAL_TIM_PWM_Start+0x15c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d111      	bne.n	8004bc6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2b06      	cmp	r3, #6
 8004bb2:	d010      	beq.n	8004bd6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0201 	orr.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc4:	e007      	b.n	8004bd6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f042 0201 	orr.w	r2, r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	40010000 	.word	0x40010000
 8004be4:	40000400 	.word	0x40000400
 8004be8:	40000800 	.word	0x40000800
 8004bec:	40000c00 	.word	0x40000c00
 8004bf0:	40014000 	.word	0x40014000

08004bf4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e097      	b.n	8004d38 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d106      	bne.n	8004c22 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7fd ff43 	bl	8002aa8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2202      	movs	r2, #2
 8004c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6812      	ldr	r2, [r2, #0]
 8004c34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c38:	f023 0307 	bic.w	r3, r3, #7
 8004c3c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	3304      	adds	r3, #4
 8004c46:	4619      	mov	r1, r3
 8004c48:	4610      	mov	r0, r2
 8004c4a:	f000 fbc9 	bl	80053e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c76:	f023 0303 	bic.w	r3, r3, #3
 8004c7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	021b      	lsls	r3, r3, #8
 8004c86:	4313      	orrs	r3, r2
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004c94:	f023 030c 	bic.w	r3, r3, #12
 8004c98:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ca0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ca4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	68da      	ldr	r2, [r3, #12]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	021b      	lsls	r3, r3, #8
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	011a      	lsls	r2, r3, #4
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	031b      	lsls	r3, r3, #12
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004cd2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004cda:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	011b      	lsls	r3, r3, #4
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3718      	adds	r7, #24
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d50:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d58:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d60:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d68:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d110      	bne.n	8004d92 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d70:	7bfb      	ldrb	r3, [r7, #15]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d102      	bne.n	8004d7c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d76:	7b7b      	ldrb	r3, [r7, #13]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d001      	beq.n	8004d80 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e089      	b.n	8004e94 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d90:	e031      	b.n	8004df6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	d110      	bne.n	8004dba <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d98:	7bbb      	ldrb	r3, [r7, #14]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d102      	bne.n	8004da4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d9e:	7b3b      	ldrb	r3, [r7, #12]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d001      	beq.n	8004da8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e075      	b.n	8004e94 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004db8:	e01d      	b.n	8004df6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dba:	7bfb      	ldrb	r3, [r7, #15]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d108      	bne.n	8004dd2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dc0:	7bbb      	ldrb	r3, [r7, #14]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d105      	bne.n	8004dd2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dc6:	7b7b      	ldrb	r3, [r7, #13]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d102      	bne.n	8004dd2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004dcc:	7b3b      	ldrb	r3, [r7, #12]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d001      	beq.n	8004dd6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e05e      	b.n	8004e94 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2202      	movs	r2, #2
 8004dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2202      	movs	r2, #2
 8004de2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2202      	movs	r2, #2
 8004dea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2202      	movs	r2, #2
 8004df2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d010      	beq.n	8004e24 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004e02:	e01f      	b.n	8004e44 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 fd99 	bl	8005944 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f042 0202 	orr.w	r2, r2, #2
 8004e20:	60da      	str	r2, [r3, #12]
      break;
 8004e22:	e02e      	b.n	8004e82 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	2104      	movs	r1, #4
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 fd89 	bl	8005944 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f042 0204 	orr.w	r2, r2, #4
 8004e40:	60da      	str	r2, [r3, #12]
      break;
 8004e42:	e01e      	b.n	8004e82 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fd79 	bl	8005944 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2201      	movs	r2, #1
 8004e58:	2104      	movs	r1, #4
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 fd72 	bl	8005944 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0202 	orr.w	r2, r2, #2
 8004e6e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0204 	orr.w	r2, r2, #4
 8004e7e:	60da      	str	r2, [r3, #12]
      break;
 8004e80:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f042 0201 	orr.w	r2, r2, #1
 8004e90:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d020      	beq.n	8004f00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d01b      	beq.n	8004f00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f06f 0202 	mvn.w	r2, #2
 8004ed0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	f003 0303 	and.w	r3, r3, #3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7fc fd70 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
 8004eec:	e005      	b.n	8004efa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 fa57 	bl	80053a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 fa5e 	bl	80053b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f003 0304 	and.w	r3, r3, #4
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d020      	beq.n	8004f4c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d01b      	beq.n	8004f4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f06f 0204 	mvn.w	r2, #4
 8004f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2202      	movs	r2, #2
 8004f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7fc fd4a 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
 8004f38:	e005      	b.n	8004f46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 fa31 	bl	80053a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 fa38 	bl	80053b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	f003 0308 	and.w	r3, r3, #8
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d020      	beq.n	8004f98 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f003 0308 	and.w	r3, r3, #8
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d01b      	beq.n	8004f98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f06f 0208 	mvn.w	r2, #8
 8004f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2204      	movs	r2, #4
 8004f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7fc fd24 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
 8004f84:	e005      	b.n	8004f92 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 fa0b 	bl	80053a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 fa12 	bl	80053b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	f003 0310 	and.w	r3, r3, #16
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d020      	beq.n	8004fe4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f003 0310 	and.w	r3, r3, #16
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d01b      	beq.n	8004fe4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f06f 0210 	mvn.w	r2, #16
 8004fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2208      	movs	r2, #8
 8004fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fc fcfe 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
 8004fd0:	e005      	b.n	8004fde <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f9e5 	bl	80053a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 f9ec 	bl	80053b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00c      	beq.n	8005008 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d007      	beq.n	8005008 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f06f 0201 	mvn.w	r2, #1
 8005000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f9c3 	bl	800538e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00c      	beq.n	800502c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005018:	2b00      	cmp	r3, #0
 800501a:	d007      	beq.n	800502c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 fd2a 	bl	8005a80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00c      	beq.n	8005050 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503c:	2b00      	cmp	r3, #0
 800503e:	d007      	beq.n	8005050 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f9bd 	bl	80053ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f003 0320 	and.w	r3, r3, #32
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00c      	beq.n	8005074 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f003 0320 	and.w	r3, r3, #32
 8005060:	2b00      	cmp	r3, #0
 8005062:	d007      	beq.n	8005074 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0220 	mvn.w	r2, #32
 800506c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fcfc 	bl	8005a6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005074:	bf00      	nop
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005088:	2300      	movs	r3, #0
 800508a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005092:	2b01      	cmp	r3, #1
 8005094:	d101      	bne.n	800509a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005096:	2302      	movs	r3, #2
 8005098:	e0ae      	b.n	80051f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b0c      	cmp	r3, #12
 80050a6:	f200 809f 	bhi.w	80051e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80050aa:	a201      	add	r2, pc, #4	; (adr r2, 80050b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b0:	080050e5 	.word	0x080050e5
 80050b4:	080051e9 	.word	0x080051e9
 80050b8:	080051e9 	.word	0x080051e9
 80050bc:	080051e9 	.word	0x080051e9
 80050c0:	08005125 	.word	0x08005125
 80050c4:	080051e9 	.word	0x080051e9
 80050c8:	080051e9 	.word	0x080051e9
 80050cc:	080051e9 	.word	0x080051e9
 80050d0:	08005167 	.word	0x08005167
 80050d4:	080051e9 	.word	0x080051e9
 80050d8:	080051e9 	.word	0x080051e9
 80050dc:	080051e9 	.word	0x080051e9
 80050e0:	080051a7 	.word	0x080051a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 fa04 	bl	80054f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	699a      	ldr	r2, [r3, #24]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0208 	orr.w	r2, r2, #8
 80050fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699a      	ldr	r2, [r3, #24]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 0204 	bic.w	r2, r2, #4
 800510e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6999      	ldr	r1, [r3, #24]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	691a      	ldr	r2, [r3, #16]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	619a      	str	r2, [r3, #24]
      break;
 8005122:	e064      	b.n	80051ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68b9      	ldr	r1, [r7, #8]
 800512a:	4618      	mov	r0, r3
 800512c:	f000 fa4a 	bl	80055c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	699a      	ldr	r2, [r3, #24]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800513e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	699a      	ldr	r2, [r3, #24]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800514e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6999      	ldr	r1, [r3, #24]
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	021a      	lsls	r2, r3, #8
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	619a      	str	r2, [r3, #24]
      break;
 8005164:	e043      	b.n	80051ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68b9      	ldr	r1, [r7, #8]
 800516c:	4618      	mov	r0, r3
 800516e:	f000 fa95 	bl	800569c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	69da      	ldr	r2, [r3, #28]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f042 0208 	orr.w	r2, r2, #8
 8005180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	69da      	ldr	r2, [r3, #28]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 0204 	bic.w	r2, r2, #4
 8005190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	69d9      	ldr	r1, [r3, #28]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	691a      	ldr	r2, [r3, #16]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	61da      	str	r2, [r3, #28]
      break;
 80051a4:	e023      	b.n	80051ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68b9      	ldr	r1, [r7, #8]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 fadf 	bl	8005770 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	69da      	ldr	r2, [r3, #28]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	69da      	ldr	r2, [r3, #28]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	69d9      	ldr	r1, [r3, #28]
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	021a      	lsls	r2, r3, #8
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	61da      	str	r2, [r3, #28]
      break;
 80051e6:	e002      	b.n	80051ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	75fb      	strb	r3, [r7, #23]
      break;
 80051ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3718      	adds	r7, #24
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005214:	2b01      	cmp	r3, #1
 8005216:	d101      	bne.n	800521c <HAL_TIM_ConfigClockSource+0x1c>
 8005218:	2302      	movs	r3, #2
 800521a:	e0b4      	b.n	8005386 <HAL_TIM_ConfigClockSource+0x186>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800523a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005242:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005254:	d03e      	beq.n	80052d4 <HAL_TIM_ConfigClockSource+0xd4>
 8005256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800525a:	f200 8087 	bhi.w	800536c <HAL_TIM_ConfigClockSource+0x16c>
 800525e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005262:	f000 8086 	beq.w	8005372 <HAL_TIM_ConfigClockSource+0x172>
 8005266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800526a:	d87f      	bhi.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
 800526c:	2b70      	cmp	r3, #112	; 0x70
 800526e:	d01a      	beq.n	80052a6 <HAL_TIM_ConfigClockSource+0xa6>
 8005270:	2b70      	cmp	r3, #112	; 0x70
 8005272:	d87b      	bhi.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
 8005274:	2b60      	cmp	r3, #96	; 0x60
 8005276:	d050      	beq.n	800531a <HAL_TIM_ConfigClockSource+0x11a>
 8005278:	2b60      	cmp	r3, #96	; 0x60
 800527a:	d877      	bhi.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
 800527c:	2b50      	cmp	r3, #80	; 0x50
 800527e:	d03c      	beq.n	80052fa <HAL_TIM_ConfigClockSource+0xfa>
 8005280:	2b50      	cmp	r3, #80	; 0x50
 8005282:	d873      	bhi.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
 8005284:	2b40      	cmp	r3, #64	; 0x40
 8005286:	d058      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x13a>
 8005288:	2b40      	cmp	r3, #64	; 0x40
 800528a:	d86f      	bhi.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
 800528c:	2b30      	cmp	r3, #48	; 0x30
 800528e:	d064      	beq.n	800535a <HAL_TIM_ConfigClockSource+0x15a>
 8005290:	2b30      	cmp	r3, #48	; 0x30
 8005292:	d86b      	bhi.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
 8005294:	2b20      	cmp	r3, #32
 8005296:	d060      	beq.n	800535a <HAL_TIM_ConfigClockSource+0x15a>
 8005298:	2b20      	cmp	r3, #32
 800529a:	d867      	bhi.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
 800529c:	2b00      	cmp	r3, #0
 800529e:	d05c      	beq.n	800535a <HAL_TIM_ConfigClockSource+0x15a>
 80052a0:	2b10      	cmp	r3, #16
 80052a2:	d05a      	beq.n	800535a <HAL_TIM_ConfigClockSource+0x15a>
 80052a4:	e062      	b.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052b6:	f000 fb25 	bl	8005904 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	609a      	str	r2, [r3, #8]
      break;
 80052d2:	e04f      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052e4:	f000 fb0e 	bl	8005904 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689a      	ldr	r2, [r3, #8]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052f6:	609a      	str	r2, [r3, #8]
      break;
 80052f8:	e03c      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005306:	461a      	mov	r2, r3
 8005308:	f000 fa82 	bl	8005810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2150      	movs	r1, #80	; 0x50
 8005312:	4618      	mov	r0, r3
 8005314:	f000 fadb 	bl	80058ce <TIM_ITRx_SetConfig>
      break;
 8005318:	e02c      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005326:	461a      	mov	r2, r3
 8005328:	f000 faa1 	bl	800586e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2160      	movs	r1, #96	; 0x60
 8005332:	4618      	mov	r0, r3
 8005334:	f000 facb 	bl	80058ce <TIM_ITRx_SetConfig>
      break;
 8005338:	e01c      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005346:	461a      	mov	r2, r3
 8005348:	f000 fa62 	bl	8005810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2140      	movs	r1, #64	; 0x40
 8005352:	4618      	mov	r0, r3
 8005354:	f000 fabb 	bl	80058ce <TIM_ITRx_SetConfig>
      break;
 8005358:	e00c      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4619      	mov	r1, r3
 8005364:	4610      	mov	r0, r2
 8005366:	f000 fab2 	bl	80058ce <TIM_ITRx_SetConfig>
      break;
 800536a:	e003      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	73fb      	strb	r3, [r7, #15]
      break;
 8005370:	e000      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005372:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005384:	7bfb      	ldrb	r3, [r7, #15]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800538e:	b480      	push	{r7}
 8005390:	b083      	sub	sp, #12
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005396:	bf00      	nop
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b083      	sub	sp, #12
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053be:	bf00      	nop
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b083      	sub	sp, #12
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053d2:	bf00      	nop
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
	...

080053e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a3a      	ldr	r2, [pc, #232]	; (80054dc <TIM_Base_SetConfig+0xfc>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d00f      	beq.n	8005418 <TIM_Base_SetConfig+0x38>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053fe:	d00b      	beq.n	8005418 <TIM_Base_SetConfig+0x38>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a37      	ldr	r2, [pc, #220]	; (80054e0 <TIM_Base_SetConfig+0x100>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d007      	beq.n	8005418 <TIM_Base_SetConfig+0x38>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a36      	ldr	r2, [pc, #216]	; (80054e4 <TIM_Base_SetConfig+0x104>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d003      	beq.n	8005418 <TIM_Base_SetConfig+0x38>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a35      	ldr	r2, [pc, #212]	; (80054e8 <TIM_Base_SetConfig+0x108>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d108      	bne.n	800542a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800541e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	4313      	orrs	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a2b      	ldr	r2, [pc, #172]	; (80054dc <TIM_Base_SetConfig+0xfc>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d01b      	beq.n	800546a <TIM_Base_SetConfig+0x8a>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005438:	d017      	beq.n	800546a <TIM_Base_SetConfig+0x8a>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a28      	ldr	r2, [pc, #160]	; (80054e0 <TIM_Base_SetConfig+0x100>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d013      	beq.n	800546a <TIM_Base_SetConfig+0x8a>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a27      	ldr	r2, [pc, #156]	; (80054e4 <TIM_Base_SetConfig+0x104>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d00f      	beq.n	800546a <TIM_Base_SetConfig+0x8a>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a26      	ldr	r2, [pc, #152]	; (80054e8 <TIM_Base_SetConfig+0x108>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d00b      	beq.n	800546a <TIM_Base_SetConfig+0x8a>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a25      	ldr	r2, [pc, #148]	; (80054ec <TIM_Base_SetConfig+0x10c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d007      	beq.n	800546a <TIM_Base_SetConfig+0x8a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a24      	ldr	r2, [pc, #144]	; (80054f0 <TIM_Base_SetConfig+0x110>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d003      	beq.n	800546a <TIM_Base_SetConfig+0x8a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a23      	ldr	r2, [pc, #140]	; (80054f4 <TIM_Base_SetConfig+0x114>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d108      	bne.n	800547c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	4313      	orrs	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a0e      	ldr	r2, [pc, #56]	; (80054dc <TIM_Base_SetConfig+0xfc>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d103      	bne.n	80054b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	691a      	ldr	r2, [r3, #16]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d105      	bne.n	80054ce <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f023 0201 	bic.w	r2, r3, #1
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	611a      	str	r2, [r3, #16]
  }
}
 80054ce:	bf00      	nop
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	40010000 	.word	0x40010000
 80054e0:	40000400 	.word	0x40000400
 80054e4:	40000800 	.word	0x40000800
 80054e8:	40000c00 	.word	0x40000c00
 80054ec:	40014000 	.word	0x40014000
 80054f0:	40014400 	.word	0x40014400
 80054f4:	40014800 	.word	0x40014800

080054f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b087      	sub	sp, #28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	f023 0201 	bic.w	r2, r3, #1
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f023 0303 	bic.w	r3, r3, #3
 800552e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	4313      	orrs	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f023 0302 	bic.w	r3, r3, #2
 8005540:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	4313      	orrs	r3, r2
 800554a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a1c      	ldr	r2, [pc, #112]	; (80055c0 <TIM_OC1_SetConfig+0xc8>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d10c      	bne.n	800556e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f023 0308 	bic.w	r3, r3, #8
 800555a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	4313      	orrs	r3, r2
 8005564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f023 0304 	bic.w	r3, r3, #4
 800556c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a13      	ldr	r2, [pc, #76]	; (80055c0 <TIM_OC1_SetConfig+0xc8>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d111      	bne.n	800559a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800557c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005584:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	4313      	orrs	r3, r2
 8005598:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	621a      	str	r2, [r3, #32]
}
 80055b4:	bf00      	nop
 80055b6:	371c      	adds	r7, #28
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	40010000 	.word	0x40010000

080055c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	f023 0210 	bic.w	r2, r3, #16
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	021b      	lsls	r3, r3, #8
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	4313      	orrs	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f023 0320 	bic.w	r3, r3, #32
 800560e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	011b      	lsls	r3, r3, #4
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	4313      	orrs	r3, r2
 800561a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a1e      	ldr	r2, [pc, #120]	; (8005698 <TIM_OC2_SetConfig+0xd4>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d10d      	bne.n	8005640 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800562a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	011b      	lsls	r3, r3, #4
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	4313      	orrs	r3, r2
 8005636:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800563e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a15      	ldr	r2, [pc, #84]	; (8005698 <TIM_OC2_SetConfig+0xd4>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d113      	bne.n	8005670 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800564e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005656:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	4313      	orrs	r3, r2
 8005662:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	4313      	orrs	r3, r2
 800566e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	621a      	str	r2, [r3, #32]
}
 800568a:	bf00      	nop
 800568c:	371c      	adds	r7, #28
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	40010000 	.word	0x40010000

0800569c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800569c:	b480      	push	{r7}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f023 0303 	bic.w	r3, r3, #3
 80056d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	4313      	orrs	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	021b      	lsls	r3, r3, #8
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a1d      	ldr	r2, [pc, #116]	; (800576c <TIM_OC3_SetConfig+0xd0>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d10d      	bne.n	8005716 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005700:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	021b      	lsls	r3, r3, #8
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	4313      	orrs	r3, r2
 800570c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005714:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a14      	ldr	r2, [pc, #80]	; (800576c <TIM_OC3_SetConfig+0xd0>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d113      	bne.n	8005746 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800572c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	4313      	orrs	r3, r2
 8005738:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	011b      	lsls	r3, r3, #4
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	4313      	orrs	r3, r2
 8005744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	621a      	str	r2, [r3, #32]
}
 8005760:	bf00      	nop
 8005762:	371c      	adds	r7, #28
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	40010000 	.word	0x40010000

08005770 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800579e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	021b      	lsls	r3, r3, #8
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	031b      	lsls	r3, r3, #12
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a10      	ldr	r2, [pc, #64]	; (800580c <TIM_OC4_SetConfig+0x9c>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d109      	bne.n	80057e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	019b      	lsls	r3, r3, #6
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	621a      	str	r2, [r3, #32]
}
 80057fe:	bf00      	nop
 8005800:	371c      	adds	r7, #28
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	40010000 	.word	0x40010000

08005810 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	f023 0201 	bic.w	r2, r3, #1
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800583a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	011b      	lsls	r3, r3, #4
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f023 030a 	bic.w	r3, r3, #10
 800584c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	4313      	orrs	r3, r2
 8005854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	621a      	str	r2, [r3, #32]
}
 8005862:	bf00      	nop
 8005864:	371c      	adds	r7, #28
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800586e:	b480      	push	{r7}
 8005870:	b087      	sub	sp, #28
 8005872:	af00      	add	r7, sp, #0
 8005874:	60f8      	str	r0, [r7, #12]
 8005876:	60b9      	str	r1, [r7, #8]
 8005878:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6a1b      	ldr	r3, [r3, #32]
 8005884:	f023 0210 	bic.w	r2, r3, #16
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005898:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	031b      	lsls	r3, r3, #12
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	011b      	lsls	r3, r3, #4
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	621a      	str	r2, [r3, #32]
}
 80058c2:	bf00      	nop
 80058c4:	371c      	adds	r7, #28
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b085      	sub	sp, #20
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058e6:	683a      	ldr	r2, [r7, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	f043 0307 	orr.w	r3, r3, #7
 80058f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	609a      	str	r2, [r3, #8]
}
 80058f8:	bf00      	nop
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005904:	b480      	push	{r7}
 8005906:	b087      	sub	sp, #28
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
 8005910:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800591e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	021a      	lsls	r2, r3, #8
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	431a      	orrs	r2, r3
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	4313      	orrs	r3, r2
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	4313      	orrs	r3, r2
 8005930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	609a      	str	r2, [r3, #8]
}
 8005938:	bf00      	nop
 800593a:	371c      	adds	r7, #28
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005944:	b480      	push	{r7}
 8005946:	b087      	sub	sp, #28
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	f003 031f 	and.w	r3, r3, #31
 8005956:	2201      	movs	r2, #1
 8005958:	fa02 f303 	lsl.w	r3, r2, r3
 800595c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6a1a      	ldr	r2, [r3, #32]
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	43db      	mvns	r3, r3
 8005966:	401a      	ands	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6a1a      	ldr	r2, [r3, #32]
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	f003 031f 	and.w	r3, r3, #31
 8005976:	6879      	ldr	r1, [r7, #4]
 8005978:	fa01 f303 	lsl.w	r3, r1, r3
 800597c:	431a      	orrs	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	621a      	str	r2, [r3, #32]
}
 8005982:	bf00      	nop
 8005984:	371c      	adds	r7, #28
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
	...

08005990 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d101      	bne.n	80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059a4:	2302      	movs	r3, #2
 80059a6:	e050      	b.n	8005a4a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2202      	movs	r2, #2
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a1c      	ldr	r2, [pc, #112]	; (8005a58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d018      	beq.n	8005a1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f4:	d013      	beq.n	8005a1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a18      	ldr	r2, [pc, #96]	; (8005a5c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d00e      	beq.n	8005a1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a16      	ldr	r2, [pc, #88]	; (8005a60 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d009      	beq.n	8005a1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a15      	ldr	r2, [pc, #84]	; (8005a64 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d004      	beq.n	8005a1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a13      	ldr	r2, [pc, #76]	; (8005a68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d10c      	bne.n	8005a38 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	40010000 	.word	0x40010000
 8005a5c:	40000400 	.word	0x40000400
 8005a60:	40000800 	.word	0x40000800
 8005a64:	40000c00 	.word	0x40000c00
 8005a68:	40014000 	.word	0x40014000

08005a6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e042      	b.n	8005b2c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d106      	bne.n	8005ac0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7fd f9fa 	bl	8002eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2224      	movs	r2, #36	; 0x24
 8005ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68da      	ldr	r2, [r3, #12]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ad6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 fe6b 	bl	80067b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	691a      	ldr	r2, [r3, #16]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005aec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	695a      	ldr	r2, [r3, #20]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005afc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68da      	ldr	r2, [r3, #12]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b20      	cmp	r3, #32
 8005b4c:	d112      	bne.n	8005b74 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d002      	beq.n	8005b5a <HAL_UART_Receive_DMA+0x26>
 8005b54:	88fb      	ldrh	r3, [r7, #6]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e00b      	b.n	8005b76 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005b64:	88fb      	ldrh	r3, [r7, #6]
 8005b66:	461a      	mov	r2, r3
 8005b68:	68b9      	ldr	r1, [r7, #8]
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f000 fbc2 	bl	80062f4 <UART_Start_Receive_DMA>
 8005b70:	4603      	mov	r3, r0
 8005b72:	e000      	b.n	8005b76 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005b74:	2302      	movs	r3, #2
  }
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b0ba      	sub	sp, #232	; 0xe8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bb6:	f003 030f 	and.w	r3, r3, #15
 8005bba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005bbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10f      	bne.n	8005be6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bca:	f003 0320 	and.w	r3, r3, #32
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d009      	beq.n	8005be6 <HAL_UART_IRQHandler+0x66>
 8005bd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bd6:	f003 0320 	and.w	r3, r3, #32
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fd29 	bl	8006636 <UART_Receive_IT>
      return;
 8005be4:	e25b      	b.n	800609e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005be6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 80de 	beq.w	8005dac <HAL_UART_IRQHandler+0x22c>
 8005bf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d106      	bne.n	8005c0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c00:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 80d1 	beq.w	8005dac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00b      	beq.n	8005c2e <HAL_UART_IRQHandler+0xae>
 8005c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d005      	beq.n	8005c2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c26:	f043 0201 	orr.w	r2, r3, #1
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c32:	f003 0304 	and.w	r3, r3, #4
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00b      	beq.n	8005c52 <HAL_UART_IRQHandler+0xd2>
 8005c3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d005      	beq.n	8005c52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4a:	f043 0202 	orr.w	r2, r3, #2
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00b      	beq.n	8005c76 <HAL_UART_IRQHandler+0xf6>
 8005c5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d005      	beq.n	8005c76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6e:	f043 0204 	orr.w	r2, r3, #4
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c7a:	f003 0308 	and.w	r3, r3, #8
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d011      	beq.n	8005ca6 <HAL_UART_IRQHandler+0x126>
 8005c82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c86:	f003 0320 	and.w	r3, r3, #32
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d105      	bne.n	8005c9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d005      	beq.n	8005ca6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9e:	f043 0208 	orr.w	r2, r3, #8
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 81f2 	beq.w	8006094 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cb4:	f003 0320 	and.w	r3, r3, #32
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d008      	beq.n	8005cce <HAL_UART_IRQHandler+0x14e>
 8005cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cc0:	f003 0320 	and.w	r3, r3, #32
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 fcb4 	bl	8006636 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd8:	2b40      	cmp	r3, #64	; 0x40
 8005cda:	bf0c      	ite	eq
 8005cdc:	2301      	moveq	r3, #1
 8005cde:	2300      	movne	r3, #0
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cea:	f003 0308 	and.w	r3, r3, #8
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d103      	bne.n	8005cfa <HAL_UART_IRQHandler+0x17a>
 8005cf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d04f      	beq.n	8005d9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fbbc 	bl	8006478 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0a:	2b40      	cmp	r3, #64	; 0x40
 8005d0c:	d141      	bne.n	8005d92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	3314      	adds	r3, #20
 8005d14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d1c:	e853 3f00 	ldrex	r3, [r3]
 8005d20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3314      	adds	r3, #20
 8005d36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d4a:	e841 2300 	strex	r3, r2, [r1]
 8005d4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1d9      	bne.n	8005d0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d013      	beq.n	8005d8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d66:	4a7e      	ldr	r2, [pc, #504]	; (8005f60 <HAL_UART_IRQHandler+0x3e0>)
 8005d68:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fd fd4c 	bl	800380c <HAL_DMA_Abort_IT>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d016      	beq.n	8005da8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d84:	4610      	mov	r0, r2
 8005d86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d88:	e00e      	b.n	8005da8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f99e 	bl	80060cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d90:	e00a      	b.n	8005da8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f99a 	bl	80060cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d98:	e006      	b.n	8005da8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f996 	bl	80060cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005da6:	e175      	b.n	8006094 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da8:	bf00      	nop
    return;
 8005daa:	e173      	b.n	8006094 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	f040 814f 	bne.w	8006054 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dba:	f003 0310 	and.w	r3, r3, #16
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 8148 	beq.w	8006054 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dc8:	f003 0310 	and.w	r3, r3, #16
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 8141 	beq.w	8006054 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	60bb      	str	r3, [r7, #8]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	60bb      	str	r3, [r7, #8]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	60bb      	str	r3, [r7, #8]
 8005de6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df2:	2b40      	cmp	r3, #64	; 0x40
 8005df4:	f040 80b6 	bne.w	8005f64 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f000 8145 	beq.w	8006098 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e16:	429a      	cmp	r2, r3
 8005e18:	f080 813e 	bcs.w	8006098 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e22:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e2e:	f000 8088 	beq.w	8005f42 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	330c      	adds	r3, #12
 8005e38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e40:	e853 3f00 	ldrex	r3, [r3]
 8005e44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	330c      	adds	r3, #12
 8005e5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e6e:	e841 2300 	strex	r3, r2, [r1]
 8005e72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1d9      	bne.n	8005e32 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3314      	adds	r3, #20
 8005e84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e88:	e853 3f00 	ldrex	r3, [r3]
 8005e8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e90:	f023 0301 	bic.w	r3, r3, #1
 8005e94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3314      	adds	r3, #20
 8005e9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005ea2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005ea6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005eaa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005eae:	e841 2300 	strex	r3, r2, [r1]
 8005eb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005eb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1e1      	bne.n	8005e7e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3314      	adds	r3, #20
 8005ec0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ec4:	e853 3f00 	ldrex	r3, [r3]
 8005ec8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ed0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	3314      	adds	r3, #20
 8005eda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ede:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ee0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ee4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ee6:	e841 2300 	strex	r3, r2, [r1]
 8005eea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005eec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1e3      	bne.n	8005eba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	330c      	adds	r3, #12
 8005f06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f0a:	e853 3f00 	ldrex	r3, [r3]
 8005f0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f12:	f023 0310 	bic.w	r3, r3, #16
 8005f16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	330c      	adds	r3, #12
 8005f20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005f24:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f26:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f2c:	e841 2300 	strex	r3, r2, [r1]
 8005f30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1e3      	bne.n	8005f00 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7fd fbf5 	bl	800372c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2202      	movs	r2, #2
 8005f46:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	4619      	mov	r1, r3
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f8c1 	bl	80060e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f5e:	e09b      	b.n	8006098 <HAL_UART_IRQHandler+0x518>
 8005f60:	0800653f 	.word	0x0800653f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 808e 	beq.w	800609c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005f80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 8089 	beq.w	800609c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	330c      	adds	r3, #12
 8005f90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f94:	e853 3f00 	ldrex	r3, [r3]
 8005f98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fa0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	330c      	adds	r3, #12
 8005faa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005fae:	647a      	str	r2, [r7, #68]	; 0x44
 8005fb0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fb6:	e841 2300 	strex	r3, r2, [r1]
 8005fba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1e3      	bne.n	8005f8a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	3314      	adds	r3, #20
 8005fc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	e853 3f00 	ldrex	r3, [r3]
 8005fd0:	623b      	str	r3, [r7, #32]
   return(result);
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	f023 0301 	bic.w	r3, r3, #1
 8005fd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3314      	adds	r3, #20
 8005fe2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005fe6:	633a      	str	r2, [r7, #48]	; 0x30
 8005fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fee:	e841 2300 	strex	r3, r2, [r1]
 8005ff2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1e3      	bne.n	8005fc2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	330c      	adds	r3, #12
 800600e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	e853 3f00 	ldrex	r3, [r3]
 8006016:	60fb      	str	r3, [r7, #12]
   return(result);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f023 0310 	bic.w	r3, r3, #16
 800601e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	330c      	adds	r3, #12
 8006028:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800602c:	61fa      	str	r2, [r7, #28]
 800602e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006030:	69b9      	ldr	r1, [r7, #24]
 8006032:	69fa      	ldr	r2, [r7, #28]
 8006034:	e841 2300 	strex	r3, r2, [r1]
 8006038:	617b      	str	r3, [r7, #20]
   return(result);
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1e3      	bne.n	8006008 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2202      	movs	r2, #2
 8006044:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006046:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800604a:	4619      	mov	r1, r3
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 f847 	bl	80060e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006052:	e023      	b.n	800609c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800605c:	2b00      	cmp	r3, #0
 800605e:	d009      	beq.n	8006074 <HAL_UART_IRQHandler+0x4f4>
 8006060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fa7a 	bl	8006566 <UART_Transmit_IT>
    return;
 8006072:	e014      	b.n	800609e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00e      	beq.n	800609e <HAL_UART_IRQHandler+0x51e>
 8006080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006088:	2b00      	cmp	r3, #0
 800608a:	d008      	beq.n	800609e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 faba 	bl	8006606 <UART_EndTransmit_IT>
    return;
 8006092:	e004      	b.n	800609e <HAL_UART_IRQHandler+0x51e>
    return;
 8006094:	bf00      	nop
 8006096:	e002      	b.n	800609e <HAL_UART_IRQHandler+0x51e>
      return;
 8006098:	bf00      	nop
 800609a:	e000      	b.n	800609e <HAL_UART_IRQHandler+0x51e>
      return;
 800609c:	bf00      	nop
  }
}
 800609e:	37e8      	adds	r7, #232	; 0xe8
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b09c      	sub	sp, #112	; 0x70
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006104:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006110:	2b00      	cmp	r3, #0
 8006112:	d172      	bne.n	80061fa <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006116:	2200      	movs	r2, #0
 8006118:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800611a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	330c      	adds	r3, #12
 8006120:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006124:	e853 3f00 	ldrex	r3, [r3]
 8006128:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800612a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800612c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006130:	66bb      	str	r3, [r7, #104]	; 0x68
 8006132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	330c      	adds	r3, #12
 8006138:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800613a:	65ba      	str	r2, [r7, #88]	; 0x58
 800613c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006140:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006142:	e841 2300 	strex	r3, r2, [r1]
 8006146:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1e5      	bne.n	800611a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800614e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	3314      	adds	r3, #20
 8006154:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006158:	e853 3f00 	ldrex	r3, [r3]
 800615c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800615e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006160:	f023 0301 	bic.w	r3, r3, #1
 8006164:	667b      	str	r3, [r7, #100]	; 0x64
 8006166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3314      	adds	r3, #20
 800616c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800616e:	647a      	str	r2, [r7, #68]	; 0x44
 8006170:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006172:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006174:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006176:	e841 2300 	strex	r3, r2, [r1]
 800617a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800617c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1e5      	bne.n	800614e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	3314      	adds	r3, #20
 8006188:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	e853 3f00 	ldrex	r3, [r3]
 8006190:	623b      	str	r3, [r7, #32]
   return(result);
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006198:	663b      	str	r3, [r7, #96]	; 0x60
 800619a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	3314      	adds	r3, #20
 80061a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80061a2:	633a      	str	r2, [r7, #48]	; 0x30
 80061a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061aa:	e841 2300 	strex	r3, r2, [r1]
 80061ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1e5      	bne.n	8006182 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80061b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061b8:	2220      	movs	r2, #32
 80061ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d119      	bne.n	80061fa <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	330c      	adds	r3, #12
 80061cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	e853 3f00 	ldrex	r3, [r3]
 80061d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f023 0310 	bic.w	r3, r3, #16
 80061dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	330c      	adds	r3, #12
 80061e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061e6:	61fa      	str	r2, [r7, #28]
 80061e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ea:	69b9      	ldr	r1, [r7, #24]
 80061ec:	69fa      	ldr	r2, [r7, #28]
 80061ee:	e841 2300 	strex	r3, r2, [r1]
 80061f2:	617b      	str	r3, [r7, #20]
   return(result);
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1e5      	bne.n	80061c6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061fc:	2200      	movs	r2, #0
 80061fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006204:	2b01      	cmp	r3, #1
 8006206:	d106      	bne.n	8006216 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800620a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800620c:	4619      	mov	r1, r3
 800620e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006210:	f7ff ff66 	bl	80060e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006214:	e002      	b.n	800621c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006216:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006218:	f7fb fca4 	bl	8001b64 <HAL_UART_RxCpltCallback>
}
 800621c:	bf00      	nop
 800621e:	3770      	adds	r7, #112	; 0x70
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006230:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2201      	movs	r2, #1
 8006236:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623c:	2b01      	cmp	r3, #1
 800623e:	d108      	bne.n	8006252 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006244:	085b      	lsrs	r3, r3, #1
 8006246:	b29b      	uxth	r3, r3
 8006248:	4619      	mov	r1, r3
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f7ff ff48 	bl	80060e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006250:	e002      	b.n	8006258 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f7ff ff30 	bl	80060b8 <HAL_UART_RxHalfCpltCallback>
}
 8006258:	bf00      	nop
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006268:	2300      	movs	r3, #0
 800626a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006270:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800627c:	2b80      	cmp	r3, #128	; 0x80
 800627e:	bf0c      	ite	eq
 8006280:	2301      	moveq	r3, #1
 8006282:	2300      	movne	r3, #0
 8006284:	b2db      	uxtb	r3, r3
 8006286:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b21      	cmp	r3, #33	; 0x21
 8006292:	d108      	bne.n	80062a6 <UART_DMAError+0x46>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d005      	beq.n	80062a6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	2200      	movs	r2, #0
 800629e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80062a0:	68b8      	ldr	r0, [r7, #8]
 80062a2:	f000 f8c1 	bl	8006428 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b0:	2b40      	cmp	r3, #64	; 0x40
 80062b2:	bf0c      	ite	eq
 80062b4:	2301      	moveq	r3, #1
 80062b6:	2300      	movne	r3, #0
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	2b22      	cmp	r3, #34	; 0x22
 80062c6:	d108      	bne.n	80062da <UART_DMAError+0x7a>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d005      	beq.n	80062da <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2200      	movs	r2, #0
 80062d2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80062d4:	68b8      	ldr	r0, [r7, #8]
 80062d6:	f000 f8cf 	bl	8006478 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062de:	f043 0210 	orr.w	r2, r3, #16
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062e6:	68b8      	ldr	r0, [r7, #8]
 80062e8:	f7ff fef0 	bl	80060cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062ec:	bf00      	nop
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b098      	sub	sp, #96	; 0x60
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	4613      	mov	r3, r2
 8006300:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	88fa      	ldrh	r2, [r7, #6]
 800630c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2222      	movs	r2, #34	; 0x22
 8006318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006320:	4a3e      	ldr	r2, [pc, #248]	; (800641c <UART_Start_Receive_DMA+0x128>)
 8006322:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006328:	4a3d      	ldr	r2, [pc, #244]	; (8006420 <UART_Start_Receive_DMA+0x12c>)
 800632a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006330:	4a3c      	ldr	r2, [pc, #240]	; (8006424 <UART_Start_Receive_DMA+0x130>)
 8006332:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006338:	2200      	movs	r2, #0
 800633a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800633c:	f107 0308 	add.w	r3, r7, #8
 8006340:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3304      	adds	r3, #4
 800634c:	4619      	mov	r1, r3
 800634e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	88fb      	ldrh	r3, [r7, #6]
 8006354:	f7fd f992 	bl	800367c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006358:	2300      	movs	r3, #0
 800635a:	613b      	str	r3, [r7, #16]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	613b      	str	r3, [r7, #16]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	613b      	str	r3, [r7, #16]
 800636c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d019      	beq.n	80063aa <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	330c      	adds	r3, #12
 800637c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006380:	e853 3f00 	ldrex	r3, [r3]
 8006384:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800638c:	65bb      	str	r3, [r7, #88]	; 0x58
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	330c      	adds	r3, #12
 8006394:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006396:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006398:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800639c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800639e:	e841 2300 	strex	r3, r2, [r1]
 80063a2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80063a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1e5      	bne.n	8006376 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	3314      	adds	r3, #20
 80063b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b4:	e853 3f00 	ldrex	r3, [r3]
 80063b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063bc:	f043 0301 	orr.w	r3, r3, #1
 80063c0:	657b      	str	r3, [r7, #84]	; 0x54
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	3314      	adds	r3, #20
 80063c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80063ca:	63ba      	str	r2, [r7, #56]	; 0x38
 80063cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80063d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063d2:	e841 2300 	strex	r3, r2, [r1]
 80063d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1e5      	bne.n	80063aa <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3314      	adds	r3, #20
 80063e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	e853 3f00 	ldrex	r3, [r3]
 80063ec:	617b      	str	r3, [r7, #20]
   return(result);
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063f4:	653b      	str	r3, [r7, #80]	; 0x50
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3314      	adds	r3, #20
 80063fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80063fe:	627a      	str	r2, [r7, #36]	; 0x24
 8006400:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006402:	6a39      	ldr	r1, [r7, #32]
 8006404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006406:	e841 2300 	strex	r3, r2, [r1]
 800640a:	61fb      	str	r3, [r7, #28]
   return(result);
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1e5      	bne.n	80063de <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3760      	adds	r7, #96	; 0x60
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	080060f9 	.word	0x080060f9
 8006420:	08006225 	.word	0x08006225
 8006424:	08006261 	.word	0x08006261

08006428 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006428:	b480      	push	{r7}
 800642a:	b089      	sub	sp, #36	; 0x24
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	330c      	adds	r3, #12
 8006436:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	e853 3f00 	ldrex	r3, [r3]
 800643e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006446:	61fb      	str	r3, [r7, #28]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	330c      	adds	r3, #12
 800644e:	69fa      	ldr	r2, [r7, #28]
 8006450:	61ba      	str	r2, [r7, #24]
 8006452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006454:	6979      	ldr	r1, [r7, #20]
 8006456:	69ba      	ldr	r2, [r7, #24]
 8006458:	e841 2300 	strex	r3, r2, [r1]
 800645c:	613b      	str	r3, [r7, #16]
   return(result);
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1e5      	bne.n	8006430 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2220      	movs	r2, #32
 8006468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800646c:	bf00      	nop
 800646e:	3724      	adds	r7, #36	; 0x24
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006478:	b480      	push	{r7}
 800647a:	b095      	sub	sp, #84	; 0x54
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	330c      	adds	r3, #12
 8006486:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800648a:	e853 3f00 	ldrex	r3, [r3]
 800648e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006492:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	330c      	adds	r3, #12
 800649e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064a0:	643a      	str	r2, [r7, #64]	; 0x40
 80064a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064a8:	e841 2300 	strex	r3, r2, [r1]
 80064ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1e5      	bne.n	8006480 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3314      	adds	r3, #20
 80064ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	e853 3f00 	ldrex	r3, [r3]
 80064c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	f023 0301 	bic.w	r3, r3, #1
 80064ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3314      	adds	r3, #20
 80064d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064dc:	e841 2300 	strex	r3, r2, [r1]
 80064e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1e5      	bne.n	80064b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d119      	bne.n	8006524 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	330c      	adds	r3, #12
 80064f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	e853 3f00 	ldrex	r3, [r3]
 80064fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	f023 0310 	bic.w	r3, r3, #16
 8006506:	647b      	str	r3, [r7, #68]	; 0x44
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	330c      	adds	r3, #12
 800650e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006510:	61ba      	str	r2, [r7, #24]
 8006512:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006514:	6979      	ldr	r1, [r7, #20]
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	e841 2300 	strex	r3, r2, [r1]
 800651c:	613b      	str	r3, [r7, #16]
   return(result);
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1e5      	bne.n	80064f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2220      	movs	r2, #32
 8006528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006532:	bf00      	nop
 8006534:	3754      	adds	r7, #84	; 0x54
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b084      	sub	sp, #16
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f7ff fdb7 	bl	80060cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800655e:	bf00      	nop
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006566:	b480      	push	{r7}
 8006568:	b085      	sub	sp, #20
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b21      	cmp	r3, #33	; 0x21
 8006578:	d13e      	bne.n	80065f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006582:	d114      	bne.n	80065ae <UART_Transmit_IT+0x48>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d110      	bne.n	80065ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a1b      	ldr	r3, [r3, #32]
 8006590:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	881b      	ldrh	r3, [r3, #0]
 8006596:	461a      	mov	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	1c9a      	adds	r2, r3, #2
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	621a      	str	r2, [r3, #32]
 80065ac:	e008      	b.n	80065c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	1c59      	adds	r1, r3, #1
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	6211      	str	r1, [r2, #32]
 80065b8:	781a      	ldrb	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	3b01      	subs	r3, #1
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	4619      	mov	r1, r3
 80065ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10f      	bne.n	80065f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68da      	ldr	r2, [r3, #12]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	e000      	b.n	80065fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80065f8:	2302      	movs	r3, #2
  }
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b082      	sub	sp, #8
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68da      	ldr	r2, [r3, #12]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800661c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2220      	movs	r2, #32
 8006622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7ff fd3c 	bl	80060a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b08c      	sub	sp, #48	; 0x30
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b22      	cmp	r3, #34	; 0x22
 8006648:	f040 80ae 	bne.w	80067a8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006654:	d117      	bne.n	8006686 <UART_Receive_IT+0x50>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d113      	bne.n	8006686 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800665e:	2300      	movs	r3, #0
 8006660:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006666:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	b29b      	uxth	r3, r3
 8006670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006674:	b29a      	uxth	r2, r3
 8006676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006678:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667e:	1c9a      	adds	r2, r3, #2
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	629a      	str	r2, [r3, #40]	; 0x28
 8006684:	e026      	b.n	80066d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800668c:	2300      	movs	r3, #0
 800668e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006698:	d007      	beq.n	80066aa <UART_Receive_IT+0x74>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10a      	bne.n	80066b8 <UART_Receive_IT+0x82>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d106      	bne.n	80066b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	e008      	b.n	80066ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ce:	1c5a      	adds	r2, r3, #1
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066d8:	b29b      	uxth	r3, r3
 80066da:	3b01      	subs	r3, #1
 80066dc:	b29b      	uxth	r3, r3
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	4619      	mov	r1, r3
 80066e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d15d      	bne.n	80067a4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68da      	ldr	r2, [r3, #12]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 0220 	bic.w	r2, r2, #32
 80066f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68da      	ldr	r2, [r3, #12]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006706:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	695a      	ldr	r2, [r3, #20]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f022 0201 	bic.w	r2, r2, #1
 8006716:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2220      	movs	r2, #32
 800671c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672a:	2b01      	cmp	r3, #1
 800672c:	d135      	bne.n	800679a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	330c      	adds	r3, #12
 800673a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	e853 3f00 	ldrex	r3, [r3]
 8006742:	613b      	str	r3, [r7, #16]
   return(result);
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	f023 0310 	bic.w	r3, r3, #16
 800674a:	627b      	str	r3, [r7, #36]	; 0x24
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	330c      	adds	r3, #12
 8006752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006754:	623a      	str	r2, [r7, #32]
 8006756:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006758:	69f9      	ldr	r1, [r7, #28]
 800675a:	6a3a      	ldr	r2, [r7, #32]
 800675c:	e841 2300 	strex	r3, r2, [r1]
 8006760:	61bb      	str	r3, [r7, #24]
   return(result);
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1e5      	bne.n	8006734 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0310 	and.w	r3, r3, #16
 8006772:	2b10      	cmp	r3, #16
 8006774:	d10a      	bne.n	800678c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006776:	2300      	movs	r3, #0
 8006778:	60fb      	str	r3, [r7, #12]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	60fb      	str	r3, [r7, #12]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	60fb      	str	r3, [r7, #12]
 800678a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006790:	4619      	mov	r1, r3
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7ff fca4 	bl	80060e0 <HAL_UARTEx_RxEventCallback>
 8006798:	e002      	b.n	80067a0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7fb f9e2 	bl	8001b64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80067a0:	2300      	movs	r3, #0
 80067a2:	e002      	b.n	80067aa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80067a4:	2300      	movs	r3, #0
 80067a6:	e000      	b.n	80067aa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80067a8:	2302      	movs	r3, #2
  }
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3730      	adds	r7, #48	; 0x30
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
	...

080067b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067b8:	b0c0      	sub	sp, #256	; 0x100
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80067cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d0:	68d9      	ldr	r1, [r3, #12]
 80067d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	ea40 0301 	orr.w	r3, r0, r1
 80067dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e2:	689a      	ldr	r2, [r3, #8]
 80067e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	431a      	orrs	r2, r3
 80067ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	431a      	orrs	r2, r3
 80067f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f8:	69db      	ldr	r3, [r3, #28]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800680c:	f021 010c 	bic.w	r1, r1, #12
 8006810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800681a:	430b      	orrs	r3, r1
 800681c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800681e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800682a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800682e:	6999      	ldr	r1, [r3, #24]
 8006830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	ea40 0301 	orr.w	r3, r0, r1
 800683a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800683c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	4b8f      	ldr	r3, [pc, #572]	; (8006a80 <UART_SetConfig+0x2cc>)
 8006844:	429a      	cmp	r2, r3
 8006846:	d005      	beq.n	8006854 <UART_SetConfig+0xa0>
 8006848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	4b8d      	ldr	r3, [pc, #564]	; (8006a84 <UART_SetConfig+0x2d0>)
 8006850:	429a      	cmp	r2, r3
 8006852:	d104      	bne.n	800685e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006854:	f7fe f862 	bl	800491c <HAL_RCC_GetPCLK2Freq>
 8006858:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800685c:	e003      	b.n	8006866 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800685e:	f7fe f849 	bl	80048f4 <HAL_RCC_GetPCLK1Freq>
 8006862:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800686a:	69db      	ldr	r3, [r3, #28]
 800686c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006870:	f040 810c 	bne.w	8006a8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006874:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006878:	2200      	movs	r2, #0
 800687a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800687e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006882:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006886:	4622      	mov	r2, r4
 8006888:	462b      	mov	r3, r5
 800688a:	1891      	adds	r1, r2, r2
 800688c:	65b9      	str	r1, [r7, #88]	; 0x58
 800688e:	415b      	adcs	r3, r3
 8006890:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006892:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006896:	4621      	mov	r1, r4
 8006898:	eb12 0801 	adds.w	r8, r2, r1
 800689c:	4629      	mov	r1, r5
 800689e:	eb43 0901 	adc.w	r9, r3, r1
 80068a2:	f04f 0200 	mov.w	r2, #0
 80068a6:	f04f 0300 	mov.w	r3, #0
 80068aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068b6:	4690      	mov	r8, r2
 80068b8:	4699      	mov	r9, r3
 80068ba:	4623      	mov	r3, r4
 80068bc:	eb18 0303 	adds.w	r3, r8, r3
 80068c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068c4:	462b      	mov	r3, r5
 80068c6:	eb49 0303 	adc.w	r3, r9, r3
 80068ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80068da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80068de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80068e2:	460b      	mov	r3, r1
 80068e4:	18db      	adds	r3, r3, r3
 80068e6:	653b      	str	r3, [r7, #80]	; 0x50
 80068e8:	4613      	mov	r3, r2
 80068ea:	eb42 0303 	adc.w	r3, r2, r3
 80068ee:	657b      	str	r3, [r7, #84]	; 0x54
 80068f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80068f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80068f8:	f7fa f93c 	bl	8000b74 <__aeabi_uldivmod>
 80068fc:	4602      	mov	r2, r0
 80068fe:	460b      	mov	r3, r1
 8006900:	4b61      	ldr	r3, [pc, #388]	; (8006a88 <UART_SetConfig+0x2d4>)
 8006902:	fba3 2302 	umull	r2, r3, r3, r2
 8006906:	095b      	lsrs	r3, r3, #5
 8006908:	011c      	lsls	r4, r3, #4
 800690a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800690e:	2200      	movs	r2, #0
 8006910:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006914:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006918:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800691c:	4642      	mov	r2, r8
 800691e:	464b      	mov	r3, r9
 8006920:	1891      	adds	r1, r2, r2
 8006922:	64b9      	str	r1, [r7, #72]	; 0x48
 8006924:	415b      	adcs	r3, r3
 8006926:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006928:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800692c:	4641      	mov	r1, r8
 800692e:	eb12 0a01 	adds.w	sl, r2, r1
 8006932:	4649      	mov	r1, r9
 8006934:	eb43 0b01 	adc.w	fp, r3, r1
 8006938:	f04f 0200 	mov.w	r2, #0
 800693c:	f04f 0300 	mov.w	r3, #0
 8006940:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006944:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006948:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800694c:	4692      	mov	sl, r2
 800694e:	469b      	mov	fp, r3
 8006950:	4643      	mov	r3, r8
 8006952:	eb1a 0303 	adds.w	r3, sl, r3
 8006956:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800695a:	464b      	mov	r3, r9
 800695c:	eb4b 0303 	adc.w	r3, fp, r3
 8006960:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006970:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006974:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006978:	460b      	mov	r3, r1
 800697a:	18db      	adds	r3, r3, r3
 800697c:	643b      	str	r3, [r7, #64]	; 0x40
 800697e:	4613      	mov	r3, r2
 8006980:	eb42 0303 	adc.w	r3, r2, r3
 8006984:	647b      	str	r3, [r7, #68]	; 0x44
 8006986:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800698a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800698e:	f7fa f8f1 	bl	8000b74 <__aeabi_uldivmod>
 8006992:	4602      	mov	r2, r0
 8006994:	460b      	mov	r3, r1
 8006996:	4611      	mov	r1, r2
 8006998:	4b3b      	ldr	r3, [pc, #236]	; (8006a88 <UART_SetConfig+0x2d4>)
 800699a:	fba3 2301 	umull	r2, r3, r3, r1
 800699e:	095b      	lsrs	r3, r3, #5
 80069a0:	2264      	movs	r2, #100	; 0x64
 80069a2:	fb02 f303 	mul.w	r3, r2, r3
 80069a6:	1acb      	subs	r3, r1, r3
 80069a8:	00db      	lsls	r3, r3, #3
 80069aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80069ae:	4b36      	ldr	r3, [pc, #216]	; (8006a88 <UART_SetConfig+0x2d4>)
 80069b0:	fba3 2302 	umull	r2, r3, r3, r2
 80069b4:	095b      	lsrs	r3, r3, #5
 80069b6:	005b      	lsls	r3, r3, #1
 80069b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069bc:	441c      	add	r4, r3
 80069be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069c2:	2200      	movs	r2, #0
 80069c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80069cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80069d0:	4642      	mov	r2, r8
 80069d2:	464b      	mov	r3, r9
 80069d4:	1891      	adds	r1, r2, r2
 80069d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80069d8:	415b      	adcs	r3, r3
 80069da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80069e0:	4641      	mov	r1, r8
 80069e2:	1851      	adds	r1, r2, r1
 80069e4:	6339      	str	r1, [r7, #48]	; 0x30
 80069e6:	4649      	mov	r1, r9
 80069e8:	414b      	adcs	r3, r1
 80069ea:	637b      	str	r3, [r7, #52]	; 0x34
 80069ec:	f04f 0200 	mov.w	r2, #0
 80069f0:	f04f 0300 	mov.w	r3, #0
 80069f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80069f8:	4659      	mov	r1, fp
 80069fa:	00cb      	lsls	r3, r1, #3
 80069fc:	4651      	mov	r1, sl
 80069fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a02:	4651      	mov	r1, sl
 8006a04:	00ca      	lsls	r2, r1, #3
 8006a06:	4610      	mov	r0, r2
 8006a08:	4619      	mov	r1, r3
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	4642      	mov	r2, r8
 8006a0e:	189b      	adds	r3, r3, r2
 8006a10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a14:	464b      	mov	r3, r9
 8006a16:	460a      	mov	r2, r1
 8006a18:	eb42 0303 	adc.w	r3, r2, r3
 8006a1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006a30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a34:	460b      	mov	r3, r1
 8006a36:	18db      	adds	r3, r3, r3
 8006a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	eb42 0303 	adc.w	r3, r2, r3
 8006a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a4a:	f7fa f893 	bl	8000b74 <__aeabi_uldivmod>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	460b      	mov	r3, r1
 8006a52:	4b0d      	ldr	r3, [pc, #52]	; (8006a88 <UART_SetConfig+0x2d4>)
 8006a54:	fba3 1302 	umull	r1, r3, r3, r2
 8006a58:	095b      	lsrs	r3, r3, #5
 8006a5a:	2164      	movs	r1, #100	; 0x64
 8006a5c:	fb01 f303 	mul.w	r3, r1, r3
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	00db      	lsls	r3, r3, #3
 8006a64:	3332      	adds	r3, #50	; 0x32
 8006a66:	4a08      	ldr	r2, [pc, #32]	; (8006a88 <UART_SetConfig+0x2d4>)
 8006a68:	fba2 2303 	umull	r2, r3, r2, r3
 8006a6c:	095b      	lsrs	r3, r3, #5
 8006a6e:	f003 0207 	and.w	r2, r3, #7
 8006a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4422      	add	r2, r4
 8006a7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a7c:	e106      	b.n	8006c8c <UART_SetConfig+0x4d8>
 8006a7e:	bf00      	nop
 8006a80:	40011000 	.word	0x40011000
 8006a84:	40011400 	.word	0x40011400
 8006a88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a90:	2200      	movs	r2, #0
 8006a92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006a9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006a9e:	4642      	mov	r2, r8
 8006aa0:	464b      	mov	r3, r9
 8006aa2:	1891      	adds	r1, r2, r2
 8006aa4:	6239      	str	r1, [r7, #32]
 8006aa6:	415b      	adcs	r3, r3
 8006aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8006aaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006aae:	4641      	mov	r1, r8
 8006ab0:	1854      	adds	r4, r2, r1
 8006ab2:	4649      	mov	r1, r9
 8006ab4:	eb43 0501 	adc.w	r5, r3, r1
 8006ab8:	f04f 0200 	mov.w	r2, #0
 8006abc:	f04f 0300 	mov.w	r3, #0
 8006ac0:	00eb      	lsls	r3, r5, #3
 8006ac2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ac6:	00e2      	lsls	r2, r4, #3
 8006ac8:	4614      	mov	r4, r2
 8006aca:	461d      	mov	r5, r3
 8006acc:	4643      	mov	r3, r8
 8006ace:	18e3      	adds	r3, r4, r3
 8006ad0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ad4:	464b      	mov	r3, r9
 8006ad6:	eb45 0303 	adc.w	r3, r5, r3
 8006ada:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006aea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006aee:	f04f 0200 	mov.w	r2, #0
 8006af2:	f04f 0300 	mov.w	r3, #0
 8006af6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006afa:	4629      	mov	r1, r5
 8006afc:	008b      	lsls	r3, r1, #2
 8006afe:	4621      	mov	r1, r4
 8006b00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b04:	4621      	mov	r1, r4
 8006b06:	008a      	lsls	r2, r1, #2
 8006b08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b0c:	f7fa f832 	bl	8000b74 <__aeabi_uldivmod>
 8006b10:	4602      	mov	r2, r0
 8006b12:	460b      	mov	r3, r1
 8006b14:	4b60      	ldr	r3, [pc, #384]	; (8006c98 <UART_SetConfig+0x4e4>)
 8006b16:	fba3 2302 	umull	r2, r3, r3, r2
 8006b1a:	095b      	lsrs	r3, r3, #5
 8006b1c:	011c      	lsls	r4, r3, #4
 8006b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b22:	2200      	movs	r2, #0
 8006b24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006b30:	4642      	mov	r2, r8
 8006b32:	464b      	mov	r3, r9
 8006b34:	1891      	adds	r1, r2, r2
 8006b36:	61b9      	str	r1, [r7, #24]
 8006b38:	415b      	adcs	r3, r3
 8006b3a:	61fb      	str	r3, [r7, #28]
 8006b3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b40:	4641      	mov	r1, r8
 8006b42:	1851      	adds	r1, r2, r1
 8006b44:	6139      	str	r1, [r7, #16]
 8006b46:	4649      	mov	r1, r9
 8006b48:	414b      	adcs	r3, r1
 8006b4a:	617b      	str	r3, [r7, #20]
 8006b4c:	f04f 0200 	mov.w	r2, #0
 8006b50:	f04f 0300 	mov.w	r3, #0
 8006b54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b58:	4659      	mov	r1, fp
 8006b5a:	00cb      	lsls	r3, r1, #3
 8006b5c:	4651      	mov	r1, sl
 8006b5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b62:	4651      	mov	r1, sl
 8006b64:	00ca      	lsls	r2, r1, #3
 8006b66:	4610      	mov	r0, r2
 8006b68:	4619      	mov	r1, r3
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	4642      	mov	r2, r8
 8006b6e:	189b      	adds	r3, r3, r2
 8006b70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b74:	464b      	mov	r3, r9
 8006b76:	460a      	mov	r2, r1
 8006b78:	eb42 0303 	adc.w	r3, r2, r3
 8006b7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006b8c:	f04f 0200 	mov.w	r2, #0
 8006b90:	f04f 0300 	mov.w	r3, #0
 8006b94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006b98:	4649      	mov	r1, r9
 8006b9a:	008b      	lsls	r3, r1, #2
 8006b9c:	4641      	mov	r1, r8
 8006b9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ba2:	4641      	mov	r1, r8
 8006ba4:	008a      	lsls	r2, r1, #2
 8006ba6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006baa:	f7f9 ffe3 	bl	8000b74 <__aeabi_uldivmod>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	4611      	mov	r1, r2
 8006bb4:	4b38      	ldr	r3, [pc, #224]	; (8006c98 <UART_SetConfig+0x4e4>)
 8006bb6:	fba3 2301 	umull	r2, r3, r3, r1
 8006bba:	095b      	lsrs	r3, r3, #5
 8006bbc:	2264      	movs	r2, #100	; 0x64
 8006bbe:	fb02 f303 	mul.w	r3, r2, r3
 8006bc2:	1acb      	subs	r3, r1, r3
 8006bc4:	011b      	lsls	r3, r3, #4
 8006bc6:	3332      	adds	r3, #50	; 0x32
 8006bc8:	4a33      	ldr	r2, [pc, #204]	; (8006c98 <UART_SetConfig+0x4e4>)
 8006bca:	fba2 2303 	umull	r2, r3, r2, r3
 8006bce:	095b      	lsrs	r3, r3, #5
 8006bd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bd4:	441c      	add	r4, r3
 8006bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bda:	2200      	movs	r2, #0
 8006bdc:	673b      	str	r3, [r7, #112]	; 0x70
 8006bde:	677a      	str	r2, [r7, #116]	; 0x74
 8006be0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006be4:	4642      	mov	r2, r8
 8006be6:	464b      	mov	r3, r9
 8006be8:	1891      	adds	r1, r2, r2
 8006bea:	60b9      	str	r1, [r7, #8]
 8006bec:	415b      	adcs	r3, r3
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bf4:	4641      	mov	r1, r8
 8006bf6:	1851      	adds	r1, r2, r1
 8006bf8:	6039      	str	r1, [r7, #0]
 8006bfa:	4649      	mov	r1, r9
 8006bfc:	414b      	adcs	r3, r1
 8006bfe:	607b      	str	r3, [r7, #4]
 8006c00:	f04f 0200 	mov.w	r2, #0
 8006c04:	f04f 0300 	mov.w	r3, #0
 8006c08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c0c:	4659      	mov	r1, fp
 8006c0e:	00cb      	lsls	r3, r1, #3
 8006c10:	4651      	mov	r1, sl
 8006c12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c16:	4651      	mov	r1, sl
 8006c18:	00ca      	lsls	r2, r1, #3
 8006c1a:	4610      	mov	r0, r2
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	4603      	mov	r3, r0
 8006c20:	4642      	mov	r2, r8
 8006c22:	189b      	adds	r3, r3, r2
 8006c24:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c26:	464b      	mov	r3, r9
 8006c28:	460a      	mov	r2, r1
 8006c2a:	eb42 0303 	adc.w	r3, r2, r3
 8006c2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	663b      	str	r3, [r7, #96]	; 0x60
 8006c3a:	667a      	str	r2, [r7, #100]	; 0x64
 8006c3c:	f04f 0200 	mov.w	r2, #0
 8006c40:	f04f 0300 	mov.w	r3, #0
 8006c44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c48:	4649      	mov	r1, r9
 8006c4a:	008b      	lsls	r3, r1, #2
 8006c4c:	4641      	mov	r1, r8
 8006c4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c52:	4641      	mov	r1, r8
 8006c54:	008a      	lsls	r2, r1, #2
 8006c56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006c5a:	f7f9 ff8b 	bl	8000b74 <__aeabi_uldivmod>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	460b      	mov	r3, r1
 8006c62:	4b0d      	ldr	r3, [pc, #52]	; (8006c98 <UART_SetConfig+0x4e4>)
 8006c64:	fba3 1302 	umull	r1, r3, r3, r2
 8006c68:	095b      	lsrs	r3, r3, #5
 8006c6a:	2164      	movs	r1, #100	; 0x64
 8006c6c:	fb01 f303 	mul.w	r3, r1, r3
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	011b      	lsls	r3, r3, #4
 8006c74:	3332      	adds	r3, #50	; 0x32
 8006c76:	4a08      	ldr	r2, [pc, #32]	; (8006c98 <UART_SetConfig+0x4e4>)
 8006c78:	fba2 2303 	umull	r2, r3, r2, r3
 8006c7c:	095b      	lsrs	r3, r3, #5
 8006c7e:	f003 020f 	and.w	r2, r3, #15
 8006c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4422      	add	r2, r4
 8006c8a:	609a      	str	r2, [r3, #8]
}
 8006c8c:	bf00      	nop
 8006c8e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006c92:	46bd      	mov	sp, r7
 8006c94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c98:	51eb851f 	.word	0x51eb851f

08006c9c <atoi>:
 8006c9c:	220a      	movs	r2, #10
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	f000 b882 	b.w	8006da8 <strtol>

08006ca4 <_strtol_l.constprop.0>:
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006caa:	d001      	beq.n	8006cb0 <_strtol_l.constprop.0+0xc>
 8006cac:	2b24      	cmp	r3, #36	; 0x24
 8006cae:	d906      	bls.n	8006cbe <_strtol_l.constprop.0+0x1a>
 8006cb0:	f000 f88c 	bl	8006dcc <__errno>
 8006cb4:	2316      	movs	r3, #22
 8006cb6:	6003      	str	r3, [r0, #0]
 8006cb8:	2000      	movs	r0, #0
 8006cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cbe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006da4 <_strtol_l.constprop.0+0x100>
 8006cc2:	460d      	mov	r5, r1
 8006cc4:	462e      	mov	r6, r5
 8006cc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006cca:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006cce:	f017 0708 	ands.w	r7, r7, #8
 8006cd2:	d1f7      	bne.n	8006cc4 <_strtol_l.constprop.0+0x20>
 8006cd4:	2c2d      	cmp	r4, #45	; 0x2d
 8006cd6:	d132      	bne.n	8006d3e <_strtol_l.constprop.0+0x9a>
 8006cd8:	782c      	ldrb	r4, [r5, #0]
 8006cda:	2701      	movs	r7, #1
 8006cdc:	1cb5      	adds	r5, r6, #2
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d05b      	beq.n	8006d9a <_strtol_l.constprop.0+0xf6>
 8006ce2:	2b10      	cmp	r3, #16
 8006ce4:	d109      	bne.n	8006cfa <_strtol_l.constprop.0+0x56>
 8006ce6:	2c30      	cmp	r4, #48	; 0x30
 8006ce8:	d107      	bne.n	8006cfa <_strtol_l.constprop.0+0x56>
 8006cea:	782c      	ldrb	r4, [r5, #0]
 8006cec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006cf0:	2c58      	cmp	r4, #88	; 0x58
 8006cf2:	d14d      	bne.n	8006d90 <_strtol_l.constprop.0+0xec>
 8006cf4:	786c      	ldrb	r4, [r5, #1]
 8006cf6:	2310      	movs	r3, #16
 8006cf8:	3502      	adds	r5, #2
 8006cfa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006cfe:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d02:	f04f 0e00 	mov.w	lr, #0
 8006d06:	fbb8 f9f3 	udiv	r9, r8, r3
 8006d0a:	4676      	mov	r6, lr
 8006d0c:	fb03 8a19 	mls	sl, r3, r9, r8
 8006d10:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006d14:	f1bc 0f09 	cmp.w	ip, #9
 8006d18:	d816      	bhi.n	8006d48 <_strtol_l.constprop.0+0xa4>
 8006d1a:	4664      	mov	r4, ip
 8006d1c:	42a3      	cmp	r3, r4
 8006d1e:	dd24      	ble.n	8006d6a <_strtol_l.constprop.0+0xc6>
 8006d20:	f1be 3fff 	cmp.w	lr, #4294967295
 8006d24:	d008      	beq.n	8006d38 <_strtol_l.constprop.0+0x94>
 8006d26:	45b1      	cmp	r9, r6
 8006d28:	d31c      	bcc.n	8006d64 <_strtol_l.constprop.0+0xc0>
 8006d2a:	d101      	bne.n	8006d30 <_strtol_l.constprop.0+0x8c>
 8006d2c:	45a2      	cmp	sl, r4
 8006d2e:	db19      	blt.n	8006d64 <_strtol_l.constprop.0+0xc0>
 8006d30:	fb06 4603 	mla	r6, r6, r3, r4
 8006d34:	f04f 0e01 	mov.w	lr, #1
 8006d38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d3c:	e7e8      	b.n	8006d10 <_strtol_l.constprop.0+0x6c>
 8006d3e:	2c2b      	cmp	r4, #43	; 0x2b
 8006d40:	bf04      	itt	eq
 8006d42:	782c      	ldrbeq	r4, [r5, #0]
 8006d44:	1cb5      	addeq	r5, r6, #2
 8006d46:	e7ca      	b.n	8006cde <_strtol_l.constprop.0+0x3a>
 8006d48:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006d4c:	f1bc 0f19 	cmp.w	ip, #25
 8006d50:	d801      	bhi.n	8006d56 <_strtol_l.constprop.0+0xb2>
 8006d52:	3c37      	subs	r4, #55	; 0x37
 8006d54:	e7e2      	b.n	8006d1c <_strtol_l.constprop.0+0x78>
 8006d56:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006d5a:	f1bc 0f19 	cmp.w	ip, #25
 8006d5e:	d804      	bhi.n	8006d6a <_strtol_l.constprop.0+0xc6>
 8006d60:	3c57      	subs	r4, #87	; 0x57
 8006d62:	e7db      	b.n	8006d1c <_strtol_l.constprop.0+0x78>
 8006d64:	f04f 3eff 	mov.w	lr, #4294967295
 8006d68:	e7e6      	b.n	8006d38 <_strtol_l.constprop.0+0x94>
 8006d6a:	f1be 3fff 	cmp.w	lr, #4294967295
 8006d6e:	d105      	bne.n	8006d7c <_strtol_l.constprop.0+0xd8>
 8006d70:	2322      	movs	r3, #34	; 0x22
 8006d72:	6003      	str	r3, [r0, #0]
 8006d74:	4646      	mov	r6, r8
 8006d76:	b942      	cbnz	r2, 8006d8a <_strtol_l.constprop.0+0xe6>
 8006d78:	4630      	mov	r0, r6
 8006d7a:	e79e      	b.n	8006cba <_strtol_l.constprop.0+0x16>
 8006d7c:	b107      	cbz	r7, 8006d80 <_strtol_l.constprop.0+0xdc>
 8006d7e:	4276      	negs	r6, r6
 8006d80:	2a00      	cmp	r2, #0
 8006d82:	d0f9      	beq.n	8006d78 <_strtol_l.constprop.0+0xd4>
 8006d84:	f1be 0f00 	cmp.w	lr, #0
 8006d88:	d000      	beq.n	8006d8c <_strtol_l.constprop.0+0xe8>
 8006d8a:	1e69      	subs	r1, r5, #1
 8006d8c:	6011      	str	r1, [r2, #0]
 8006d8e:	e7f3      	b.n	8006d78 <_strtol_l.constprop.0+0xd4>
 8006d90:	2430      	movs	r4, #48	; 0x30
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1b1      	bne.n	8006cfa <_strtol_l.constprop.0+0x56>
 8006d96:	2308      	movs	r3, #8
 8006d98:	e7af      	b.n	8006cfa <_strtol_l.constprop.0+0x56>
 8006d9a:	2c30      	cmp	r4, #48	; 0x30
 8006d9c:	d0a5      	beq.n	8006cea <_strtol_l.constprop.0+0x46>
 8006d9e:	230a      	movs	r3, #10
 8006da0:	e7ab      	b.n	8006cfa <_strtol_l.constprop.0+0x56>
 8006da2:	bf00      	nop
 8006da4:	08006e75 	.word	0x08006e75

08006da8 <strtol>:
 8006da8:	4613      	mov	r3, r2
 8006daa:	460a      	mov	r2, r1
 8006dac:	4601      	mov	r1, r0
 8006dae:	4802      	ldr	r0, [pc, #8]	; (8006db8 <strtol+0x10>)
 8006db0:	6800      	ldr	r0, [r0, #0]
 8006db2:	f7ff bf77 	b.w	8006ca4 <_strtol_l.constprop.0>
 8006db6:	bf00      	nop
 8006db8:	20000058 	.word	0x20000058

08006dbc <memset>:
 8006dbc:	4402      	add	r2, r0
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d100      	bne.n	8006dc6 <memset+0xa>
 8006dc4:	4770      	bx	lr
 8006dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8006dca:	e7f9      	b.n	8006dc0 <memset+0x4>

08006dcc <__errno>:
 8006dcc:	4b01      	ldr	r3, [pc, #4]	; (8006dd4 <__errno+0x8>)
 8006dce:	6818      	ldr	r0, [r3, #0]
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	20000058 	.word	0x20000058

08006dd8 <__libc_init_array>:
 8006dd8:	b570      	push	{r4, r5, r6, lr}
 8006dda:	4d0d      	ldr	r5, [pc, #52]	; (8006e10 <__libc_init_array+0x38>)
 8006ddc:	4c0d      	ldr	r4, [pc, #52]	; (8006e14 <__libc_init_array+0x3c>)
 8006dde:	1b64      	subs	r4, r4, r5
 8006de0:	10a4      	asrs	r4, r4, #2
 8006de2:	2600      	movs	r6, #0
 8006de4:	42a6      	cmp	r6, r4
 8006de6:	d109      	bne.n	8006dfc <__libc_init_array+0x24>
 8006de8:	4d0b      	ldr	r5, [pc, #44]	; (8006e18 <__libc_init_array+0x40>)
 8006dea:	4c0c      	ldr	r4, [pc, #48]	; (8006e1c <__libc_init_array+0x44>)
 8006dec:	f000 f826 	bl	8006e3c <_init>
 8006df0:	1b64      	subs	r4, r4, r5
 8006df2:	10a4      	asrs	r4, r4, #2
 8006df4:	2600      	movs	r6, #0
 8006df6:	42a6      	cmp	r6, r4
 8006df8:	d105      	bne.n	8006e06 <__libc_init_array+0x2e>
 8006dfa:	bd70      	pop	{r4, r5, r6, pc}
 8006dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e00:	4798      	blx	r3
 8006e02:	3601      	adds	r6, #1
 8006e04:	e7ee      	b.n	8006de4 <__libc_init_array+0xc>
 8006e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e0a:	4798      	blx	r3
 8006e0c:	3601      	adds	r6, #1
 8006e0e:	e7f2      	b.n	8006df6 <__libc_init_array+0x1e>
 8006e10:	08006f80 	.word	0x08006f80
 8006e14:	08006f80 	.word	0x08006f80
 8006e18:	08006f80 	.word	0x08006f80
 8006e1c:	08006f84 	.word	0x08006f84

08006e20 <memcpy>:
 8006e20:	440a      	add	r2, r1
 8006e22:	4291      	cmp	r1, r2
 8006e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e28:	d100      	bne.n	8006e2c <memcpy+0xc>
 8006e2a:	4770      	bx	lr
 8006e2c:	b510      	push	{r4, lr}
 8006e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e36:	4291      	cmp	r1, r2
 8006e38:	d1f9      	bne.n	8006e2e <memcpy+0xe>
 8006e3a:	bd10      	pop	{r4, pc}

08006e3c <_init>:
 8006e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e3e:	bf00      	nop
 8006e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e42:	bc08      	pop	{r3}
 8006e44:	469e      	mov	lr, r3
 8006e46:	4770      	bx	lr

08006e48 <_fini>:
 8006e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e4a:	bf00      	nop
 8006e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e4e:	bc08      	pop	{r3}
 8006e50:	469e      	mov	lr, r3
 8006e52:	4770      	bx	lr
