
AMR_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063f4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800658c  0800658c  0001658c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065a4  080065a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080065a4  080065a4  000165a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065ac  080065ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065ac  080065ac  000165ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065b0  080065b0  000165b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080065b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b4  20000010  080065c0  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005c4  080065c0  000205c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ef0f  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002144  00000000  00000000  0002ef8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d68  00000000  00000000  000310d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a86  00000000  00000000  00031e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000169ab  00000000  00000000  000328c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f7c1  00000000  00000000  00049271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ec89  00000000  00000000  00058a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ac4  00000000  00000000  000e76bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000eb180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006574 	.word	0x08006574

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08006574 	.word	0x08006574

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b970 	b.w	8000e6c <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9e08      	ldr	r6, [sp, #32]
 8000baa:	460d      	mov	r5, r1
 8000bac:	4604      	mov	r4, r0
 8000bae:	460f      	mov	r7, r1
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d14a      	bne.n	8000c4a <__udivmoddi4+0xa6>
 8000bb4:	428a      	cmp	r2, r1
 8000bb6:	4694      	mov	ip, r2
 8000bb8:	d965      	bls.n	8000c86 <__udivmoddi4+0xe2>
 8000bba:	fab2 f382 	clz	r3, r2
 8000bbe:	b143      	cbz	r3, 8000bd2 <__udivmoddi4+0x2e>
 8000bc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bc4:	f1c3 0220 	rsb	r2, r3, #32
 8000bc8:	409f      	lsls	r7, r3
 8000bca:	fa20 f202 	lsr.w	r2, r0, r2
 8000bce:	4317      	orrs	r7, r2
 8000bd0:	409c      	lsls	r4, r3
 8000bd2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bd6:	fa1f f58c 	uxth.w	r5, ip
 8000bda:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bde:	0c22      	lsrs	r2, r4, #16
 8000be0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000be4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000be8:	fb01 f005 	mul.w	r0, r1, r5
 8000bec:	4290      	cmp	r0, r2
 8000bee:	d90a      	bls.n	8000c06 <__udivmoddi4+0x62>
 8000bf0:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bf8:	f080 811c 	bcs.w	8000e34 <__udivmoddi4+0x290>
 8000bfc:	4290      	cmp	r0, r2
 8000bfe:	f240 8119 	bls.w	8000e34 <__udivmoddi4+0x290>
 8000c02:	3902      	subs	r1, #2
 8000c04:	4462      	add	r2, ip
 8000c06:	1a12      	subs	r2, r2, r0
 8000c08:	b2a4      	uxth	r4, r4
 8000c0a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c0e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c12:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c16:	fb00 f505 	mul.w	r5, r0, r5
 8000c1a:	42a5      	cmp	r5, r4
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x90>
 8000c1e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c22:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c26:	f080 8107 	bcs.w	8000e38 <__udivmoddi4+0x294>
 8000c2a:	42a5      	cmp	r5, r4
 8000c2c:	f240 8104 	bls.w	8000e38 <__udivmoddi4+0x294>
 8000c30:	4464      	add	r4, ip
 8000c32:	3802      	subs	r0, #2
 8000c34:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c38:	1b64      	subs	r4, r4, r5
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	b11e      	cbz	r6, 8000c46 <__udivmoddi4+0xa2>
 8000c3e:	40dc      	lsrs	r4, r3
 8000c40:	2300      	movs	r3, #0
 8000c42:	e9c6 4300 	strd	r4, r3, [r6]
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0xbc>
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	f000 80ed 	beq.w	8000e2e <__udivmoddi4+0x28a>
 8000c54:	2100      	movs	r1, #0
 8000c56:	e9c6 0500 	strd	r0, r5, [r6]
 8000c5a:	4608      	mov	r0, r1
 8000c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c60:	fab3 f183 	clz	r1, r3
 8000c64:	2900      	cmp	r1, #0
 8000c66:	d149      	bne.n	8000cfc <__udivmoddi4+0x158>
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	d302      	bcc.n	8000c72 <__udivmoddi4+0xce>
 8000c6c:	4282      	cmp	r2, r0
 8000c6e:	f200 80f8 	bhi.w	8000e62 <__udivmoddi4+0x2be>
 8000c72:	1a84      	subs	r4, r0, r2
 8000c74:	eb65 0203 	sbc.w	r2, r5, r3
 8000c78:	2001      	movs	r0, #1
 8000c7a:	4617      	mov	r7, r2
 8000c7c:	2e00      	cmp	r6, #0
 8000c7e:	d0e2      	beq.n	8000c46 <__udivmoddi4+0xa2>
 8000c80:	e9c6 4700 	strd	r4, r7, [r6]
 8000c84:	e7df      	b.n	8000c46 <__udivmoddi4+0xa2>
 8000c86:	b902      	cbnz	r2, 8000c8a <__udivmoddi4+0xe6>
 8000c88:	deff      	udf	#255	; 0xff
 8000c8a:	fab2 f382 	clz	r3, r2
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f040 8090 	bne.w	8000db4 <__udivmoddi4+0x210>
 8000c94:	1a8a      	subs	r2, r1, r2
 8000c96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9a:	fa1f fe8c 	uxth.w	lr, ip
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ca4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ca8:	0c22      	lsrs	r2, r4, #16
 8000caa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cae:	fb0e f005 	mul.w	r0, lr, r5
 8000cb2:	4290      	cmp	r0, r2
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x124>
 8000cb6:	eb1c 0202 	adds.w	r2, ip, r2
 8000cba:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x122>
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	f200 80cb 	bhi.w	8000e5c <__udivmoddi4+0x2b8>
 8000cc6:	4645      	mov	r5, r8
 8000cc8:	1a12      	subs	r2, r2, r0
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cd0:	fb07 2210 	mls	r2, r7, r0, r2
 8000cd4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cdc:	45a6      	cmp	lr, r4
 8000cde:	d908      	bls.n	8000cf2 <__udivmoddi4+0x14e>
 8000ce0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ce8:	d202      	bcs.n	8000cf0 <__udivmoddi4+0x14c>
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	f200 80bb 	bhi.w	8000e66 <__udivmoddi4+0x2c2>
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	eba4 040e 	sub.w	r4, r4, lr
 8000cf6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cfa:	e79f      	b.n	8000c3c <__udivmoddi4+0x98>
 8000cfc:	f1c1 0720 	rsb	r7, r1, #32
 8000d00:	408b      	lsls	r3, r1
 8000d02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d0a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d0e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d12:	40fd      	lsrs	r5, r7
 8000d14:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d18:	4323      	orrs	r3, r4
 8000d1a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	fb09 5518 	mls	r5, r9, r8, r5
 8000d26:	0c1c      	lsrs	r4, r3, #16
 8000d28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d2c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d30:	42a5      	cmp	r5, r4
 8000d32:	fa02 f201 	lsl.w	r2, r2, r1
 8000d36:	fa00 f001 	lsl.w	r0, r0, r1
 8000d3a:	d90b      	bls.n	8000d54 <__udivmoddi4+0x1b0>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d44:	f080 8088 	bcs.w	8000e58 <__udivmoddi4+0x2b4>
 8000d48:	42a5      	cmp	r5, r4
 8000d4a:	f240 8085 	bls.w	8000e58 <__udivmoddi4+0x2b4>
 8000d4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d52:	4464      	add	r4, ip
 8000d54:	1b64      	subs	r4, r4, r5
 8000d56:	b29d      	uxth	r5, r3
 8000d58:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d5c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d60:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d64:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x1da>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d74:	d26c      	bcs.n	8000e50 <__udivmoddi4+0x2ac>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	d96a      	bls.n	8000e50 <__udivmoddi4+0x2ac>
 8000d7a:	3b02      	subs	r3, #2
 8000d7c:	4464      	add	r4, ip
 8000d7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d82:	fba3 9502 	umull	r9, r5, r3, r2
 8000d86:	eba4 040e 	sub.w	r4, r4, lr
 8000d8a:	42ac      	cmp	r4, r5
 8000d8c:	46c8      	mov	r8, r9
 8000d8e:	46ae      	mov	lr, r5
 8000d90:	d356      	bcc.n	8000e40 <__udivmoddi4+0x29c>
 8000d92:	d053      	beq.n	8000e3c <__udivmoddi4+0x298>
 8000d94:	b156      	cbz	r6, 8000dac <__udivmoddi4+0x208>
 8000d96:	ebb0 0208 	subs.w	r2, r0, r8
 8000d9a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000da2:	40ca      	lsrs	r2, r1
 8000da4:	40cc      	lsrs	r4, r1
 8000da6:	4317      	orrs	r7, r2
 8000da8:	e9c6 7400 	strd	r7, r4, [r6]
 8000dac:	4618      	mov	r0, r3
 8000dae:	2100      	movs	r1, #0
 8000db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db4:	f1c3 0120 	rsb	r1, r3, #32
 8000db8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dbc:	fa20 f201 	lsr.w	r2, r0, r1
 8000dc0:	fa25 f101 	lsr.w	r1, r5, r1
 8000dc4:	409d      	lsls	r5, r3
 8000dc6:	432a      	orrs	r2, r5
 8000dc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dcc:	fa1f fe8c 	uxth.w	lr, ip
 8000dd0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd4:	fb07 1510 	mls	r5, r7, r0, r1
 8000dd8:	0c11      	lsrs	r1, r2, #16
 8000dda:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dde:	fb00 f50e 	mul.w	r5, r0, lr
 8000de2:	428d      	cmp	r5, r1
 8000de4:	fa04 f403 	lsl.w	r4, r4, r3
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x258>
 8000dea:	eb1c 0101 	adds.w	r1, ip, r1
 8000dee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000df2:	d22f      	bcs.n	8000e54 <__udivmoddi4+0x2b0>
 8000df4:	428d      	cmp	r5, r1
 8000df6:	d92d      	bls.n	8000e54 <__udivmoddi4+0x2b0>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4461      	add	r1, ip
 8000dfc:	1b49      	subs	r1, r1, r5
 8000dfe:	b292      	uxth	r2, r2
 8000e00:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e04:	fb07 1115 	mls	r1, r7, r5, r1
 8000e08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e0c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e10:	4291      	cmp	r1, r2
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x282>
 8000e14:	eb1c 0202 	adds.w	r2, ip, r2
 8000e18:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e1c:	d216      	bcs.n	8000e4c <__udivmoddi4+0x2a8>
 8000e1e:	4291      	cmp	r1, r2
 8000e20:	d914      	bls.n	8000e4c <__udivmoddi4+0x2a8>
 8000e22:	3d02      	subs	r5, #2
 8000e24:	4462      	add	r2, ip
 8000e26:	1a52      	subs	r2, r2, r1
 8000e28:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e2c:	e738      	b.n	8000ca0 <__udivmoddi4+0xfc>
 8000e2e:	4631      	mov	r1, r6
 8000e30:	4630      	mov	r0, r6
 8000e32:	e708      	b.n	8000c46 <__udivmoddi4+0xa2>
 8000e34:	4639      	mov	r1, r7
 8000e36:	e6e6      	b.n	8000c06 <__udivmoddi4+0x62>
 8000e38:	4610      	mov	r0, r2
 8000e3a:	e6fb      	b.n	8000c34 <__udivmoddi4+0x90>
 8000e3c:	4548      	cmp	r0, r9
 8000e3e:	d2a9      	bcs.n	8000d94 <__udivmoddi4+0x1f0>
 8000e40:	ebb9 0802 	subs.w	r8, r9, r2
 8000e44:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	e7a3      	b.n	8000d94 <__udivmoddi4+0x1f0>
 8000e4c:	4645      	mov	r5, r8
 8000e4e:	e7ea      	b.n	8000e26 <__udivmoddi4+0x282>
 8000e50:	462b      	mov	r3, r5
 8000e52:	e794      	b.n	8000d7e <__udivmoddi4+0x1da>
 8000e54:	4640      	mov	r0, r8
 8000e56:	e7d1      	b.n	8000dfc <__udivmoddi4+0x258>
 8000e58:	46d0      	mov	r8, sl
 8000e5a:	e77b      	b.n	8000d54 <__udivmoddi4+0x1b0>
 8000e5c:	3d02      	subs	r5, #2
 8000e5e:	4462      	add	r2, ip
 8000e60:	e732      	b.n	8000cc8 <__udivmoddi4+0x124>
 8000e62:	4608      	mov	r0, r1
 8000e64:	e70a      	b.n	8000c7c <__udivmoddi4+0xd8>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	e742      	b.n	8000cf2 <__udivmoddi4+0x14e>

08000e6c <__aeabi_idiv0>:
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <BNO08X_GetData>:
#include "BNO08X.h"

static uint8_t RX_Data[19];
static UART_HandleTypeDef huart;

void BNO08X_GetData(BNO08X_Typedef *sensorData){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
    sensorData->header = RX_Data[0];
 8000e78:	4b34      	ldr	r3, [pc, #208]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000e7a:	781a      	ldrb	r2, [r3, #0]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	701a      	strb	r2, [r3, #0]
    sensorData->index = RX_Data[2];
 8000e80:	4b32      	ldr	r3, [pc, #200]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000e82:	789a      	ldrb	r2, [r3, #2]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	705a      	strb	r2, [r3, #1]
    sensorData->yaw = (int16_t)((RX_Data[4] << 8) | RX_Data[3]);
 8000e88:	4b30      	ldr	r3, [pc, #192]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000e8a:	791b      	ldrb	r3, [r3, #4]
 8000e8c:	021b      	lsls	r3, r3, #8
 8000e8e:	b21a      	sxth	r2, r3
 8000e90:	4b2e      	ldr	r3, [pc, #184]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000e92:	78db      	ldrb	r3, [r3, #3]
 8000e94:	b21b      	sxth	r3, r3
 8000e96:	4313      	orrs	r3, r2
 8000e98:	b21a      	sxth	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	805a      	strh	r2, [r3, #2]
    sensorData->pitch = (int16_t)((RX_Data[6] << 8) | RX_Data[5]);
 8000e9e:	4b2b      	ldr	r3, [pc, #172]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000ea0:	799b      	ldrb	r3, [r3, #6]
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	b21a      	sxth	r2, r3
 8000ea6:	4b29      	ldr	r3, [pc, #164]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000ea8:	795b      	ldrb	r3, [r3, #5]
 8000eaa:	b21b      	sxth	r3, r3
 8000eac:	4313      	orrs	r3, r2
 8000eae:	b21a      	sxth	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	809a      	strh	r2, [r3, #4]
    sensorData->roll = (int16_t)((RX_Data[8] << 8) | RX_Data[7]);
 8000eb4:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000eb6:	7a1b      	ldrb	r3, [r3, #8]
 8000eb8:	021b      	lsls	r3, r3, #8
 8000eba:	b21a      	sxth	r2, r3
 8000ebc:	4b23      	ldr	r3, [pc, #140]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000ebe:	79db      	ldrb	r3, [r3, #7]
 8000ec0:	b21b      	sxth	r3, r3
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	b21a      	sxth	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	80da      	strh	r2, [r3, #6]
    sensorData->x_acceleration = (int16_t)((RX_Data[10] << 8) | RX_Data[9]);
 8000eca:	4b20      	ldr	r3, [pc, #128]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000ecc:	7a9b      	ldrb	r3, [r3, #10]
 8000ece:	021b      	lsls	r3, r3, #8
 8000ed0:	b21a      	sxth	r2, r3
 8000ed2:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000ed4:	7a5b      	ldrb	r3, [r3, #9]
 8000ed6:	b21b      	sxth	r3, r3
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	b21a      	sxth	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	811a      	strh	r2, [r3, #8]
    sensorData->y_acceleration = (int16_t)((RX_Data[12] << 8) | RX_Data[11]);
 8000ee0:	4b1a      	ldr	r3, [pc, #104]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000ee2:	7b1b      	ldrb	r3, [r3, #12]
 8000ee4:	021b      	lsls	r3, r3, #8
 8000ee6:	b21a      	sxth	r2, r3
 8000ee8:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000eea:	7adb      	ldrb	r3, [r3, #11]
 8000eec:	b21b      	sxth	r3, r3
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	b21a      	sxth	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	815a      	strh	r2, [r3, #10]
    sensorData->z_acceleration = (int16_t)((RX_Data[14] << 8) | RX_Data[13]);
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000ef8:	7b9b      	ldrb	r3, [r3, #14]
 8000efa:	021b      	lsls	r3, r3, #8
 8000efc:	b21a      	sxth	r2, r3
 8000efe:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000f00:	7b5b      	ldrb	r3, [r3, #13]
 8000f02:	b21b      	sxth	r3, r3
 8000f04:	4313      	orrs	r3, r2
 8000f06:	b21a      	sxth	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	819a      	strh	r2, [r3, #12]

    // MI, MR, Reserved bytes
    for (int i = 0; i < 3; i++) {
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	e00c      	b.n	8000f2c <BNO08X_GetData+0xbc>
        sensorData->mi_mr_reserved[i] = RX_Data[15 + i];
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	330f      	adds	r3, #15
 8000f16:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000f18:	5cd1      	ldrb	r1, [r2, r3]
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4413      	add	r3, r2
 8000f20:	330e      	adds	r3, #14
 8000f22:	460a      	mov	r2, r1
 8000f24:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	ddef      	ble.n	8000f12 <BNO08X_GetData+0xa2>
    }

    sensorData->checksum = RX_Data[18];
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000f34:	7c9a      	ldrb	r2, [r3, #18]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	745a      	strb	r2, [r3, #17]
    HAL_UART_Receive_DMA(&huart, RX_Data, sizeof(RX_Data));
 8000f3a:	2213      	movs	r2, #19
 8000f3c:	4903      	ldr	r1, [pc, #12]	; (8000f4c <BNO08X_GetData+0xdc>)
 8000f3e:	4804      	ldr	r0, [pc, #16]	; (8000f50 <BNO08X_GetData+0xe0>)
 8000f40:	f004 fa2a 	bl	8005398 <HAL_UART_Receive_DMA>
}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	2000002c 	.word	0x2000002c
 8000f50:	20000040 	.word	0x20000040

08000f54 <BNO08X_Init>:

void BNO08X_Init(UART_HandleTypeDef *huart_instance){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	huart = *huart_instance;
 8000f5c:	4a08      	ldr	r2, [pc, #32]	; (8000f80 <BNO08X_Init+0x2c>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4610      	mov	r0, r2
 8000f62:	4619      	mov	r1, r3
 8000f64:	2348      	movs	r3, #72	; 0x48
 8000f66:	461a      	mov	r2, r3
 8000f68:	f005 faf6 	bl	8006558 <memcpy>
	HAL_UART_Receive_DMA(&huart, RX_Data, sizeof(RX_Data));
 8000f6c:	2213      	movs	r2, #19
 8000f6e:	4905      	ldr	r1, [pc, #20]	; (8000f84 <BNO08X_Init+0x30>)
 8000f70:	4803      	ldr	r0, [pc, #12]	; (8000f80 <BNO08X_Init+0x2c>)
 8000f72:	f004 fa11 	bl	8005398 <HAL_UART_Receive_DMA>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000040 	.word	0x20000040
 8000f84:	2000002c 	.word	0x2000002c

08000f88 <agv_run_motor>:
#include "Motor.h"
#include <math.h>
#include <float.h>
#include <stdlib.h>

void agv_run_motor(motor_t motor, int16_t speed){
 8000f88:	b084      	sub	sp, #16
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	f107 0c08 	add.w	ip, r7, #8
 8000f92:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_GPIO_WritePin(motor.EN_PORT_R, motor.EN_PIN_R, GPIO_PIN_SET);
 8000f96:	6a3b      	ldr	r3, [r7, #32]
 8000f98:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f002 fc77 	bl	8003890 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor.EN_PORT_L, motor.EN_PIN_L, GPIO_PIN_SET);
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa4:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f002 fc71 	bl	8003890 <HAL_GPIO_WritePin>

	if(speed >= 0){
 8000fae:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	db62      	blt.n	800107c <agv_run_motor+0xf4>
		if(motor.channel_R == 1){
 8000fb6:	7e3b      	ldrb	r3, [r7, #24]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d108      	bne.n	8000fce <agv_run_motor+0x46>
			motor.tim_number_R->CCR1 = 0;
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_1);
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f003 f996 	bl	80042f8 <HAL_TIM_PWM_Start>
 8000fcc:	e022      	b.n	8001014 <agv_run_motor+0x8c>
		}
		else if(motor.channel_R == 2){
 8000fce:	7e3b      	ldrb	r3, [r7, #24]
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d108      	bne.n	8000fe6 <agv_run_motor+0x5e>
			motor.tim_number_R->CCR2 = 0;
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_2);
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	2104      	movs	r1, #4
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f003 f98a 	bl	80042f8 <HAL_TIM_PWM_Start>
 8000fe4:	e016      	b.n	8001014 <agv_run_motor+0x8c>
		}
		else if(motor.channel_R == 3){
 8000fe6:	7e3b      	ldrb	r3, [r7, #24]
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	d108      	bne.n	8000ffe <agv_run_motor+0x76>
			motor.tim_number_R->CCR3 = 0;
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_3);
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	2108      	movs	r1, #8
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f003 f97e 	bl	80042f8 <HAL_TIM_PWM_Start>
 8000ffc:	e00a      	b.n	8001014 <agv_run_motor+0x8c>
		}
		else if(motor.channel_R == 4){
 8000ffe:	7e3b      	ldrb	r3, [r7, #24]
 8001000:	2b04      	cmp	r3, #4
 8001002:	d107      	bne.n	8001014 <agv_run_motor+0x8c>
			motor.tim_number_R->CCR4 = 0;
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	2200      	movs	r2, #0
 8001008:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_4);
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	210c      	movs	r1, #12
 800100e:	4618      	mov	r0, r3
 8001010:	f003 f972 	bl	80042f8 <HAL_TIM_PWM_Start>
		}
		if(motor.channel_L == 1){
 8001014:	7e7b      	ldrb	r3, [r7, #25]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d109      	bne.n	800102e <agv_run_motor+0xa6>
			motor.tim_number_L->CCR1 = speed;
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8001020:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_1);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f003 f966 	bl	80042f8 <HAL_TIM_PWM_Start>
		else if(motor.channel_L == 4){
			motor.tim_number_L->CCR4 = 0;
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_4);
		}
	}
}
 800102c:	e090      	b.n	8001150 <agv_run_motor+0x1c8>
		else if(motor.channel_L == 2){
 800102e:	7e7b      	ldrb	r3, [r7, #25]
 8001030:	2b02      	cmp	r3, #2
 8001032:	d109      	bne.n	8001048 <agv_run_motor+0xc0>
			motor.tim_number_L->CCR2 = speed;
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 800103a:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_2);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2104      	movs	r1, #4
 8001040:	4618      	mov	r0, r3
 8001042:	f003 f959 	bl	80042f8 <HAL_TIM_PWM_Start>
}
 8001046:	e083      	b.n	8001150 <agv_run_motor+0x1c8>
		else if(motor.channel_L == 3){
 8001048:	7e7b      	ldrb	r3, [r7, #25]
 800104a:	2b03      	cmp	r3, #3
 800104c:	d109      	bne.n	8001062 <agv_run_motor+0xda>
			motor.tim_number_L->CCR3 = speed;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8001054:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_3);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2108      	movs	r1, #8
 800105a:	4618      	mov	r0, r3
 800105c:	f003 f94c 	bl	80042f8 <HAL_TIM_PWM_Start>
}
 8001060:	e076      	b.n	8001150 <agv_run_motor+0x1c8>
		else if(motor.channel_L == 4){
 8001062:	7e7b      	ldrb	r3, [r7, #25]
 8001064:	2b04      	cmp	r3, #4
 8001066:	d173      	bne.n	8001150 <agv_run_motor+0x1c8>
			motor.tim_number_L->CCR4 = speed;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 800106e:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_4);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	210c      	movs	r1, #12
 8001074:	4618      	mov	r0, r3
 8001076:	f003 f93f 	bl	80042f8 <HAL_TIM_PWM_Start>
}
 800107a:	e069      	b.n	8001150 <agv_run_motor+0x1c8>
	else if(speed < 0){
 800107c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001080:	2b00      	cmp	r3, #0
 8001082:	da65      	bge.n	8001150 <agv_run_motor+0x1c8>
		if(motor.channel_R == 1){
 8001084:	7e3b      	ldrb	r3, [r7, #24]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d10a      	bne.n	80010a0 <agv_run_motor+0x118>
			motor.tim_number_R->CCR1 = -speed;
 800108a:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800108e:	425a      	negs	r2, r3
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_1);
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f003 f92d 	bl	80042f8 <HAL_TIM_PWM_Start>
 800109e:	e028      	b.n	80010f2 <agv_run_motor+0x16a>
		else if(motor.channel_R == 2){
 80010a0:	7e3b      	ldrb	r3, [r7, #24]
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d10a      	bne.n	80010bc <agv_run_motor+0x134>
			motor.tim_number_R->CCR2 = -speed;
 80010a6:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80010aa:	425a      	negs	r2, r3
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_2);
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	2104      	movs	r1, #4
 80010b4:	4618      	mov	r0, r3
 80010b6:	f003 f91f 	bl	80042f8 <HAL_TIM_PWM_Start>
 80010ba:	e01a      	b.n	80010f2 <agv_run_motor+0x16a>
		else if(motor.channel_R == 3){
 80010bc:	7e3b      	ldrb	r3, [r7, #24]
 80010be:	2b03      	cmp	r3, #3
 80010c0:	d10a      	bne.n	80010d8 <agv_run_motor+0x150>
			motor.tim_number_R->CCR3 = -speed;
 80010c2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80010c6:	425a      	negs	r2, r3
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_3);
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	2108      	movs	r1, #8
 80010d0:	4618      	mov	r0, r3
 80010d2:	f003 f911 	bl	80042f8 <HAL_TIM_PWM_Start>
 80010d6:	e00c      	b.n	80010f2 <agv_run_motor+0x16a>
		else if(motor.channel_R == 4){
 80010d8:	7e3b      	ldrb	r3, [r7, #24]
 80010da:	2b04      	cmp	r3, #4
 80010dc:	d109      	bne.n	80010f2 <agv_run_motor+0x16a>
			motor.tim_number_R->CCR4 = -speed;
 80010de:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80010e2:	425a      	negs	r2, r3
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_4);
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	210c      	movs	r1, #12
 80010ec:	4618      	mov	r0, r3
 80010ee:	f003 f903 	bl	80042f8 <HAL_TIM_PWM_Start>
		if(motor.channel_L == 1){
 80010f2:	7e7b      	ldrb	r3, [r7, #25]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d108      	bne.n	800110a <agv_run_motor+0x182>
			motor.tim_number_L->CCR1 = 0;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	2200      	movs	r2, #0
 80010fc:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_1);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f003 f8f8 	bl	80042f8 <HAL_TIM_PWM_Start>
}
 8001108:	e022      	b.n	8001150 <agv_run_motor+0x1c8>
		else if(motor.channel_L == 2){
 800110a:	7e7b      	ldrb	r3, [r7, #25]
 800110c:	2b02      	cmp	r3, #2
 800110e:	d108      	bne.n	8001122 <agv_run_motor+0x19a>
			motor.tim_number_L->CCR2 = 0;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	2200      	movs	r2, #0
 8001114:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_2);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2104      	movs	r1, #4
 800111a:	4618      	mov	r0, r3
 800111c:	f003 f8ec 	bl	80042f8 <HAL_TIM_PWM_Start>
}
 8001120:	e016      	b.n	8001150 <agv_run_motor+0x1c8>
		else if(motor.channel_L == 3){
 8001122:	7e7b      	ldrb	r3, [r7, #25]
 8001124:	2b03      	cmp	r3, #3
 8001126:	d108      	bne.n	800113a <agv_run_motor+0x1b2>
			motor.tim_number_L->CCR3 = 0;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	2200      	movs	r2, #0
 800112c:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_3);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2108      	movs	r1, #8
 8001132:	4618      	mov	r0, r3
 8001134:	f003 f8e0 	bl	80042f8 <HAL_TIM_PWM_Start>
}
 8001138:	e00a      	b.n	8001150 <agv_run_motor+0x1c8>
		else if(motor.channel_L == 4){
 800113a:	7e7b      	ldrb	r3, [r7, #25]
 800113c:	2b04      	cmp	r3, #4
 800113e:	d107      	bne.n	8001150 <agv_run_motor+0x1c8>
			motor.tim_number_L->CCR4 = 0;
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	2200      	movs	r2, #0
 8001144:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_4);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	210c      	movs	r1, #12
 800114a:	4618      	mov	r0, r3
 800114c:	f003 f8d4 	bl	80042f8 <HAL_TIM_PWM_Start>
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001158:	b004      	add	sp, #16
 800115a:	4770      	bx	lr

0800115c <agv_stop>:


void agv_stop(motor_t motor){
 800115c:	b084      	sub	sp, #16
 800115e:	b580      	push	{r7, lr}
 8001160:	af00      	add	r7, sp, #0
 8001162:	f107 0c08 	add.w	ip, r7, #8
 8001166:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_GPIO_WritePin(motor.EN_PORT_R, motor.EN_PIN_R, GPIO_PIN_RESET);
 800116a:	6a3b      	ldr	r3, [r7, #32]
 800116c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800116e:	2200      	movs	r2, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f002 fb8d 	bl	8003890 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor.EN_PORT_L, motor.EN_PIN_L, GPIO_PIN_RESET);
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800117a:	2200      	movs	r2, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f002 fb87 	bl	8003890 <HAL_GPIO_WritePin>
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800118a:	b004      	add	sp, #16
 800118c:	4770      	bx	lr

0800118e <agv_stop_all>:

void agv_stop_all(motor_t motorA, motor_t motorB, motor_t motorC){
 800118e:	b084      	sub	sp, #16
 8001190:	b5b0      	push	{r4, r5, r7, lr}
 8001192:	b08c      	sub	sp, #48	; 0x30
 8001194:	af0c      	add	r7, sp, #48	; 0x30
 8001196:	f107 0410 	add.w	r4, r7, #16
 800119a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	agv_stop(motorA);
 800119e:	466d      	mov	r5, sp
 80011a0:	f107 0420 	add.w	r4, r7, #32
 80011a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ac:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80011b0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011ba:	f7ff ffcf 	bl	800115c <agv_stop>
	agv_stop(motorB);
 80011be:	466d      	mov	r5, sp
 80011c0:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 80011c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011cc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80011d0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80011d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011da:	f7ff ffbf 	bl	800115c <agv_stop>
	agv_stop(motorC);
 80011de:	466d      	mov	r5, sp
 80011e0:	f107 0498 	add.w	r4, r7, #152	; 0x98
 80011e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ec:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80011f0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80011f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80011f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011fa:	f7ff ffaf 	bl	800115c <agv_stop>
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001206:	b004      	add	sp, #16
 8001208:	4770      	bx	lr

0800120a <agv_reset_all>:

void agv_reset_all(motor_t motorA, motor_t motorB, motor_t motorC){
 800120a:	b084      	sub	sp, #16
 800120c:	b5b0      	push	{r4, r5, r7, lr}
 800120e:	b08c      	sub	sp, #48	; 0x30
 8001210:	af0c      	add	r7, sp, #48	; 0x30
 8001212:	f107 0410 	add.w	r4, r7, #16
 8001216:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	agv_run_motor(motorA,0);
 800121a:	2300      	movs	r3, #0
 800121c:	930b      	str	r3, [sp, #44]	; 0x2c
 800121e:	466d      	mov	r5, sp
 8001220:	f107 0420 	add.w	r4, r7, #32
 8001224:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001226:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001228:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800122a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800122c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001230:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800123a:	f7ff fea5 	bl	8000f88 <agv_run_motor>
	agv_run_motor(motorB,0);
 800123e:	2300      	movs	r3, #0
 8001240:	930b      	str	r3, [sp, #44]	; 0x2c
 8001242:	466d      	mov	r5, sp
 8001244:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8001248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800124a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800124c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800124e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001250:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001254:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001258:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800125c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800125e:	f7ff fe93 	bl	8000f88 <agv_run_motor>
	agv_run_motor(motorC,0);
 8001262:	2300      	movs	r3, #0
 8001264:	930b      	str	r3, [sp, #44]	; 0x2c
 8001266:	466d      	mov	r5, sp
 8001268:	f107 0498 	add.w	r4, r7, #152	; 0x98
 800126c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800126e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001270:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001272:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001274:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001278:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800127c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001280:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001282:	f7ff fe81 	bl	8000f88 <agv_run_motor>
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800128e:	b004      	add	sp, #16
 8001290:	4770      	bx	lr

08001292 <agv_encoder_start>:

void agv_encoder_start(encoder_t encoder, TIM_HandleTypeDef* tim,TIM_TypeDef* tim_number){
 8001292:	b084      	sub	sp, #16
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
 8001298:	f107 0c08 	add.w	ip, r7, #8
 800129c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	encoder.tim = tim;
 80012a0:	6a3b      	ldr	r3, [r7, #32]
 80012a2:	60bb      	str	r3, [r7, #8]
	encoder.tim_number = tim_number;
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	60fb      	str	r3, [r7, #12]
	HAL_TIM_Encoder_Start_IT(tim, TIM_CHANNEL_ALL);
 80012a8:	213c      	movs	r1, #60	; 0x3c
 80012aa:	6a38      	ldr	r0, [r7, #32]
 80012ac:	f003 f97a 	bl	80045a4 <HAL_TIM_Encoder_Start_IT>
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012b8:	b004      	add	sp, #16
 80012ba:	4770      	bx	lr
 80012bc:	0000      	movs	r0, r0
	...

080012c0 <agv_kinematic_Sy>:

// Kinematics
double agv_kinematic_Sy(int pos_A, int pos_B, int pos_C){
 80012c0:	b5b0      	push	{r4, r5, r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
	double sy = (0.866*pos_A) + (-0.866*pos_B) + (0*pos_C);
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f7ff f8d5 	bl	800047c <__aeabi_i2d>
 80012d2:	a319      	add	r3, pc, #100	; (adr r3, 8001338 <agv_kinematic_Sy+0x78>)
 80012d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d8:	f7ff f93a 	bl	8000550 <__aeabi_dmul>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4614      	mov	r4, r2
 80012e2:	461d      	mov	r5, r3
 80012e4:	68b8      	ldr	r0, [r7, #8]
 80012e6:	f7ff f8c9 	bl	800047c <__aeabi_i2d>
 80012ea:	a315      	add	r3, pc, #84	; (adr r3, 8001340 <agv_kinematic_Sy+0x80>)
 80012ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f0:	f7ff f92e 	bl	8000550 <__aeabi_dmul>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4620      	mov	r0, r4
 80012fa:	4629      	mov	r1, r5
 80012fc:	f7fe ff72 	bl	80001e4 <__adddf3>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	f04f 0200 	mov.w	r2, #0
 800130c:	f04f 0300 	mov.w	r3, #0
 8001310:	f7fe ff68 	bl	80001e4 <__adddf3>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return sy;
 800131c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001320:	ec43 2b17 	vmov	d7, r2, r3
}
 8001324:	eeb0 0a47 	vmov.f32	s0, s14
 8001328:	eef0 0a67 	vmov.f32	s1, s15
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bdb0      	pop	{r4, r5, r7, pc}
 8001332:	bf00      	nop
 8001334:	f3af 8000 	nop.w
 8001338:	a1cac083 	.word	0xa1cac083
 800133c:	3febb645 	.word	0x3febb645
 8001340:	a1cac083 	.word	0xa1cac083
 8001344:	bfebb645 	.word	0xbfebb645

08001348 <agv_kinematic_Sx>:
double agv_kinematic_Sx(int pos_A, int pos_B, int pos_C){
 8001348:	b5b0      	push	{r4, r5, r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
	double sx = (-0.5*pos_A) + (-0.5*pos_B) + (1*pos_C);
 8001354:	68f8      	ldr	r0, [r7, #12]
 8001356:	f7ff f891 	bl	800047c <__aeabi_i2d>
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <agv_kinematic_Sx+0x78>)
 8001360:	f7ff f8f6 	bl	8000550 <__aeabi_dmul>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4614      	mov	r4, r2
 800136a:	461d      	mov	r5, r3
 800136c:	68b8      	ldr	r0, [r7, #8]
 800136e:	f7ff f885 	bl	800047c <__aeabi_i2d>
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <agv_kinematic_Sx+0x78>)
 8001378:	f7ff f8ea 	bl	8000550 <__aeabi_dmul>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4620      	mov	r0, r4
 8001382:	4629      	mov	r1, r5
 8001384:	f7fe ff2e 	bl	80001e4 <__adddf3>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4614      	mov	r4, r2
 800138e:	461d      	mov	r5, r3
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff f873 	bl	800047c <__aeabi_i2d>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4620      	mov	r0, r4
 800139c:	4629      	mov	r1, r5
 800139e:	f7fe ff21 	bl	80001e4 <__adddf3>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return sx;
 80013aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013ae:	ec43 2b17 	vmov	d7, r2, r3
}
 80013b2:	eeb0 0a47 	vmov.f32	s0, s14
 80013b6:	eef0 0a67 	vmov.f32	s1, s15
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bdb0      	pop	{r4, r5, r7, pc}
 80013c0:	bfe00000 	.word	0xbfe00000

080013c4 <agv_kinematic_St>:
double agv_kinematic_St(int pos_A, int pos_B, int pos_C){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
	double st = (1*pos_A) + (1*pos_B) + (1*pos_C);
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	441a      	add	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f84e 	bl	800047c <__aeabi_i2d>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return st;
 80013e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013ec:	ec43 2b17 	vmov	d7, r2, r3
}
 80013f0:	eeb0 0a47 	vmov.f32	s0, s14
 80013f4:	eef0 0a67 	vmov.f32	s1, s15
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <agv_inverse_kinematic>:
	kinematic.Sx = (0.86*enc_A.position) + (-0.866*enc_B.position) + (0*enc_C.position);
	kinematic.Sy = (-0.5*enc_A.position) + (-0.5*enc_B.position) + (1*enc_C.position);
	kinematic.St = (1*enc_A.position) + (1*enc_B.position) + (1*enc_C.position);
}

void agv_inverse_kinematic(double vx, double vy, double vt, motor_t motorA, motor_t motorB, motor_t motorC){
 8001400:	b084      	sub	sp, #16
 8001402:	b5b0      	push	{r4, r5, r7, lr}
 8001404:	b098      	sub	sp, #96	; 0x60
 8001406:	af0c      	add	r7, sp, #48	; 0x30
 8001408:	ed87 0b04 	vstr	d0, [r7, #16]
 800140c:	ed87 1b02 	vstr	d1, [r7, #8]
 8001410:	ed87 2b00 	vstr	d2, [r7]
 8001414:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001418:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	double V1 = (-0.33*vx) + (0.58*vy) + (0.33*vt);
 800141c:	a362      	add	r3, pc, #392	; (adr r3, 80015a8 <agv_inverse_kinematic+0x1a8>)
 800141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001422:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001426:	f7ff f893 	bl	8000550 <__aeabi_dmul>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4614      	mov	r4, r2
 8001430:	461d      	mov	r5, r3
 8001432:	a35f      	add	r3, pc, #380	; (adr r3, 80015b0 <agv_inverse_kinematic+0x1b0>)
 8001434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001438:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800143c:	f7ff f888 	bl	8000550 <__aeabi_dmul>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4620      	mov	r0, r4
 8001446:	4629      	mov	r1, r5
 8001448:	f7fe fecc 	bl	80001e4 <__adddf3>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	4614      	mov	r4, r2
 8001452:	461d      	mov	r5, r3
 8001454:	a358      	add	r3, pc, #352	; (adr r3, 80015b8 <agv_inverse_kinematic+0x1b8>)
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800145e:	f7ff f877 	bl	8000550 <__aeabi_dmul>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4620      	mov	r0, r4
 8001468:	4629      	mov	r1, r5
 800146a:	f7fe febb 	bl	80001e4 <__adddf3>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double V2 = (-0.33*vx) + (-0.58*vy) + (0.33*vt);
 8001476:	a34c      	add	r3, pc, #304	; (adr r3, 80015a8 <agv_inverse_kinematic+0x1a8>)
 8001478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001480:	f7ff f866 	bl	8000550 <__aeabi_dmul>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4614      	mov	r4, r2
 800148a:	461d      	mov	r5, r3
 800148c:	a34c      	add	r3, pc, #304	; (adr r3, 80015c0 <agv_inverse_kinematic+0x1c0>)
 800148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001492:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001496:	f7ff f85b 	bl	8000550 <__aeabi_dmul>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4620      	mov	r0, r4
 80014a0:	4629      	mov	r1, r5
 80014a2:	f7fe fe9f 	bl	80001e4 <__adddf3>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4614      	mov	r4, r2
 80014ac:	461d      	mov	r5, r3
 80014ae:	a342      	add	r3, pc, #264	; (adr r3, 80015b8 <agv_inverse_kinematic+0x1b8>)
 80014b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014b8:	f7ff f84a 	bl	8000550 <__aeabi_dmul>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4620      	mov	r0, r4
 80014c2:	4629      	mov	r1, r5
 80014c4:	f7fe fe8e 	bl	80001e4 <__adddf3>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double V3 = (0.67*vx) + (0*vy) + (0.33*vt);
 80014d0:	a33d      	add	r3, pc, #244	; (adr r3, 80015c8 <agv_inverse_kinematic+0x1c8>)
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014da:	f7ff f839 	bl	8000550 <__aeabi_dmul>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4614      	mov	r4, r2
 80014e4:	461d      	mov	r5, r3
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	f04f 0300 	mov.w	r3, #0
 80014ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014f2:	f7ff f82d 	bl	8000550 <__aeabi_dmul>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4620      	mov	r0, r4
 80014fc:	4629      	mov	r1, r5
 80014fe:	f7fe fe71 	bl	80001e4 <__adddf3>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4614      	mov	r4, r2
 8001508:	461d      	mov	r5, r3
 800150a:	a32b      	add	r3, pc, #172	; (adr r3, 80015b8 <agv_inverse_kinematic+0x1b8>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001514:	f7ff f81c 	bl	8000550 <__aeabi_dmul>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4620      	mov	r0, r4
 800151e:	4629      	mov	r1, r5
 8001520:	f7fe fe60 	bl	80001e4 <__adddf3>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	e9c7 2306 	strd	r2, r3, [r7, #24]
	agv_speed_to_pwm(motorA, V1);
 800152c:	466d      	mov	r5, sp
 800152e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001532:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001534:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001536:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001538:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800153a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800153e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001542:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001546:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001548:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800154c:	f000 f840 	bl	80015d0 <agv_speed_to_pwm>
	agv_speed_to_pwm(motorB, V2);
 8001550:	466d      	mov	r5, sp
 8001552:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001556:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001558:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800155a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800155c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800155e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001562:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001566:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800156a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800156c:	ed97 0b08 	vldr	d0, [r7, #32]
 8001570:	f000 f82e 	bl	80015d0 <agv_speed_to_pwm>
	agv_speed_to_pwm(motorC, V3);
 8001574:	466d      	mov	r5, sp
 8001576:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 800157a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800157c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800157e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001580:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001582:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001586:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800158a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800158e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001590:	ed97 0b06 	vldr	d0, [r7, #24]
 8001594:	f000 f81c 	bl	80015d0 <agv_speed_to_pwm>
}
 8001598:	bf00      	nop
 800159a:	3730      	adds	r7, #48	; 0x30
 800159c:	46bd      	mov	sp, r7
 800159e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80015a2:	b004      	add	sp, #16
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	51eb851f 	.word	0x51eb851f
 80015ac:	bfd51eb8 	.word	0xbfd51eb8
 80015b0:	28f5c28f 	.word	0x28f5c28f
 80015b4:	3fe28f5c 	.word	0x3fe28f5c
 80015b8:	51eb851f 	.word	0x51eb851f
 80015bc:	3fd51eb8 	.word	0x3fd51eb8
 80015c0:	28f5c28f 	.word	0x28f5c28f
 80015c4:	bfe28f5c 	.word	0xbfe28f5c
 80015c8:	d70a3d71 	.word	0xd70a3d71
 80015cc:	3fe570a3 	.word	0x3fe570a3

080015d0 <agv_speed_to_pwm>:
	agv.Yp = cos(agv.St) - sin(agv.St) + 0;
	agv.Xp = sin(agv.St) + cos(agv.St) + 0;
	agv.Tp = 0 + 0 + agv.St;
}

void agv_speed_to_pwm(motor_t motor, double speed){
 80015d0:	b084      	sub	sp, #16
 80015d2:	b5b0      	push	{r4, r5, r7, lr}
 80015d4:	b08e      	sub	sp, #56	; 0x38
 80015d6:	af0c      	add	r7, sp, #48	; 0x30
 80015d8:	f107 0418 	add.w	r4, r7, #24
 80015dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80015e0:	ed87 0b00 	vstr	d0, [r7]
	// Maximum 628,2 mm/s
	if(speed < 628.2){
 80015e4:	a322      	add	r3, pc, #136	; (adr r3, 8001670 <agv_speed_to_pwm+0xa0>)
 80015e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015ee:	f7ff fa21 	bl	8000a34 <__aeabi_dcmplt>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d020      	beq.n	800163a <agv_speed_to_pwm+0x6a>
		agv_run_motor(motor, (speed*1.592));
 80015f8:	a31f      	add	r3, pc, #124	; (adr r3, 8001678 <agv_speed_to_pwm+0xa8>)
 80015fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001602:	f7fe ffa5 	bl	8000550 <__aeabi_dmul>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	f7ff fa39 	bl	8000a84 <__aeabi_d2iz>
 8001612:	4603      	mov	r3, r0
 8001614:	b21b      	sxth	r3, r3
 8001616:	930b      	str	r3, [sp, #44]	; 0x2c
 8001618:	466d      	mov	r5, sp
 800161a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800161e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001626:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800162a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800162e:	f107 0318 	add.w	r3, r7, #24
 8001632:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001634:	f7ff fca8 	bl	8000f88 <agv_run_motor>
	}
	else{
		agv_run_motor(motor, (628.2*1.592));
	}
}
 8001638:	e012      	b.n	8001660 <agv_speed_to_pwm+0x90>
		agv_run_motor(motor, (628.2*1.592));
 800163a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001640:	466d      	mov	r5, sp
 8001642:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800164a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800164c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800164e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001652:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001656:	f107 0318 	add.w	r3, r7, #24
 800165a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800165c:	f7ff fc94 	bl	8000f88 <agv_run_motor>
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800166a:	b004      	add	sp, #16
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	9999999a 	.word	0x9999999a
 8001674:	4083a199 	.word	0x4083a199
 8001678:	fdf3b646 	.word	0xfdf3b646
 800167c:	3ff978d4 	.word	0x3ff978d4

08001680 <PIDController_Init>:
 */


#include "PID_Driver.h"

void PIDController_Init(PIDController *pid) {
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError  = 0.0;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	629a      	str	r2, [r3, #40]	; 0x28

	pid->differentiator  = 0.0;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	631a      	str	r2, [r3, #48]	; 0x30

	pid->out = 0.0;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	635a      	str	r2, [r3, #52]	; 0x34

}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement) {
 80016bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016c0:	b086      	sub	sp, #24
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	60f8      	str	r0, [r7, #12]
 80016c6:	ed87 0a02 	vstr	s0, [r7, #8]
 80016ca:	edc7 0a01 	vstr	s1, [r7, #4]

	// Error signal
    float error = setpoint - measurement;
 80016ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80016d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80016d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016da:	edc7 7a05 	vstr	s15, [r7, #20]

	// Proportional
    float proportional = pid->Kp * error;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	edd3 7a00 	vldr	s15, [r3]
 80016e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80016e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ec:	edc7 7a04 	vstr	s15, [r7, #16]

	// Integral
    pid->integrator = pid->integrator + 0.5 * pid->Ki * pid->T_sample * (error + pid->prevError);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe fed3 	bl	80004a0 <__aeabi_f2d>
 80016fa:	4680      	mov	r8, r0
 80016fc:	4689      	mov	r9, r1
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe fecc 	bl	80004a0 <__aeabi_f2d>
 8001708:	f04f 0200 	mov.w	r2, #0
 800170c:	4b86      	ldr	r3, [pc, #536]	; (8001928 <PIDController_Update+0x26c>)
 800170e:	f7fe ff1f 	bl	8000550 <__aeabi_dmul>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4692      	mov	sl, r2
 8001718:	469b      	mov	fp, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe febe 	bl	80004a0 <__aeabi_f2d>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4650      	mov	r0, sl
 800172a:	4659      	mov	r1, fp
 800172c:	f7fe ff10 	bl	8000550 <__aeabi_dmul>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4692      	mov	sl, r2
 8001736:	469b      	mov	fp, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800173e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001746:	ee17 0a90 	vmov	r0, s15
 800174a:	f7fe fea9 	bl	80004a0 <__aeabi_f2d>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4650      	mov	r0, sl
 8001754:	4659      	mov	r1, fp
 8001756:	f7fe fefb 	bl	8000550 <__aeabi_dmul>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4640      	mov	r0, r8
 8001760:	4649      	mov	r1, r9
 8001762:	f7fe fd3f 	bl	80001e4 <__adddf3>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	f7ff f9b1 	bl	8000ad4 <__aeabi_d2f>
 8001772:	4602      	mov	r2, r0
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	625a      	str	r2, [r3, #36]	; 0x24

	// Anti-wind-up via integrator clamping
    if (pid->integrator > pid->limMaxInt) {
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	edd3 7a07 	vldr	s15, [r3, #28]
 8001784:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178c:	dd04      	ble.n	8001798 <PIDController_Update+0xdc>

        pid->integrator = pid->limMaxInt;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	69da      	ldr	r2, [r3, #28]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
 8001796:	e00e      	b.n	80017b6 <PIDController_Update+0xfa>

    } else if (pid->integrator < pid->limMinInt) {
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	edd3 7a06 	vldr	s15, [r3, #24]
 80017a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ac:	d503      	bpl.n	80017b6 <PIDController_Update+0xfa>

        pid->integrator = pid->limMinInt;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	699a      	ldr	r2, [r3, #24]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24

    }

	// Derivative (band-limited differentiator)
    pid->differentiator = -(2.0 * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe fe70 	bl	80004a0 <__aeabi_f2d>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	f7fe fd0e 	bl	80001e4 <__adddf3>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4690      	mov	r8, r2
 80017ce:	4699      	mov	r9, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80017d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80017da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017de:	ee17 0a90 	vmov	r0, s15
 80017e2:	f7fe fe5d 	bl	80004a0 <__aeabi_f2d>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4640      	mov	r0, r8
 80017ec:	4649      	mov	r1, r9
 80017ee:	f7fe feaf 	bl	8000550 <__aeabi_dmul>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4690      	mov	r8, r2
 80017f8:	4699      	mov	r9, r3
                        + (2.0 * pid->tau - pid->T_sample) * pid->differentiator)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fe4e 	bl	80004a0 <__aeabi_f2d>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	f7fe fcec 	bl	80001e4 <__adddf3>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4692      	mov	sl, r2
 8001812:	469b      	mov	fp, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fe41 	bl	80004a0 <__aeabi_f2d>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4650      	mov	r0, sl
 8001824:	4659      	mov	r1, fp
 8001826:	f7fe fcdb 	bl	80001e0 <__aeabi_dsub>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4692      	mov	sl, r2
 8001830:	469b      	mov	fp, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fe32 	bl	80004a0 <__aeabi_f2d>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4650      	mov	r0, sl
 8001842:	4659      	mov	r1, fp
 8001844:	f7fe fe84 	bl	8000550 <__aeabi_dmul>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4640      	mov	r0, r8
 800184e:	4649      	mov	r1, r9
 8001850:	f7fe fcc8 	bl	80001e4 <__adddf3>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
    pid->differentiator = -(2.0 * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8001858:	4614      	mov	r4, r2
 800185a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
                        / (2.0 * pid->tau + pid->T_sample);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fe1c 	bl	80004a0 <__aeabi_f2d>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	f7fe fcba 	bl	80001e4 <__adddf3>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4690      	mov	r8, r2
 8001876:	4699      	mov	r9, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fe0f 	bl	80004a0 <__aeabi_f2d>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4640      	mov	r0, r8
 8001888:	4649      	mov	r1, r9
 800188a:	f7fe fcab 	bl	80001e4 <__adddf3>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4620      	mov	r0, r4
 8001894:	4629      	mov	r1, r5
 8001896:	f7fe ff85 	bl	80007a4 <__aeabi_ddiv>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	f7ff f917 	bl	8000ad4 <__aeabi_d2f>
 80018a6:	4602      	mov	r2, r0
    pid->differentiator = -(2.0 * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	62da      	str	r2, [r3, #44]	; 0x2c


	// Compute output and apply limits
    pid->out = proportional + pid->integrator + pid->differentiator;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80018b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80018b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80018c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    if (pid->out > pid->limMax) {
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	edd3 7a05 	vldr	s15, [r3, #20]
 80018d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018de:	dd04      	ble.n	80018ea <PIDController_Update+0x22e>

        pid->out = pid->limMax;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	695a      	ldr	r2, [r3, #20]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	635a      	str	r2, [r3, #52]	; 0x34
 80018e8:	e00e      	b.n	8001908 <PIDController_Update+0x24c>

    } else if (pid->out < pid->limMin) {
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	edd3 7a04 	vldr	s15, [r3, #16]
 80018f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fe:	d503      	bpl.n	8001908 <PIDController_Update+0x24c>

        pid->out = pid->limMin;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	691a      	ldr	r2, [r3, #16]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	635a      	str	r2, [r3, #52]	; 0x34

    }

	// Store error and measurement for later use
    pid->prevError       = error;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	629a      	str	r2, [r3, #40]	; 0x28
    pid->prevMeasurement = measurement;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	631a      	str	r2, [r3, #48]	; 0x30

	// Return controller output
    return pid->out;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001918:	ee07 3a90 	vmov	s15, r3
}
 800191c:	eeb0 0a67 	vmov.f32	s0, s15
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001928:	3fe00000 	.word	0x3fe00000

0800192c <HAL_TIM_IC_CaptureCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t vt = 0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	if(htim->Instance  == TIM1){
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a5c      	ldr	r2, [pc, #368]	; (8001aac <HAL_TIM_IC_CaptureCallback+0x180>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d113      	bne.n	8001966 <HAL_TIM_IC_CaptureCallback+0x3a>
		encoder_A.counter  	= __HAL_TIM_GET_COUNTER(htim);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	4a5a      	ldr	r2, [pc, #360]	; (8001ab0 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001946:	6093      	str	r3, [r2, #8]
		encoder_A.counts 	= (int16_t)encoder_A.counter;
 8001948:	4b59      	ldr	r3, [pc, #356]	; (8001ab0 <HAL_TIM_IC_CaptureCallback+0x184>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	b21a      	sxth	r2, r3
 800194e:	4b58      	ldr	r3, [pc, #352]	; (8001ab0 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001950:	819a      	strh	r2, [r3, #12]
		encoder_A.position	= encoder_A.counts/4;
 8001952:	4b57      	ldr	r3, [pc, #348]	; (8001ab0 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001954:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001958:	2b00      	cmp	r3, #0
 800195a:	da00      	bge.n	800195e <HAL_TIM_IC_CaptureCallback+0x32>
 800195c:	3303      	adds	r3, #3
 800195e:	109b      	asrs	r3, r3, #2
 8001960:	b21a      	sxth	r2, r3
 8001962:	4b53      	ldr	r3, [pc, #332]	; (8001ab0 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001964:	81da      	strh	r2, [r3, #14]
	}
	if(htim->Instance  == TIM2){
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800196e:	d113      	bne.n	8001998 <HAL_TIM_IC_CaptureCallback+0x6c>
		encoder_B.counter  	= __HAL_TIM_GET_COUNTER(htim);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	4a4f      	ldr	r2, [pc, #316]	; (8001ab4 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001978:	6093      	str	r3, [r2, #8]
		encoder_B.counts 	= (int16_t)encoder_B.counter;
 800197a:	4b4e      	ldr	r3, [pc, #312]	; (8001ab4 <HAL_TIM_IC_CaptureCallback+0x188>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	b21a      	sxth	r2, r3
 8001980:	4b4c      	ldr	r3, [pc, #304]	; (8001ab4 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001982:	819a      	strh	r2, [r3, #12]
		encoder_B.position	= encoder_B.counts/4;
 8001984:	4b4b      	ldr	r3, [pc, #300]	; (8001ab4 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001986:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	da00      	bge.n	8001990 <HAL_TIM_IC_CaptureCallback+0x64>
 800198e:	3303      	adds	r3, #3
 8001990:	109b      	asrs	r3, r3, #2
 8001992:	b21a      	sxth	r2, r3
 8001994:	4b47      	ldr	r3, [pc, #284]	; (8001ab4 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001996:	81da      	strh	r2, [r3, #14]
	}
	if(htim->Instance  == TIM5){
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a46      	ldr	r2, [pc, #280]	; (8001ab8 <HAL_TIM_IC_CaptureCallback+0x18c>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d113      	bne.n	80019ca <HAL_TIM_IC_CaptureCallback+0x9e>
		encoder_C.counter  	= __HAL_TIM_GET_COUNTER(htim);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a8:	4a44      	ldr	r2, [pc, #272]	; (8001abc <HAL_TIM_IC_CaptureCallback+0x190>)
 80019aa:	6093      	str	r3, [r2, #8]
		encoder_C.counts 		= (int16_t)encoder_C.counter;
 80019ac:	4b43      	ldr	r3, [pc, #268]	; (8001abc <HAL_TIM_IC_CaptureCallback+0x190>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	b21a      	sxth	r2, r3
 80019b2:	4b42      	ldr	r3, [pc, #264]	; (8001abc <HAL_TIM_IC_CaptureCallback+0x190>)
 80019b4:	819a      	strh	r2, [r3, #12]
		encoder_C.position	= encoder_C.counts/4;
 80019b6:	4b41      	ldr	r3, [pc, #260]	; (8001abc <HAL_TIM_IC_CaptureCallback+0x190>)
 80019b8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	da00      	bge.n	80019c2 <HAL_TIM_IC_CaptureCallback+0x96>
 80019c0:	3303      	adds	r3, #3
 80019c2:	109b      	asrs	r3, r3, #2
 80019c4:	b21a      	sxth	r2, r3
 80019c6:	4b3d      	ldr	r3, [pc, #244]	; (8001abc <HAL_TIM_IC_CaptureCallback+0x190>)
 80019c8:	81da      	strh	r2, [r3, #14]
	}
	kinematic.S1 = abs(encoder_A.position);
 80019ca:	4b39      	ldr	r3, [pc, #228]	; (8001ab0 <HAL_TIM_IC_CaptureCallback+0x184>)
 80019cc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	bfb8      	it	lt
 80019d4:	425b      	neglt	r3, r3
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	4618      	mov	r0, r3
 80019da:	f7fe fd4f 	bl	800047c <__aeabi_i2d>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4937      	ldr	r1, [pc, #220]	; (8001ac0 <HAL_TIM_IC_CaptureCallback+0x194>)
 80019e4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	kinematic.S2 = abs(encoder_B.position);
 80019e8:	4b32      	ldr	r3, [pc, #200]	; (8001ab4 <HAL_TIM_IC_CaptureCallback+0x188>)
 80019ea:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	bfb8      	it	lt
 80019f2:	425b      	neglt	r3, r3
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7fe fd40 	bl	800047c <__aeabi_i2d>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	492f      	ldr	r1, [pc, #188]	; (8001ac0 <HAL_TIM_IC_CaptureCallback+0x194>)
 8001a02:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	kinematic.S3 = abs(encoder_C.position);
 8001a06:	4b2d      	ldr	r3, [pc, #180]	; (8001abc <HAL_TIM_IC_CaptureCallback+0x190>)
 8001a08:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	bfb8      	it	lt
 8001a10:	425b      	neglt	r3, r3
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fd31 	bl	800047c <__aeabi_i2d>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4928      	ldr	r1, [pc, #160]	; (8001ac0 <HAL_TIM_IC_CaptureCallback+0x194>)
 8001a20:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	kinematic.Sx = agv_kinematic_Sx(encoder_A.position,encoder_B.position,encoder_C.position);
 8001a24:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001a26:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001a2e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a32:	4619      	mov	r1, r3
 8001a34:	4b21      	ldr	r3, [pc, #132]	; (8001abc <HAL_TIM_IC_CaptureCallback+0x190>)
 8001a36:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	f7ff fc84 	bl	8001348 <agv_kinematic_Sx>
 8001a40:	eeb0 7a40 	vmov.f32	s14, s0
 8001a44:	eef0 7a60 	vmov.f32	s15, s1
 8001a48:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <HAL_TIM_IC_CaptureCallback+0x194>)
 8001a4a:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
	kinematic.Sy = agv_kinematic_Sy(encoder_A.position,encoder_B.position,encoder_C.position);
 8001a4e:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001a50:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a54:	4618      	mov	r0, r3
 8001a56:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001a58:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4b17      	ldr	r3, [pc, #92]	; (8001abc <HAL_TIM_IC_CaptureCallback+0x190>)
 8001a60:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a64:	461a      	mov	r2, r3
 8001a66:	f7ff fc2b 	bl	80012c0 <agv_kinematic_Sy>
 8001a6a:	eeb0 7a40 	vmov.f32	s14, s0
 8001a6e:	eef0 7a60 	vmov.f32	s15, s1
 8001a72:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <HAL_TIM_IC_CaptureCallback+0x194>)
 8001a74:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
	kinematic.St = agv_kinematic_St(encoder_A.position,encoder_B.position,encoder_C.position);
 8001a78:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001a7a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001a82:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a86:	4619      	mov	r1, r3
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <HAL_TIM_IC_CaptureCallback+0x190>)
 8001a8a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	f7ff fc98 	bl	80013c4 <agv_kinematic_St>
 8001a94:	eeb0 7a40 	vmov.f32	s14, s0
 8001a98:	eef0 7a60 	vmov.f32	s15, s1
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <HAL_TIM_IC_CaptureCallback+0x194>)
 8001a9e:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40010000 	.word	0x40010000
 8001ab0:	2000055c 	.word	0x2000055c
 8001ab4:	20000574 	.word	0x20000574
 8001ab8:	40000c00 	.word	0x40000c00
 8001abc:	2000058c 	.word	0x2000058c
 8001ac0:	20000370 	.word	0x20000370

08001ac4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
	BNO08X_GetData(&BNO08x_Data);
 8001acc:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <HAL_UART_RxCpltCallback+0x20>)
 8001ace:	f7ff f9cf 	bl	8000e70 <BNO08X_GetData>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001ad2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ad6:	4804      	ldr	r0, [pc, #16]	; (8001ae8 <HAL_UART_RxCpltCallback+0x24>)
 8001ad8:	f001 fef3 	bl	80038c2 <HAL_GPIO_TogglePin>
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000088 	.word	0x20000088
 8001ae8:	40020800 	.word	0x40020800
 8001aec:	00000000 	.word	0x00000000

08001af0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001af2:	b0ab      	sub	sp, #172	; 0xac
 8001af4:	af2a      	add	r7, sp, #168	; 0xa8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001af6:	f001 faab 	bl	8003050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001afa:	f000 f999 	bl	8001e30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001afe:	f000 fcf5 	bl	80024ec <MX_GPIO_Init>
  MX_TIM1_Init();
 8001b02:	f000 f9fd 	bl	8001f00 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001b06:	f000 fa53 	bl	8001fb0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b0a:	f000 faa5 	bl	8002058 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b0e:	f000 fb3b 	bl	8002188 <MX_TIM4_Init>
  MX_TIM9_Init();
 8001b12:	f000 fbe1 	bl	80022d8 <MX_TIM9_Init>
  MX_TIM10_Init();
 8001b16:	f000 fc4d 	bl	80023b4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001b1a:	f000 fc6f 	bl	80023fc <MX_TIM11_Init>
  MX_USART6_UART_Init();
 8001b1e:	f000 fcbb 	bl	8002498 <MX_USART6_UART_Init>
  MX_USART1_UART_Init();
 8001b22:	f000 fc8f 	bl	8002444 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8001b26:	f000 fb83 	bl	8002230 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  //+++++++++++++++++++++++++++++++++ MOTOR INITIALIZATION +++++++++++++++++++++++++++++//
  // Configuration 'Motor A'
  motor_A.tim_R = &htim3;
 8001b2a:	4b9f      	ldr	r3, [pc, #636]	; (8001da8 <main+0x2b8>)
 8001b2c:	4a9f      	ldr	r2, [pc, #636]	; (8001dac <main+0x2bc>)
 8001b2e:	601a      	str	r2, [r3, #0]
  motor_A.tim_L = &htim3;
 8001b30:	4b9d      	ldr	r3, [pc, #628]	; (8001da8 <main+0x2b8>)
 8001b32:	4a9e      	ldr	r2, [pc, #632]	; (8001dac <main+0x2bc>)
 8001b34:	605a      	str	r2, [r3, #4]
  motor_A.tim_number_R = TIM3;
 8001b36:	4b9c      	ldr	r3, [pc, #624]	; (8001da8 <main+0x2b8>)
 8001b38:	4a9d      	ldr	r2, [pc, #628]	; (8001db0 <main+0x2c0>)
 8001b3a:	609a      	str	r2, [r3, #8]
  motor_A.tim_number_L = TIM3;
 8001b3c:	4b9a      	ldr	r3, [pc, #616]	; (8001da8 <main+0x2b8>)
 8001b3e:	4a9c      	ldr	r2, [pc, #624]	; (8001db0 <main+0x2c0>)
 8001b40:	60da      	str	r2, [r3, #12]
  motor_A.channel_R = 1;
 8001b42:	4b99      	ldr	r3, [pc, #612]	; (8001da8 <main+0x2b8>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	741a      	strb	r2, [r3, #16]
  motor_A.channel_L = 2;
 8001b48:	4b97      	ldr	r3, [pc, #604]	; (8001da8 <main+0x2b8>)
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	745a      	strb	r2, [r3, #17]
  motor_A.EN_PORT_R = ENR_A_GPIO_Port;
 8001b4e:	4b96      	ldr	r3, [pc, #600]	; (8001da8 <main+0x2b8>)
 8001b50:	4a98      	ldr	r2, [pc, #608]	; (8001db4 <main+0x2c4>)
 8001b52:	619a      	str	r2, [r3, #24]
  motor_A.EN_PORT_L = ENL_A_GPIO_Port;
 8001b54:	4b94      	ldr	r3, [pc, #592]	; (8001da8 <main+0x2b8>)
 8001b56:	4a97      	ldr	r2, [pc, #604]	; (8001db4 <main+0x2c4>)
 8001b58:	61da      	str	r2, [r3, #28]
  motor_A.EN_PIN_R = ENR_A_Pin;
 8001b5a:	4b93      	ldr	r3, [pc, #588]	; (8001da8 <main+0x2b8>)
 8001b5c:	2204      	movs	r2, #4
 8001b5e:	841a      	strh	r2, [r3, #32]
  motor_A.EN_PIN_L = ENL_A_Pin;
 8001b60:	4b91      	ldr	r3, [pc, #580]	; (8001da8 <main+0x2b8>)
 8001b62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b66:	845a      	strh	r2, [r3, #34]	; 0x22

  // Configuration 'Motor B'
  motor_B.tim_R = &htim3;
 8001b68:	4b93      	ldr	r3, [pc, #588]	; (8001db8 <main+0x2c8>)
 8001b6a:	4a90      	ldr	r2, [pc, #576]	; (8001dac <main+0x2bc>)
 8001b6c:	601a      	str	r2, [r3, #0]
  motor_B.tim_L = &htim3;
 8001b6e:	4b92      	ldr	r3, [pc, #584]	; (8001db8 <main+0x2c8>)
 8001b70:	4a8e      	ldr	r2, [pc, #568]	; (8001dac <main+0x2bc>)
 8001b72:	605a      	str	r2, [r3, #4]
  motor_B.tim_number_R = TIM3;
 8001b74:	4b90      	ldr	r3, [pc, #576]	; (8001db8 <main+0x2c8>)
 8001b76:	4a8e      	ldr	r2, [pc, #568]	; (8001db0 <main+0x2c0>)
 8001b78:	609a      	str	r2, [r3, #8]
  motor_B.tim_number_L = TIM3;
 8001b7a:	4b8f      	ldr	r3, [pc, #572]	; (8001db8 <main+0x2c8>)
 8001b7c:	4a8c      	ldr	r2, [pc, #560]	; (8001db0 <main+0x2c0>)
 8001b7e:	60da      	str	r2, [r3, #12]
  motor_B.channel_R = 3;
 8001b80:	4b8d      	ldr	r3, [pc, #564]	; (8001db8 <main+0x2c8>)
 8001b82:	2203      	movs	r2, #3
 8001b84:	741a      	strb	r2, [r3, #16]
  motor_B.channel_L = 4;
 8001b86:	4b8c      	ldr	r3, [pc, #560]	; (8001db8 <main+0x2c8>)
 8001b88:	2204      	movs	r2, #4
 8001b8a:	745a      	strb	r2, [r3, #17]
  motor_B.EN_PORT_R = ENR_B_GPIO_Port;
 8001b8c:	4b8a      	ldr	r3, [pc, #552]	; (8001db8 <main+0x2c8>)
 8001b8e:	4a89      	ldr	r2, [pc, #548]	; (8001db4 <main+0x2c4>)
 8001b90:	619a      	str	r2, [r3, #24]
  motor_B.EN_PORT_L = ENL_B_GPIO_Port;
 8001b92:	4b89      	ldr	r3, [pc, #548]	; (8001db8 <main+0x2c8>)
 8001b94:	4a87      	ldr	r2, [pc, #540]	; (8001db4 <main+0x2c4>)
 8001b96:	61da      	str	r2, [r3, #28]
  motor_B.EN_PIN_R = ENR_B_Pin;
 8001b98:	4b87      	ldr	r3, [pc, #540]	; (8001db8 <main+0x2c8>)
 8001b9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b9e:	841a      	strh	r2, [r3, #32]
  motor_B.EN_PIN_L = ENL_B_Pin;
 8001ba0:	4b85      	ldr	r3, [pc, #532]	; (8001db8 <main+0x2c8>)
 8001ba2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ba6:	845a      	strh	r2, [r3, #34]	; 0x22

  // Configuration 'Motor C
  motor_C.tim_R = &htim9;
 8001ba8:	4b84      	ldr	r3, [pc, #528]	; (8001dbc <main+0x2cc>)
 8001baa:	4a85      	ldr	r2, [pc, #532]	; (8001dc0 <main+0x2d0>)
 8001bac:	601a      	str	r2, [r3, #0]
  motor_C.tim_L = &htim9;
 8001bae:	4b83      	ldr	r3, [pc, #524]	; (8001dbc <main+0x2cc>)
 8001bb0:	4a83      	ldr	r2, [pc, #524]	; (8001dc0 <main+0x2d0>)
 8001bb2:	605a      	str	r2, [r3, #4]
  motor_C.tim_number_R = TIM9;
 8001bb4:	4b81      	ldr	r3, [pc, #516]	; (8001dbc <main+0x2cc>)
 8001bb6:	4a83      	ldr	r2, [pc, #524]	; (8001dc4 <main+0x2d4>)
 8001bb8:	609a      	str	r2, [r3, #8]
  motor_C.tim_number_L = TIM9;
 8001bba:	4b80      	ldr	r3, [pc, #512]	; (8001dbc <main+0x2cc>)
 8001bbc:	4a81      	ldr	r2, [pc, #516]	; (8001dc4 <main+0x2d4>)
 8001bbe:	60da      	str	r2, [r3, #12]
  motor_C.channel_R = 1;
 8001bc0:	4b7e      	ldr	r3, [pc, #504]	; (8001dbc <main+0x2cc>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	741a      	strb	r2, [r3, #16]
  motor_C.channel_L = 2;
 8001bc6:	4b7d      	ldr	r3, [pc, #500]	; (8001dbc <main+0x2cc>)
 8001bc8:	2202      	movs	r2, #2
 8001bca:	745a      	strb	r2, [r3, #17]
  motor_C.EN_PORT_R = ENR_C_GPIO_Port;
 8001bcc:	4b7b      	ldr	r3, [pc, #492]	; (8001dbc <main+0x2cc>)
 8001bce:	4a79      	ldr	r2, [pc, #484]	; (8001db4 <main+0x2c4>)
 8001bd0:	619a      	str	r2, [r3, #24]
  motor_C.EN_PORT_L = ENL_C_GPIO_Port;
 8001bd2:	4b7a      	ldr	r3, [pc, #488]	; (8001dbc <main+0x2cc>)
 8001bd4:	4a77      	ldr	r2, [pc, #476]	; (8001db4 <main+0x2c4>)
 8001bd6:	61da      	str	r2, [r3, #28]
  motor_C.EN_PIN_R = ENR_C_Pin;
 8001bd8:	4b78      	ldr	r3, [pc, #480]	; (8001dbc <main+0x2cc>)
 8001bda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bde:	841a      	strh	r2, [r3, #32]
  motor_C.EN_PIN_L = ENL_C_Pin;
 8001be0:	4b76      	ldr	r3, [pc, #472]	; (8001dbc <main+0x2cc>)
 8001be2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001be6:	845a      	strh	r2, [r3, #34]	; 0x22

  //+++++++++++++++++++++++++++++++++ ENCODER INITIALIZATION ++++++++++++++++++++++++++++++//
  agv_encoder_start(encoder_A, &htim1, TIM1);
 8001be8:	4b77      	ldr	r3, [pc, #476]	; (8001dc8 <main+0x2d8>)
 8001bea:	4a78      	ldr	r2, [pc, #480]	; (8001dcc <main+0x2dc>)
 8001bec:	9203      	str	r2, [sp, #12]
 8001bee:	4a78      	ldr	r2, [pc, #480]	; (8001dd0 <main+0x2e0>)
 8001bf0:	9202      	str	r2, [sp, #8]
 8001bf2:	466c      	mov	r4, sp
 8001bf4:	f103 0210 	add.w	r2, r3, #16
 8001bf8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bfc:	e884 0003 	stmia.w	r4, {r0, r1}
 8001c00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c02:	f7ff fb46 	bl	8001292 <agv_encoder_start>
  agv_encoder_start(encoder_B, &htim2, TIM2);
 8001c06:	4b73      	ldr	r3, [pc, #460]	; (8001dd4 <main+0x2e4>)
 8001c08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c0c:	9203      	str	r2, [sp, #12]
 8001c0e:	4a72      	ldr	r2, [pc, #456]	; (8001dd8 <main+0x2e8>)
 8001c10:	9202      	str	r2, [sp, #8]
 8001c12:	466c      	mov	r4, sp
 8001c14:	f103 0210 	add.w	r2, r3, #16
 8001c18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c1c:	e884 0003 	stmia.w	r4, {r0, r1}
 8001c20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c22:	f7ff fb36 	bl	8001292 <agv_encoder_start>
  agv_encoder_start(encoder_C, &htim5, TIM5);
 8001c26:	4b6d      	ldr	r3, [pc, #436]	; (8001ddc <main+0x2ec>)
 8001c28:	4a6d      	ldr	r2, [pc, #436]	; (8001de0 <main+0x2f0>)
 8001c2a:	9203      	str	r2, [sp, #12]
 8001c2c:	4a6d      	ldr	r2, [pc, #436]	; (8001de4 <main+0x2f4>)
 8001c2e:	9202      	str	r2, [sp, #8]
 8001c30:	466c      	mov	r4, sp
 8001c32:	f103 0210 	add.w	r2, r3, #16
 8001c36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c3a:	e884 0003 	stmia.w	r4, {r0, r1}
 8001c3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c40:	f7ff fb27 	bl	8001292 <agv_encoder_start>

  //+++++++++++++++++++++++++++++++++ ENCODER TO MOTOR ++++++++++++++++++++++++++++++++++++//
  motor_A.ENC = encoder_A;
 8001c44:	4b58      	ldr	r3, [pc, #352]	; (8001da8 <main+0x2b8>)
 8001c46:	4a60      	ldr	r2, [pc, #384]	; (8001dc8 <main+0x2d8>)
 8001c48:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8001c4c:	4615      	mov	r5, r2
 8001c4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c52:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c56:	e884 0003 	stmia.w	r4, {r0, r1}
  motor_B.ENC = encoder_B;
 8001c5a:	4b57      	ldr	r3, [pc, #348]	; (8001db8 <main+0x2c8>)
 8001c5c:	4a5d      	ldr	r2, [pc, #372]	; (8001dd4 <main+0x2e4>)
 8001c5e:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8001c62:	4615      	mov	r5, r2
 8001c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c68:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c6c:	e884 0003 	stmia.w	r4, {r0, r1}
  motor_C.ENC = encoder_C;
 8001c70:	4b52      	ldr	r3, [pc, #328]	; (8001dbc <main+0x2cc>)
 8001c72:	4a5a      	ldr	r2, [pc, #360]	; (8001ddc <main+0x2ec>)
 8001c74:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8001c78:	4615      	mov	r5, r2
 8001c7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c7e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c82:	e884 0003 	stmia.w	r4, {r0, r1}

  // STOP ALL Motor
  agv_stop_all(motor_A, motor_B, motor_C);
 8001c86:	4e48      	ldr	r6, [pc, #288]	; (8001da8 <main+0x2b8>)
 8001c88:	4b4c      	ldr	r3, [pc, #304]	; (8001dbc <main+0x2cc>)
 8001c8a:	ac1a      	add	r4, sp, #104	; 0x68
 8001c8c:	461d      	mov	r5, r3
 8001c8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001ca2:	4b45      	ldr	r3, [pc, #276]	; (8001db8 <main+0x2c8>)
 8001ca4:	ac0b      	add	r4, sp, #44	; 0x2c
 8001ca6:	461d      	mov	r5, r3
 8001ca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001cbc:	466d      	mov	r5, sp
 8001cbe:	f106 0410 	add.w	r4, r6, #16
 8001cc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cca:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001cce:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001cd2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001cd6:	f7ff fa5a 	bl	800118e <agv_stop_all>

  //+++++++++++++++++++++++++++++++++ PID INITIALIZATION ++++++++++++++++++++++++++++++//
  // Y Axis
  pid_vy.Kp = 1;			pid_vy.Ki = 0;				pid_vy.Kd = 0;
 8001cda:	4b43      	ldr	r3, [pc, #268]	; (8001de8 <main+0x2f8>)
 8001cdc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	4b41      	ldr	r3, [pc, #260]	; (8001de8 <main+0x2f8>)
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	4b3f      	ldr	r3, [pc, #252]	; (8001de8 <main+0x2f8>)
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
  pid_vy.limMax = 500; 		pid_vy.limMin = -500; 		pid_vy.limMaxInt = 5; 	pid_vy.limMinInt = -5;
 8001cf2:	4b3d      	ldr	r3, [pc, #244]	; (8001de8 <main+0x2f8>)
 8001cf4:	4a3d      	ldr	r2, [pc, #244]	; (8001dec <main+0x2fc>)
 8001cf6:	615a      	str	r2, [r3, #20]
 8001cf8:	4b3b      	ldr	r3, [pc, #236]	; (8001de8 <main+0x2f8>)
 8001cfa:	4a3d      	ldr	r2, [pc, #244]	; (8001df0 <main+0x300>)
 8001cfc:	611a      	str	r2, [r3, #16]
 8001cfe:	4b3a      	ldr	r3, [pc, #232]	; (8001de8 <main+0x2f8>)
 8001d00:	4a3c      	ldr	r2, [pc, #240]	; (8001df4 <main+0x304>)
 8001d02:	61da      	str	r2, [r3, #28]
 8001d04:	4b38      	ldr	r3, [pc, #224]	; (8001de8 <main+0x2f8>)
 8001d06:	4a3c      	ldr	r2, [pc, #240]	; (8001df8 <main+0x308>)
 8001d08:	619a      	str	r2, [r3, #24]
  pid_vy.T_sample = 0.01;
 8001d0a:	4b37      	ldr	r3, [pc, #220]	; (8001de8 <main+0x2f8>)
 8001d0c:	4a3b      	ldr	r2, [pc, #236]	; (8001dfc <main+0x30c>)
 8001d0e:	621a      	str	r2, [r3, #32]
  PIDController_Init(&pid_vy);
 8001d10:	4835      	ldr	r0, [pc, #212]	; (8001de8 <main+0x2f8>)
 8001d12:	f7ff fcb5 	bl	8001680 <PIDController_Init>

  // X Axis
  pid_vx.Kp = 1;			pid_vx.Ki = 0;				pid_vx.Kd = 0;
 8001d16:	4b3a      	ldr	r3, [pc, #232]	; (8001e00 <main+0x310>)
 8001d18:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	4b38      	ldr	r3, [pc, #224]	; (8001e00 <main+0x310>)
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	4b36      	ldr	r3, [pc, #216]	; (8001e00 <main+0x310>)
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  pid_vx.limMax = 500; 		pid_vx.limMin = -500; 		pid_vx.limMaxInt = 5; 	pid_vx.limMinInt = -5;
 8001d2e:	4b34      	ldr	r3, [pc, #208]	; (8001e00 <main+0x310>)
 8001d30:	4a2e      	ldr	r2, [pc, #184]	; (8001dec <main+0x2fc>)
 8001d32:	615a      	str	r2, [r3, #20]
 8001d34:	4b32      	ldr	r3, [pc, #200]	; (8001e00 <main+0x310>)
 8001d36:	4a2e      	ldr	r2, [pc, #184]	; (8001df0 <main+0x300>)
 8001d38:	611a      	str	r2, [r3, #16]
 8001d3a:	4b31      	ldr	r3, [pc, #196]	; (8001e00 <main+0x310>)
 8001d3c:	4a2d      	ldr	r2, [pc, #180]	; (8001df4 <main+0x304>)
 8001d3e:	61da      	str	r2, [r3, #28]
 8001d40:	4b2f      	ldr	r3, [pc, #188]	; (8001e00 <main+0x310>)
 8001d42:	4a2d      	ldr	r2, [pc, #180]	; (8001df8 <main+0x308>)
 8001d44:	619a      	str	r2, [r3, #24]
  pid_vx.T_sample = 0.01;
 8001d46:	4b2e      	ldr	r3, [pc, #184]	; (8001e00 <main+0x310>)
 8001d48:	4a2c      	ldr	r2, [pc, #176]	; (8001dfc <main+0x30c>)
 8001d4a:	621a      	str	r2, [r3, #32]
  PIDController_Init(&pid_vx);
 8001d4c:	482c      	ldr	r0, [pc, #176]	; (8001e00 <main+0x310>)
 8001d4e:	f7ff fc97 	bl	8001680 <PIDController_Init>

  // Orientation
  pid_vt.Kp = 1;			pid_vt.Ki = 0;				pid_vt.Kd = 0;
 8001d52:	4b2c      	ldr	r3, [pc, #176]	; (8001e04 <main+0x314>)
 8001d54:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <main+0x314>)
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	4b28      	ldr	r3, [pc, #160]	; (8001e04 <main+0x314>)
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  pid_vt.limMax = 500; 		pid_vt.limMin = -500; 		pid_vt.limMaxInt = 5; 	pid_vt.limMinInt = -5;
 8001d6a:	4b26      	ldr	r3, [pc, #152]	; (8001e04 <main+0x314>)
 8001d6c:	4a1f      	ldr	r2, [pc, #124]	; (8001dec <main+0x2fc>)
 8001d6e:	615a      	str	r2, [r3, #20]
 8001d70:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <main+0x314>)
 8001d72:	4a1f      	ldr	r2, [pc, #124]	; (8001df0 <main+0x300>)
 8001d74:	611a      	str	r2, [r3, #16]
 8001d76:	4b23      	ldr	r3, [pc, #140]	; (8001e04 <main+0x314>)
 8001d78:	4a1e      	ldr	r2, [pc, #120]	; (8001df4 <main+0x304>)
 8001d7a:	61da      	str	r2, [r3, #28]
 8001d7c:	4b21      	ldr	r3, [pc, #132]	; (8001e04 <main+0x314>)
 8001d7e:	4a1e      	ldr	r2, [pc, #120]	; (8001df8 <main+0x308>)
 8001d80:	619a      	str	r2, [r3, #24]
  pid_vt.T_sample = 0.01;
 8001d82:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <main+0x314>)
 8001d84:	4a1d      	ldr	r2, [pc, #116]	; (8001dfc <main+0x30c>)
 8001d86:	621a      	str	r2, [r3, #32]
  PIDController_Init(&pid_vt);
 8001d88:	481e      	ldr	r0, [pc, #120]	; (8001e04 <main+0x314>)
 8001d8a:	f7ff fc79 	bl	8001680 <PIDController_Init>

  //+++++++++++++++++++++++++++++++++ BNO08X INITIALIZATION ++++++++++++++++++++++++++++++//
  BNO08X_Init(&huart6);
 8001d8e:	481e      	ldr	r0, [pc, #120]	; (8001e08 <main+0x318>)
 8001d90:	f7ff f8e0 	bl	8000f54 <BNO08X_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  run_to_point(500,500,0,5);
 8001d94:	ed9f 3b02 	vldr	d3, [pc, #8]	; 8001da0 <main+0x2b0>
 8001d98:	e038      	b.n	8001e0c <main+0x31c>
 8001d9a:	bf00      	nop
 8001d9c:	f3af 8000 	nop.w
 8001da0:	00000000 	.word	0x00000000
 8001da4:	40140000 	.word	0x40140000
 8001da8:	200004a8 	.word	0x200004a8
 8001dac:	2000012c 	.word	0x2000012c
 8001db0:	40000400 	.word	0x40000400
 8001db4:	40020400 	.word	0x40020400
 8001db8:	200004e4 	.word	0x200004e4
 8001dbc:	20000520 	.word	0x20000520
 8001dc0:	20000204 	.word	0x20000204
 8001dc4:	40014000 	.word	0x40014000
 8001dc8:	2000055c 	.word	0x2000055c
 8001dcc:	40010000 	.word	0x40010000
 8001dd0:	2000009c 	.word	0x2000009c
 8001dd4:	20000574 	.word	0x20000574
 8001dd8:	200000e4 	.word	0x200000e4
 8001ddc:	2000058c 	.word	0x2000058c
 8001de0:	40000c00 	.word	0x40000c00
 8001de4:	200001bc 	.word	0x200001bc
 8001de8:	20000400 	.word	0x20000400
 8001dec:	43fa0000 	.word	0x43fa0000
 8001df0:	c3fa0000 	.word	0xc3fa0000
 8001df4:	40a00000 	.word	0x40a00000
 8001df8:	c0a00000 	.word	0xc0a00000
 8001dfc:	3c23d70a 	.word	0x3c23d70a
 8001e00:	20000438 	.word	0x20000438
 8001e04:	20000470 	.word	0x20000470
 8001e08:	20000324 	.word	0x20000324
 8001e0c:	ed9f 2b04 	vldr	d2, [pc, #16]	; 8001e20 <main+0x330>
 8001e10:	ed9f 1b05 	vldr	d1, [pc, #20]	; 8001e28 <main+0x338>
 8001e14:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8001e28 <main+0x338>
 8001e18:	f000 fbf4 	bl	8002604 <run_to_point>
 8001e1c:	e7ba      	b.n	8001d94 <main+0x2a4>
 8001e1e:	bf00      	nop
	...
 8001e2c:	407f4000 	.word	0x407f4000

08001e30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b094      	sub	sp, #80	; 0x50
 8001e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e36:	f107 0320 	add.w	r3, r7, #32
 8001e3a:	2230      	movs	r2, #48	; 0x30
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f004 fb5e 	bl	8006500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e44:	f107 030c 	add.w	r3, r7, #12
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e54:	2300      	movs	r3, #0
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	4b27      	ldr	r3, [pc, #156]	; (8001ef8 <SystemClock_Config+0xc8>)
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	4a26      	ldr	r2, [pc, #152]	; (8001ef8 <SystemClock_Config+0xc8>)
 8001e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e62:	6413      	str	r3, [r2, #64]	; 0x40
 8001e64:	4b24      	ldr	r3, [pc, #144]	; (8001ef8 <SystemClock_Config+0xc8>)
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e70:	2300      	movs	r3, #0
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	4b21      	ldr	r3, [pc, #132]	; (8001efc <SystemClock_Config+0xcc>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a20      	ldr	r2, [pc, #128]	; (8001efc <SystemClock_Config+0xcc>)
 8001e7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <SystemClock_Config+0xcc>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e88:	607b      	str	r3, [r7, #4]
 8001e8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e90:	2301      	movs	r3, #1
 8001e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e94:	2310      	movs	r3, #16
 8001e96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ea0:	2308      	movs	r3, #8
 8001ea2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001ea4:	2364      	movs	r3, #100	; 0x64
 8001ea6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001eac:	2304      	movs	r3, #4
 8001eae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eb0:	f107 0320 	add.w	r3, r7, #32
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f001 fd1f 	bl	80038f8 <HAL_RCC_OscConfig>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ec0:	f000 fd1c 	bl	80028fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ec4:	230f      	movs	r3, #15
 8001ec6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ed0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001eda:	f107 030c 	add.w	r3, r7, #12
 8001ede:	2103      	movs	r1, #3
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f001 ff81 	bl	8003de8 <HAL_RCC_ClockConfig>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001eec:	f000 fd06 	bl	80028fc <Error_Handler>
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	3750      	adds	r7, #80	; 0x50
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40007000 	.word	0x40007000

08001f00 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08c      	sub	sp, #48	; 0x30
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f06:	f107 030c 	add.w	r3, r7, #12
 8001f0a:	2224      	movs	r2, #36	; 0x24
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f004 faf6 	bl	8006500 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f1c:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <MX_TIM1_Init+0xa8>)
 8001f1e:	4a23      	ldr	r2, [pc, #140]	; (8001fac <MX_TIM1_Init+0xac>)
 8001f20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f22:	4b21      	ldr	r3, [pc, #132]	; (8001fa8 <MX_TIM1_Init+0xa8>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f28:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <MX_TIM1_Init+0xa8>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <MX_TIM1_Init+0xa8>)
 8001f30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f36:	4b1c      	ldr	r3, [pc, #112]	; (8001fa8 <MX_TIM1_Init+0xa8>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f3c:	4b1a      	ldr	r3, [pc, #104]	; (8001fa8 <MX_TIM1_Init+0xa8>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f42:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <MX_TIM1_Init+0xa8>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f50:	2301      	movs	r3, #1
 8001f52:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f60:	2301      	movs	r3, #1
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f64:	2300      	movs	r3, #0
 8001f66:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001f6c:	f107 030c 	add.w	r3, r7, #12
 8001f70:	4619      	mov	r1, r3
 8001f72:	480d      	ldr	r0, [pc, #52]	; (8001fa8 <MX_TIM1_Init+0xa8>)
 8001f74:	f002 fa70 	bl	8004458 <HAL_TIM_Encoder_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001f7e:	f000 fcbd 	bl	80028fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f82:	2300      	movs	r3, #0
 8001f84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4806      	ldr	r0, [pc, #24]	; (8001fa8 <MX_TIM1_Init+0xa8>)
 8001f90:	f003 f930 	bl	80051f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001f9a:	f000 fcaf 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f9e:	bf00      	nop
 8001fa0:	3730      	adds	r7, #48	; 0x30
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	2000009c 	.word	0x2000009c
 8001fac:	40010000 	.word	0x40010000

08001fb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08c      	sub	sp, #48	; 0x30
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fb6:	f107 030c 	add.w	r3, r7, #12
 8001fba:	2224      	movs	r2, #36	; 0x24
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f004 fa9e 	bl	8006500 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fcc:	4b21      	ldr	r3, [pc, #132]	; (8002054 <MX_TIM2_Init+0xa4>)
 8001fce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001fd4:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <MX_TIM2_Init+0xa4>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fda:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <MX_TIM2_Init+0xa4>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001fe0:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <MX_TIM2_Init+0xa4>)
 8001fe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fe6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe8:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <MX_TIM2_Init+0xa4>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fee:	4b19      	ldr	r3, [pc, #100]	; (8002054 <MX_TIM2_Init+0xa4>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002000:	2300      	movs	r3, #0
 8002002:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002008:	2300      	movs	r3, #0
 800200a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800200c:	2301      	movs	r3, #1
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002010:	2300      	movs	r3, #0
 8002012:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002018:	f107 030c 	add.w	r3, r7, #12
 800201c:	4619      	mov	r1, r3
 800201e:	480d      	ldr	r0, [pc, #52]	; (8002054 <MX_TIM2_Init+0xa4>)
 8002020:	f002 fa1a 	bl	8004458 <HAL_TIM_Encoder_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800202a:	f000 fc67 	bl	80028fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800202e:	2300      	movs	r3, #0
 8002030:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	4619      	mov	r1, r3
 800203a:	4806      	ldr	r0, [pc, #24]	; (8002054 <MX_TIM2_Init+0xa4>)
 800203c:	f003 f8da 	bl	80051f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002046:	f000 fc59 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800204a:	bf00      	nop
 800204c:	3730      	adds	r7, #48	; 0x30
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	200000e4 	.word	0x200000e4

08002058 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08e      	sub	sp, #56	; 0x38
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800205e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
 8002068:	609a      	str	r2, [r3, #8]
 800206a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800206c:	f107 0320 	add.w	r3, r7, #32
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002076:	1d3b      	adds	r3, r7, #4
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
 8002084:	615a      	str	r2, [r3, #20]
 8002086:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002088:	4b3d      	ldr	r3, [pc, #244]	; (8002180 <MX_TIM3_Init+0x128>)
 800208a:	4a3e      	ldr	r2, [pc, #248]	; (8002184 <MX_TIM3_Init+0x12c>)
 800208c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 800208e:	4b3c      	ldr	r3, [pc, #240]	; (8002180 <MX_TIM3_Init+0x128>)
 8002090:	2263      	movs	r2, #99	; 0x63
 8002092:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002094:	4b3a      	ldr	r3, [pc, #232]	; (8002180 <MX_TIM3_Init+0x128>)
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800209a:	4b39      	ldr	r3, [pc, #228]	; (8002180 <MX_TIM3_Init+0x128>)
 800209c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a2:	4b37      	ldr	r3, [pc, #220]	; (8002180 <MX_TIM3_Init+0x128>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a8:	4b35      	ldr	r3, [pc, #212]	; (8002180 <MX_TIM3_Init+0x128>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020ae:	4834      	ldr	r0, [pc, #208]	; (8002180 <MX_TIM3_Init+0x128>)
 80020b0:	f002 f87a 	bl	80041a8 <HAL_TIM_Base_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80020ba:	f000 fc1f 	bl	80028fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020c8:	4619      	mov	r1, r3
 80020ca:	482d      	ldr	r0, [pc, #180]	; (8002180 <MX_TIM3_Init+0x128>)
 80020cc:	f002 fcca 	bl	8004a64 <HAL_TIM_ConfigClockSource>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80020d6:	f000 fc11 	bl	80028fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80020da:	4829      	ldr	r0, [pc, #164]	; (8002180 <MX_TIM3_Init+0x128>)
 80020dc:	f002 f8b3 	bl	8004246 <HAL_TIM_PWM_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80020e6:	f000 fc09 	bl	80028fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ee:	2300      	movs	r3, #0
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020f2:	f107 0320 	add.w	r3, r7, #32
 80020f6:	4619      	mov	r1, r3
 80020f8:	4821      	ldr	r0, [pc, #132]	; (8002180 <MX_TIM3_Init+0x128>)
 80020fa:	f003 f87b 	bl	80051f4 <HAL_TIMEx_MasterConfigSynchronization>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002104:	f000 fbfa 	bl	80028fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002108:	2360      	movs	r3, #96	; 0x60
 800210a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002110:	2300      	movs	r3, #0
 8002112:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002118:	1d3b      	adds	r3, r7, #4
 800211a:	2200      	movs	r2, #0
 800211c:	4619      	mov	r1, r3
 800211e:	4818      	ldr	r0, [pc, #96]	; (8002180 <MX_TIM3_Init+0x128>)
 8002120:	f002 fbde 	bl	80048e0 <HAL_TIM_PWM_ConfigChannel>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800212a:	f000 fbe7 	bl	80028fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800212e:	1d3b      	adds	r3, r7, #4
 8002130:	2204      	movs	r2, #4
 8002132:	4619      	mov	r1, r3
 8002134:	4812      	ldr	r0, [pc, #72]	; (8002180 <MX_TIM3_Init+0x128>)
 8002136:	f002 fbd3 	bl	80048e0 <HAL_TIM_PWM_ConfigChannel>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002140:	f000 fbdc 	bl	80028fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002144:	1d3b      	adds	r3, r7, #4
 8002146:	2208      	movs	r2, #8
 8002148:	4619      	mov	r1, r3
 800214a:	480d      	ldr	r0, [pc, #52]	; (8002180 <MX_TIM3_Init+0x128>)
 800214c:	f002 fbc8 	bl	80048e0 <HAL_TIM_PWM_ConfigChannel>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002156:	f000 fbd1 	bl	80028fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800215a:	1d3b      	adds	r3, r7, #4
 800215c:	220c      	movs	r2, #12
 800215e:	4619      	mov	r1, r3
 8002160:	4807      	ldr	r0, [pc, #28]	; (8002180 <MX_TIM3_Init+0x128>)
 8002162:	f002 fbbd 	bl	80048e0 <HAL_TIM_PWM_ConfigChannel>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 800216c:	f000 fbc6 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002170:	4803      	ldr	r0, [pc, #12]	; (8002180 <MX_TIM3_Init+0x128>)
 8002172:	f000 fd77 	bl	8002c64 <HAL_TIM_MspPostInit>

}
 8002176:	bf00      	nop
 8002178:	3738      	adds	r7, #56	; 0x38
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	2000012c 	.word	0x2000012c
 8002184:	40000400 	.word	0x40000400

08002188 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08c      	sub	sp, #48	; 0x30
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800218e:	f107 030c 	add.w	r3, r7, #12
 8002192:	2224      	movs	r2, #36	; 0x24
 8002194:	2100      	movs	r1, #0
 8002196:	4618      	mov	r0, r3
 8002198:	f004 f9b2 	bl	8006500 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800219c:	1d3b      	adds	r3, r7, #4
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021a4:	4b20      	ldr	r3, [pc, #128]	; (8002228 <MX_TIM4_Init+0xa0>)
 80021a6:	4a21      	ldr	r2, [pc, #132]	; (800222c <MX_TIM4_Init+0xa4>)
 80021a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80021aa:	4b1f      	ldr	r3, [pc, #124]	; (8002228 <MX_TIM4_Init+0xa0>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b0:	4b1d      	ldr	r3, [pc, #116]	; (8002228 <MX_TIM4_Init+0xa0>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80021b6:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <MX_TIM4_Init+0xa0>)
 80021b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021be:	4b1a      	ldr	r3, [pc, #104]	; (8002228 <MX_TIM4_Init+0xa0>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c4:	4b18      	ldr	r3, [pc, #96]	; (8002228 <MX_TIM4_Init+0xa0>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80021ca:	2301      	movs	r3, #1
 80021cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021ce:	2300      	movs	r3, #0
 80021d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021d2:	2301      	movs	r3, #1
 80021d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021de:	2300      	movs	r3, #0
 80021e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021e2:	2301      	movs	r3, #1
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021e6:	2300      	movs	r3, #0
 80021e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80021ee:	f107 030c 	add.w	r3, r7, #12
 80021f2:	4619      	mov	r1, r3
 80021f4:	480c      	ldr	r0, [pc, #48]	; (8002228 <MX_TIM4_Init+0xa0>)
 80021f6:	f002 f92f 	bl	8004458 <HAL_TIM_Encoder_Init>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002200:	f000 fb7c 	bl	80028fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002204:	2300      	movs	r3, #0
 8002206:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002208:	2300      	movs	r3, #0
 800220a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800220c:	1d3b      	adds	r3, r7, #4
 800220e:	4619      	mov	r1, r3
 8002210:	4805      	ldr	r0, [pc, #20]	; (8002228 <MX_TIM4_Init+0xa0>)
 8002212:	f002 ffef 	bl	80051f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800221c:	f000 fb6e 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002220:	bf00      	nop
 8002222:	3730      	adds	r7, #48	; 0x30
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000174 	.word	0x20000174
 800222c:	40000800 	.word	0x40000800

08002230 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08c      	sub	sp, #48	; 0x30
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002236:	f107 030c 	add.w	r3, r7, #12
 800223a:	2224      	movs	r2, #36	; 0x24
 800223c:	2100      	movs	r1, #0
 800223e:	4618      	mov	r0, r3
 8002240:	f004 f95e 	bl	8006500 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002244:	1d3b      	adds	r3, r7, #4
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800224c:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <MX_TIM5_Init+0xa0>)
 800224e:	4a21      	ldr	r2, [pc, #132]	; (80022d4 <MX_TIM5_Init+0xa4>)
 8002250:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002252:	4b1f      	ldr	r3, [pc, #124]	; (80022d0 <MX_TIM5_Init+0xa0>)
 8002254:	2200      	movs	r2, #0
 8002256:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002258:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <MX_TIM5_Init+0xa0>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800225e:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <MX_TIM5_Init+0xa0>)
 8002260:	f04f 32ff 	mov.w	r2, #4294967295
 8002264:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002266:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <MX_TIM5_Init+0xa0>)
 8002268:	2200      	movs	r2, #0
 800226a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800226c:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <MX_TIM5_Init+0xa0>)
 800226e:	2200      	movs	r2, #0
 8002270:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002272:	2301      	movs	r3, #1
 8002274:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002276:	2300      	movs	r3, #0
 8002278:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800227a:	2301      	movs	r3, #1
 800227c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800227e:	2300      	movs	r3, #0
 8002280:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002286:	2300      	movs	r3, #0
 8002288:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800228a:	2301      	movs	r3, #1
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800228e:	2300      	movs	r3, #0
 8002290:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002296:	f107 030c 	add.w	r3, r7, #12
 800229a:	4619      	mov	r1, r3
 800229c:	480c      	ldr	r0, [pc, #48]	; (80022d0 <MX_TIM5_Init+0xa0>)
 800229e:	f002 f8db 	bl	8004458 <HAL_TIM_Encoder_Init>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80022a8:	f000 fb28 	bl	80028fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ac:	2300      	movs	r3, #0
 80022ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80022b4:	1d3b      	adds	r3, r7, #4
 80022b6:	4619      	mov	r1, r3
 80022b8:	4805      	ldr	r0, [pc, #20]	; (80022d0 <MX_TIM5_Init+0xa0>)
 80022ba:	f002 ff9b 	bl	80051f4 <HAL_TIMEx_MasterConfigSynchronization>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80022c4:	f000 fb1a 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80022c8:	bf00      	nop
 80022ca:	3730      	adds	r7, #48	; 0x30
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	200001bc 	.word	0x200001bc
 80022d4:	40000c00 	.word	0x40000c00

080022d8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08c      	sub	sp, #48	; 0x30
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022de:	f107 0320 	add.w	r3, r7, #32
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	609a      	str	r2, [r3, #8]
 80022ea:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022ec:	1d3b      	adds	r3, r7, #4
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	60da      	str	r2, [r3, #12]
 80022f8:	611a      	str	r2, [r3, #16]
 80022fa:	615a      	str	r2, [r3, #20]
 80022fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80022fe:	4b2b      	ldr	r3, [pc, #172]	; (80023ac <MX_TIM9_Init+0xd4>)
 8002300:	4a2b      	ldr	r2, [pc, #172]	; (80023b0 <MX_TIM9_Init+0xd8>)
 8002302:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 100-1;
 8002304:	4b29      	ldr	r3, [pc, #164]	; (80023ac <MX_TIM9_Init+0xd4>)
 8002306:	2263      	movs	r2, #99	; 0x63
 8002308:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800230a:	4b28      	ldr	r3, [pc, #160]	; (80023ac <MX_TIM9_Init+0xd4>)
 800230c:	2200      	movs	r2, #0
 800230e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8002310:	4b26      	ldr	r3, [pc, #152]	; (80023ac <MX_TIM9_Init+0xd4>)
 8002312:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002316:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002318:	4b24      	ldr	r3, [pc, #144]	; (80023ac <MX_TIM9_Init+0xd4>)
 800231a:	2200      	movs	r2, #0
 800231c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800231e:	4b23      	ldr	r3, [pc, #140]	; (80023ac <MX_TIM9_Init+0xd4>)
 8002320:	2200      	movs	r2, #0
 8002322:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002324:	4821      	ldr	r0, [pc, #132]	; (80023ac <MX_TIM9_Init+0xd4>)
 8002326:	f001 ff3f 	bl	80041a8 <HAL_TIM_Base_Init>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8002330:	f000 fae4 	bl	80028fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002338:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800233a:	f107 0320 	add.w	r3, r7, #32
 800233e:	4619      	mov	r1, r3
 8002340:	481a      	ldr	r0, [pc, #104]	; (80023ac <MX_TIM9_Init+0xd4>)
 8002342:	f002 fb8f 	bl	8004a64 <HAL_TIM_ConfigClockSource>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 800234c:	f000 fad6 	bl	80028fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002350:	4816      	ldr	r0, [pc, #88]	; (80023ac <MX_TIM9_Init+0xd4>)
 8002352:	f001 ff78 	bl	8004246 <HAL_TIM_PWM_Init>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 800235c:	f000 face 	bl	80028fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002360:	2360      	movs	r3, #96	; 0x60
 8002362:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002370:	1d3b      	adds	r3, r7, #4
 8002372:	2200      	movs	r2, #0
 8002374:	4619      	mov	r1, r3
 8002376:	480d      	ldr	r0, [pc, #52]	; (80023ac <MX_TIM9_Init+0xd4>)
 8002378:	f002 fab2 	bl	80048e0 <HAL_TIM_PWM_ConfigChannel>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8002382:	f000 fabb 	bl	80028fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002386:	1d3b      	adds	r3, r7, #4
 8002388:	2204      	movs	r2, #4
 800238a:	4619      	mov	r1, r3
 800238c:	4807      	ldr	r0, [pc, #28]	; (80023ac <MX_TIM9_Init+0xd4>)
 800238e:	f002 faa7 	bl	80048e0 <HAL_TIM_PWM_ConfigChannel>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 8002398:	f000 fab0 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800239c:	4803      	ldr	r0, [pc, #12]	; (80023ac <MX_TIM9_Init+0xd4>)
 800239e:	f000 fc61 	bl	8002c64 <HAL_TIM_MspPostInit>

}
 80023a2:	bf00      	nop
 80023a4:	3730      	adds	r7, #48	; 0x30
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000204 	.word	0x20000204
 80023b0:	40014000 	.word	0x40014000

080023b4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80023b8:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <MX_TIM10_Init+0x40>)
 80023ba:	4a0f      	ldr	r2, [pc, #60]	; (80023f8 <MX_TIM10_Init+0x44>)
 80023bc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 100-1;
 80023be:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <MX_TIM10_Init+0x40>)
 80023c0:	2263      	movs	r2, #99	; 0x63
 80023c2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c4:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <MX_TIM10_Init+0x40>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 80023ca:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <MX_TIM10_Init+0x40>)
 80023cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023d0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d2:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <MX_TIM10_Init+0x40>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023d8:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <MX_TIM10_Init+0x40>)
 80023da:	2200      	movs	r2, #0
 80023dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80023de:	4805      	ldr	r0, [pc, #20]	; (80023f4 <MX_TIM10_Init+0x40>)
 80023e0:	f001 fee2 	bl	80041a8 <HAL_TIM_Base_Init>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80023ea:	f000 fa87 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	2000024c 	.word	0x2000024c
 80023f8:	40014400 	.word	0x40014400

080023fc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002400:	4b0e      	ldr	r3, [pc, #56]	; (800243c <MX_TIM11_Init+0x40>)
 8002402:	4a0f      	ldr	r2, [pc, #60]	; (8002440 <MX_TIM11_Init+0x44>)
 8002404:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 8002406:	4b0d      	ldr	r3, [pc, #52]	; (800243c <MX_TIM11_Init+0x40>)
 8002408:	2263      	movs	r2, #99	; 0x63
 800240a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <MX_TIM11_Init+0x40>)
 800240e:	2200      	movs	r2, #0
 8002410:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8002412:	4b0a      	ldr	r3, [pc, #40]	; (800243c <MX_TIM11_Init+0x40>)
 8002414:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002418:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800241a:	4b08      	ldr	r3, [pc, #32]	; (800243c <MX_TIM11_Init+0x40>)
 800241c:	2200      	movs	r2, #0
 800241e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <MX_TIM11_Init+0x40>)
 8002422:	2200      	movs	r2, #0
 8002424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002426:	4805      	ldr	r0, [pc, #20]	; (800243c <MX_TIM11_Init+0x40>)
 8002428:	f001 febe 	bl	80041a8 <HAL_TIM_Base_Init>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002432:	f000 fa63 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000294 	.word	0x20000294
 8002440:	40014800 	.word	0x40014800

08002444 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002448:	4b11      	ldr	r3, [pc, #68]	; (8002490 <MX_USART1_UART_Init+0x4c>)
 800244a:	4a12      	ldr	r2, [pc, #72]	; (8002494 <MX_USART1_UART_Init+0x50>)
 800244c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800244e:	4b10      	ldr	r3, [pc, #64]	; (8002490 <MX_USART1_UART_Init+0x4c>)
 8002450:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002454:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002456:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <MX_USART1_UART_Init+0x4c>)
 8002458:	2200      	movs	r2, #0
 800245a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <MX_USART1_UART_Init+0x4c>)
 800245e:	2200      	movs	r2, #0
 8002460:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002462:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <MX_USART1_UART_Init+0x4c>)
 8002464:	2200      	movs	r2, #0
 8002466:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002468:	4b09      	ldr	r3, [pc, #36]	; (8002490 <MX_USART1_UART_Init+0x4c>)
 800246a:	220c      	movs	r2, #12
 800246c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800246e:	4b08      	ldr	r3, [pc, #32]	; (8002490 <MX_USART1_UART_Init+0x4c>)
 8002470:	2200      	movs	r2, #0
 8002472:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002474:	4b06      	ldr	r3, [pc, #24]	; (8002490 <MX_USART1_UART_Init+0x4c>)
 8002476:	2200      	movs	r2, #0
 8002478:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800247a:	4805      	ldr	r0, [pc, #20]	; (8002490 <MX_USART1_UART_Init+0x4c>)
 800247c:	f002 ff3c 	bl	80052f8 <HAL_UART_Init>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002486:	f000 fa39 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	200002dc 	.word	0x200002dc
 8002494:	40011000 	.word	0x40011000

08002498 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800249c:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <MX_USART6_UART_Init+0x4c>)
 800249e:	4a12      	ldr	r2, [pc, #72]	; (80024e8 <MX_USART6_UART_Init+0x50>)
 80024a0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80024a2:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <MX_USART6_UART_Init+0x4c>)
 80024a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024a8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80024aa:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <MX_USART6_UART_Init+0x4c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80024b0:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <MX_USART6_UART_Init+0x4c>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80024b6:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <MX_USART6_UART_Init+0x4c>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80024bc:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <MX_USART6_UART_Init+0x4c>)
 80024be:	220c      	movs	r2, #12
 80024c0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024c2:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <MX_USART6_UART_Init+0x4c>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <MX_USART6_UART_Init+0x4c>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80024ce:	4805      	ldr	r0, [pc, #20]	; (80024e4 <MX_USART6_UART_Init+0x4c>)
 80024d0:	f002 ff12 	bl	80052f8 <HAL_UART_Init>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80024da:	f000 fa0f 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000324 	.word	0x20000324
 80024e8:	40011400 	.word	0x40011400

080024ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08a      	sub	sp, #40	; 0x28
 80024f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f2:	f107 0314 	add.w	r3, r7, #20
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	605a      	str	r2, [r3, #4]
 80024fc:	609a      	str	r2, [r3, #8]
 80024fe:	60da      	str	r2, [r3, #12]
 8002500:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	4b3b      	ldr	r3, [pc, #236]	; (80025f4 <MX_GPIO_Init+0x108>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	4a3a      	ldr	r2, [pc, #232]	; (80025f4 <MX_GPIO_Init+0x108>)
 800250c:	f043 0304 	orr.w	r3, r3, #4
 8002510:	6313      	str	r3, [r2, #48]	; 0x30
 8002512:	4b38      	ldr	r3, [pc, #224]	; (80025f4 <MX_GPIO_Init+0x108>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	613b      	str	r3, [r7, #16]
 800251c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	4b34      	ldr	r3, [pc, #208]	; (80025f4 <MX_GPIO_Init+0x108>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	4a33      	ldr	r2, [pc, #204]	; (80025f4 <MX_GPIO_Init+0x108>)
 8002528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800252c:	6313      	str	r3, [r2, #48]	; 0x30
 800252e:	4b31      	ldr	r3, [pc, #196]	; (80025f4 <MX_GPIO_Init+0x108>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	4b2d      	ldr	r3, [pc, #180]	; (80025f4 <MX_GPIO_Init+0x108>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	4a2c      	ldr	r2, [pc, #176]	; (80025f4 <MX_GPIO_Init+0x108>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	6313      	str	r3, [r2, #48]	; 0x30
 800254a:	4b2a      	ldr	r3, [pc, #168]	; (80025f4 <MX_GPIO_Init+0x108>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	607b      	str	r3, [r7, #4]
 800255a:	4b26      	ldr	r3, [pc, #152]	; (80025f4 <MX_GPIO_Init+0x108>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	4a25      	ldr	r2, [pc, #148]	; (80025f4 <MX_GPIO_Init+0x108>)
 8002560:	f043 0302 	orr.w	r3, r3, #2
 8002564:	6313      	str	r3, [r2, #48]	; 0x30
 8002566:	4b23      	ldr	r3, [pc, #140]	; (80025f4 <MX_GPIO_Init+0x108>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	607b      	str	r3, [r7, #4]
 8002570:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_UART_Pin|IN3_Pin|IN4_Pin, GPIO_PIN_RESET);
 8002572:	2200      	movs	r2, #0
 8002574:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8002578:	481f      	ldr	r0, [pc, #124]	; (80025f8 <MX_GPIO_Init+0x10c>)
 800257a:	f001 f989 	bl	8003890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800257e:	2200      	movs	r2, #0
 8002580:	2110      	movs	r1, #16
 8002582:	481e      	ldr	r0, [pc, #120]	; (80025fc <MX_GPIO_Init+0x110>)
 8002584:	f001 f984 	bl	8003890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENR_A_Pin|ENL_A_Pin|ENR_B_Pin|ENL_B_Pin
 8002588:	2200      	movs	r2, #0
 800258a:	f24f 4134 	movw	r1, #62516	; 0xf434
 800258e:	481c      	ldr	r0, [pc, #112]	; (8002600 <MX_GPIO_Init+0x114>)
 8002590:	f001 f97e 	bl	8003890 <HAL_GPIO_WritePin>
                          |ENR_C_Pin|ENL_C_Pin|IN1_Pin|IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_UART_Pin IN3_Pin IN4_Pin */
  GPIO_InitStruct.Pin = LED_UART_Pin|IN3_Pin|IN4_Pin;
 8002594:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800259a:	2301      	movs	r3, #1
 800259c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a2:	2300      	movs	r3, #0
 80025a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a6:	f107 0314 	add.w	r3, r7, #20
 80025aa:	4619      	mov	r1, r3
 80025ac:	4812      	ldr	r0, [pc, #72]	; (80025f8 <MX_GPIO_Init+0x10c>)
 80025ae:	f000 ffeb 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 80025b2:	2310      	movs	r3, #16
 80025b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b6:	2301      	movs	r3, #1
 80025b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025be:	2300      	movs	r3, #0
 80025c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80025c2:	f107 0314 	add.w	r3, r7, #20
 80025c6:	4619      	mov	r1, r3
 80025c8:	480c      	ldr	r0, [pc, #48]	; (80025fc <MX_GPIO_Init+0x110>)
 80025ca:	f000 ffdd 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENR_A_Pin ENL_A_Pin ENR_B_Pin ENL_B_Pin
                           ENR_C_Pin ENL_C_Pin IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = ENR_A_Pin|ENL_A_Pin|ENR_B_Pin|ENL_B_Pin
 80025ce:	f24f 4334 	movw	r3, #62516	; 0xf434
 80025d2:	617b      	str	r3, [r7, #20]
                          |ENR_C_Pin|ENL_C_Pin|IN1_Pin|IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d4:	2301      	movs	r3, #1
 80025d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025dc:	2300      	movs	r3, #0
 80025de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e0:	f107 0314 	add.w	r3, r7, #20
 80025e4:	4619      	mov	r1, r3
 80025e6:	4806      	ldr	r0, [pc, #24]	; (8002600 <MX_GPIO_Init+0x114>)
 80025e8:	f000 ffce 	bl	8003588 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80025ec:	bf00      	nop
 80025ee:	3728      	adds	r7, #40	; 0x28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40020800 	.word	0x40020800
 80025fc:	40020000 	.word	0x40020000
 8002600:	40020400 	.word	0x40020400

08002604 <run_to_point>:

/* USER CODE BEGIN 4 */
bool run_to_point(double sx, double sy, double st, double error){
 8002604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002608:	b0b3      	sub	sp, #204	; 0xcc
 800260a:	af2a      	add	r7, sp, #168	; 0xa8
 800260c:	ed87 0b06 	vstr	d0, [r7, #24]
 8002610:	ed87 1b04 	vstr	d1, [r7, #16]
 8002614:	ed87 2b02 	vstr	d2, [r7, #8]
 8002618:	ed87 3b00 	vstr	d3, [r7]
	if(abs(kinematic.Sx - sx) < error && abs(kinematic.Sy - sy) < error && abs(kinematic.St - st) < error){
 800261c:	4bb0      	ldr	r3, [pc, #704]	; (80028e0 <run_to_point+0x2dc>)
 800261e:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8002622:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002626:	f7fd fddb 	bl	80001e0 <__aeabi_dsub>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4610      	mov	r0, r2
 8002630:	4619      	mov	r1, r3
 8002632:	f7fe fa27 	bl	8000a84 <__aeabi_d2iz>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	bfb8      	it	lt
 800263c:	425b      	neglt	r3, r3
 800263e:	4618      	mov	r0, r3
 8002640:	f7fd ff1c 	bl	800047c <__aeabi_i2d>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	e9d7 0100 	ldrd	r0, r1, [r7]
 800264c:	f7fe fa10 	bl	8000a70 <__aeabi_dcmpgt>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 8090 	beq.w	8002778 <run_to_point+0x174>
 8002658:	4ba1      	ldr	r3, [pc, #644]	; (80028e0 <run_to_point+0x2dc>)
 800265a:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 800265e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002662:	f7fd fdbd 	bl	80001e0 <__aeabi_dsub>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	4610      	mov	r0, r2
 800266c:	4619      	mov	r1, r3
 800266e:	f7fe fa09 	bl	8000a84 <__aeabi_d2iz>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	bfb8      	it	lt
 8002678:	425b      	neglt	r3, r3
 800267a:	4618      	mov	r0, r3
 800267c:	f7fd fefe 	bl	800047c <__aeabi_i2d>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002688:	f7fe f9f2 	bl	8000a70 <__aeabi_dcmpgt>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d072      	beq.n	8002778 <run_to_point+0x174>
 8002692:	4b93      	ldr	r3, [pc, #588]	; (80028e0 <run_to_point+0x2dc>)
 8002694:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8002698:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800269c:	f7fd fda0 	bl	80001e0 <__aeabi_dsub>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4610      	mov	r0, r2
 80026a6:	4619      	mov	r1, r3
 80026a8:	f7fe f9ec 	bl	8000a84 <__aeabi_d2iz>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	bfb8      	it	lt
 80026b2:	425b      	neglt	r3, r3
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fd fee1 	bl	800047c <__aeabi_i2d>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026c2:	f7fe f9d5 	bl	8000a70 <__aeabi_dcmpgt>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d055      	beq.n	8002778 <run_to_point+0x174>
		agv_reset_all(motor_A, motor_B, motor_C);
 80026cc:	4e85      	ldr	r6, [pc, #532]	; (80028e4 <run_to_point+0x2e0>)
 80026ce:	4b86      	ldr	r3, [pc, #536]	; (80028e8 <run_to_point+0x2e4>)
 80026d0:	ac1a      	add	r4, sp, #104	; 0x68
 80026d2:	461d      	mov	r5, r3
 80026d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80026e8:	4b80      	ldr	r3, [pc, #512]	; (80028ec <run_to_point+0x2e8>)
 80026ea:	ac0b      	add	r4, sp, #44	; 0x2c
 80026ec:	461d      	mov	r5, r3
 80026ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002702:	466d      	mov	r5, sp
 8002704:	f106 0410 	add.w	r4, r6, #16
 8002708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800270a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800270c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800270e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002710:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002714:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002718:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800271c:	f7fe fd75 	bl	800120a <agv_reset_all>
		agv_stop_all(motor_A, motor_B, motor_C);
 8002720:	4e70      	ldr	r6, [pc, #448]	; (80028e4 <run_to_point+0x2e0>)
 8002722:	4b71      	ldr	r3, [pc, #452]	; (80028e8 <run_to_point+0x2e4>)
 8002724:	ac1a      	add	r4, sp, #104	; 0x68
 8002726:	461d      	mov	r5, r3
 8002728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800272a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800272c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800272e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002734:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002738:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800273c:	4b6b      	ldr	r3, [pc, #428]	; (80028ec <run_to_point+0x2e8>)
 800273e:	ac0b      	add	r4, sp, #44	; 0x2c
 8002740:	461d      	mov	r5, r3
 8002742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002744:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002746:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002748:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800274a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800274c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800274e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002752:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002756:	466d      	mov	r5, sp
 8002758:	f106 0410 	add.w	r4, r6, #16
 800275c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800275e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002760:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002762:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002764:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002768:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800276c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002770:	f7fe fd0d 	bl	800118e <agv_stop_all>
		return true;
 8002774:	2301      	movs	r3, #1
 8002776:	e0ad      	b.n	80028d4 <run_to_point+0x2d0>
	}
	else{
		PIDController_Update(&pid_vx, sx, kinematic.Sx);
 8002778:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800277c:	f7fe f9aa 	bl	8000ad4 <__aeabi_d2f>
 8002780:	4604      	mov	r4, r0
 8002782:	4b57      	ldr	r3, [pc, #348]	; (80028e0 <run_to_point+0x2dc>)
 8002784:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002788:	4610      	mov	r0, r2
 800278a:	4619      	mov	r1, r3
 800278c:	f7fe f9a2 	bl	8000ad4 <__aeabi_d2f>
 8002790:	4603      	mov	r3, r0
 8002792:	ee00 3a90 	vmov	s1, r3
 8002796:	ee00 4a10 	vmov	s0, r4
 800279a:	4855      	ldr	r0, [pc, #340]	; (80028f0 <run_to_point+0x2ec>)
 800279c:	f7fe ff8e 	bl	80016bc <PIDController_Update>
		PIDController_Update(&pid_vy, sy, kinematic.Sy);
 80027a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027a4:	f7fe f996 	bl	8000ad4 <__aeabi_d2f>
 80027a8:	4604      	mov	r4, r0
 80027aa:	4b4d      	ldr	r3, [pc, #308]	; (80028e0 <run_to_point+0x2dc>)
 80027ac:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80027b0:	4610      	mov	r0, r2
 80027b2:	4619      	mov	r1, r3
 80027b4:	f7fe f98e 	bl	8000ad4 <__aeabi_d2f>
 80027b8:	4603      	mov	r3, r0
 80027ba:	ee00 3a90 	vmov	s1, r3
 80027be:	ee00 4a10 	vmov	s0, r4
 80027c2:	484c      	ldr	r0, [pc, #304]	; (80028f4 <run_to_point+0x2f0>)
 80027c4:	f7fe ff7a 	bl	80016bc <PIDController_Update>
		PIDController_Update(&pid_vt, st, kinematic.St);
 80027c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027cc:	f7fe f982 	bl	8000ad4 <__aeabi_d2f>
 80027d0:	4604      	mov	r4, r0
 80027d2:	4b43      	ldr	r3, [pc, #268]	; (80028e0 <run_to_point+0x2dc>)
 80027d4:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80027d8:	4610      	mov	r0, r2
 80027da:	4619      	mov	r1, r3
 80027dc:	f7fe f97a 	bl	8000ad4 <__aeabi_d2f>
 80027e0:	4603      	mov	r3, r0
 80027e2:	ee00 3a90 	vmov	s1, r3
 80027e6:	ee00 4a10 	vmov	s0, r4
 80027ea:	4843      	ldr	r0, [pc, #268]	; (80028f8 <run_to_point+0x2f4>)
 80027ec:	f7fe ff66 	bl	80016bc <PIDController_Update>
		agv_reset_all(motor_A, motor_B, motor_C);
 80027f0:	4e3c      	ldr	r6, [pc, #240]	; (80028e4 <run_to_point+0x2e0>)
 80027f2:	4b3d      	ldr	r3, [pc, #244]	; (80028e8 <run_to_point+0x2e4>)
 80027f4:	ac1a      	add	r4, sp, #104	; 0x68
 80027f6:	461d      	mov	r5, r3
 80027f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002804:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002808:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800280c:	4b37      	ldr	r3, [pc, #220]	; (80028ec <run_to_point+0x2e8>)
 800280e:	ac0b      	add	r4, sp, #44	; 0x2c
 8002810:	461d      	mov	r5, r3
 8002812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002814:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002816:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002818:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800281a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800281c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800281e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002822:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002826:	466d      	mov	r5, sp
 8002828:	f106 0410 	add.w	r4, r6, #16
 800282c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800282e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002830:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002832:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002834:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002838:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800283c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002840:	f7fe fce3 	bl	800120a <agv_reset_all>
		agv_inverse_kinematic(pid_vx.out, pid_vy.out, pid_vt.out, motor_A, motor_B, motor_C);
 8002844:	4b2a      	ldr	r3, [pc, #168]	; (80028f0 <run_to_point+0x2ec>)
 8002846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002848:	4618      	mov	r0, r3
 800284a:	f7fd fe29 	bl	80004a0 <__aeabi_f2d>
 800284e:	4680      	mov	r8, r0
 8002850:	4689      	mov	r9, r1
 8002852:	4b28      	ldr	r3, [pc, #160]	; (80028f4 <run_to_point+0x2f0>)
 8002854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002856:	4618      	mov	r0, r3
 8002858:	f7fd fe22 	bl	80004a0 <__aeabi_f2d>
 800285c:	4682      	mov	sl, r0
 800285e:	468b      	mov	fp, r1
 8002860:	4b25      	ldr	r3, [pc, #148]	; (80028f8 <run_to_point+0x2f4>)
 8002862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002864:	4618      	mov	r0, r3
 8002866:	f7fd fe1b 	bl	80004a0 <__aeabi_f2d>
 800286a:	ec41 0b17 	vmov	d7, r0, r1
 800286e:	4e1d      	ldr	r6, [pc, #116]	; (80028e4 <run_to_point+0x2e0>)
 8002870:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <run_to_point+0x2e4>)
 8002872:	ac1a      	add	r4, sp, #104	; 0x68
 8002874:	461d      	mov	r5, r3
 8002876:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002878:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800287a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800287c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800287e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002880:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002882:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002886:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800288a:	4b18      	ldr	r3, [pc, #96]	; (80028ec <run_to_point+0x2e8>)
 800288c:	ac0b      	add	r4, sp, #44	; 0x2c
 800288e:	461d      	mov	r5, r3
 8002890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800289a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800289c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80028a4:	466d      	mov	r5, sp
 80028a6:	f106 0410 	add.w	r4, r6, #16
 80028aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028b2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80028b6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80028ba:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80028be:	eeb0 2a47 	vmov.f32	s4, s14
 80028c2:	eef0 2a67 	vmov.f32	s5, s15
 80028c6:	ec4b ab11 	vmov	d1, sl, fp
 80028ca:	ec49 8b10 	vmov	d0, r8, r9
 80028ce:	f7fe fd97 	bl	8001400 <agv_inverse_kinematic>
		return false;
 80028d2:	2300      	movs	r3, #0
	}

}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3724      	adds	r7, #36	; 0x24
 80028d8:	46bd      	mov	sp, r7
 80028da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028de:	bf00      	nop
 80028e0:	20000370 	.word	0x20000370
 80028e4:	200004a8 	.word	0x200004a8
 80028e8:	20000520 	.word	0x20000520
 80028ec:	200004e4 	.word	0x200004e4
 80028f0:	20000438 	.word	0x20000438
 80028f4:	20000400 	.word	0x20000400
 80028f8:	20000470 	.word	0x20000470

080028fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002900:	b672      	cpsid	i
}
 8002902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002904:	e7fe      	b.n	8002904 <Error_Handler+0x8>
	...

08002908 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	607b      	str	r3, [r7, #4]
 8002912:	4b10      	ldr	r3, [pc, #64]	; (8002954 <HAL_MspInit+0x4c>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	4a0f      	ldr	r2, [pc, #60]	; (8002954 <HAL_MspInit+0x4c>)
 8002918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800291c:	6453      	str	r3, [r2, #68]	; 0x44
 800291e:	4b0d      	ldr	r3, [pc, #52]	; (8002954 <HAL_MspInit+0x4c>)
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002926:	607b      	str	r3, [r7, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	603b      	str	r3, [r7, #0]
 800292e:	4b09      	ldr	r3, [pc, #36]	; (8002954 <HAL_MspInit+0x4c>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	4a08      	ldr	r2, [pc, #32]	; (8002954 <HAL_MspInit+0x4c>)
 8002934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002938:	6413      	str	r3, [r2, #64]	; 0x40
 800293a:	4b06      	ldr	r3, [pc, #24]	; (8002954 <HAL_MspInit+0x4c>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800

08002958 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b090      	sub	sp, #64	; 0x40
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a83      	ldr	r2, [pc, #524]	; (8002b84 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d135      	bne.n	80029e6 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	62bb      	str	r3, [r7, #40]	; 0x28
 800297e:	4b82      	ldr	r3, [pc, #520]	; (8002b88 <HAL_TIM_Encoder_MspInit+0x230>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	4a81      	ldr	r2, [pc, #516]	; (8002b88 <HAL_TIM_Encoder_MspInit+0x230>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	6453      	str	r3, [r2, #68]	; 0x44
 800298a:	4b7f      	ldr	r3, [pc, #508]	; (8002b88 <HAL_TIM_Encoder_MspInit+0x230>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	62bb      	str	r3, [r7, #40]	; 0x28
 8002994:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
 800299a:	4b7b      	ldr	r3, [pc, #492]	; (8002b88 <HAL_TIM_Encoder_MspInit+0x230>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	4a7a      	ldr	r2, [pc, #488]	; (8002b88 <HAL_TIM_Encoder_MspInit+0x230>)
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	6313      	str	r3, [r2, #48]	; 0x30
 80029a6:	4b78      	ldr	r3, [pc, #480]	; (8002b88 <HAL_TIM_Encoder_MspInit+0x230>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b8:	2302      	movs	r3, #2
 80029ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c0:	2300      	movs	r3, #0
 80029c2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029c4:	2301      	movs	r3, #1
 80029c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029cc:	4619      	mov	r1, r3
 80029ce:	486f      	ldr	r0, [pc, #444]	; (8002b8c <HAL_TIM_Encoder_MspInit+0x234>)
 80029d0:	f000 fdda 	bl	8003588 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80029d4:	2200      	movs	r2, #0
 80029d6:	2100      	movs	r1, #0
 80029d8:	201b      	movs	r0, #27
 80029da:	f000 fc86 	bl	80032ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80029de:	201b      	movs	r0, #27
 80029e0:	f000 fc9f 	bl	8003322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80029e4:	e0ca      	b.n	8002b7c <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM2)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ee:	d152      	bne.n	8002a96 <HAL_TIM_Encoder_MspInit+0x13e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029f0:	2300      	movs	r3, #0
 80029f2:	623b      	str	r3, [r7, #32]
 80029f4:	4b64      	ldr	r3, [pc, #400]	; (8002b88 <HAL_TIM_Encoder_MspInit+0x230>)
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	4a63      	ldr	r2, [pc, #396]	; (8002b88 <HAL_TIM_Encoder_MspInit+0x230>)
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002a00:	4b61      	ldr	r3, [pc, #388]	; (8002b88 <HAL_TIM_Encoder_MspInit+0x230>)
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	623b      	str	r3, [r7, #32]
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61fb      	str	r3, [r7, #28]
 8002a10:	4b5d      	ldr	r3, [pc, #372]	; (8002b88 <HAL_TIM_Encoder_MspInit+0x230>)
 8002a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a14:	4a5c      	ldr	r2, [pc, #368]	; (8002b88 <HAL_TIM_Encoder_MspInit+0x230>)
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1c:	4b5a      	ldr	r3, [pc, #360]	; (8002b88 <HAL_TIM_Encoder_MspInit+0x230>)
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	61fb      	str	r3, [r7, #28]
 8002a26:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61bb      	str	r3, [r7, #24]
 8002a2c:	4b56      	ldr	r3, [pc, #344]	; (8002b88 <HAL_TIM_Encoder_MspInit+0x230>)
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	4a55      	ldr	r2, [pc, #340]	; (8002b88 <HAL_TIM_Encoder_MspInit+0x230>)
 8002a32:	f043 0302 	orr.w	r3, r3, #2
 8002a36:	6313      	str	r3, [r2, #48]	; 0x30
 8002a38:	4b53      	ldr	r3, [pc, #332]	; (8002b88 <HAL_TIM_Encoder_MspInit+0x230>)
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	61bb      	str	r3, [r7, #24]
 8002a42:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002a44:	2320      	movs	r3, #32
 8002a46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a50:	2300      	movs	r3, #0
 8002a52:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a54:	2301      	movs	r3, #1
 8002a56:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	484b      	ldr	r0, [pc, #300]	; (8002b8c <HAL_TIM_Encoder_MspInit+0x234>)
 8002a60:	f000 fd92 	bl	8003588 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a64:	2308      	movs	r3, #8
 8002a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a70:	2300      	movs	r3, #0
 8002a72:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a74:	2301      	movs	r3, #1
 8002a76:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4844      	ldr	r0, [pc, #272]	; (8002b90 <HAL_TIM_Encoder_MspInit+0x238>)
 8002a80:	f000 fd82 	bl	8003588 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a84:	2200      	movs	r2, #0
 8002a86:	2100      	movs	r1, #0
 8002a88:	201c      	movs	r0, #28
 8002a8a:	f000 fc2e 	bl	80032ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a8e:	201c      	movs	r0, #28
 8002a90:	f000 fc47 	bl	8003322 <HAL_NVIC_EnableIRQ>
}
 8002a94:	e072      	b.n	8002b7c <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM4)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a3e      	ldr	r2, [pc, #248]	; (8002b94 <HAL_TIM_Encoder_MspInit+0x23c>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d134      	bne.n	8002b0a <HAL_TIM_Encoder_MspInit+0x1b2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	4b38      	ldr	r3, [pc, #224]	; (8002b88 <HAL_TIM_Encoder_MspInit+0x230>)
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	4a37      	ldr	r2, [pc, #220]	; (8002b88 <HAL_TIM_Encoder_MspInit+0x230>)
 8002aaa:	f043 0304 	orr.w	r3, r3, #4
 8002aae:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab0:	4b35      	ldr	r3, [pc, #212]	; (8002b88 <HAL_TIM_Encoder_MspInit+0x230>)
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002abc:	2300      	movs	r3, #0
 8002abe:	613b      	str	r3, [r7, #16]
 8002ac0:	4b31      	ldr	r3, [pc, #196]	; (8002b88 <HAL_TIM_Encoder_MspInit+0x230>)
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	4a30      	ldr	r2, [pc, #192]	; (8002b88 <HAL_TIM_Encoder_MspInit+0x230>)
 8002ac6:	f043 0302 	orr.w	r3, r3, #2
 8002aca:	6313      	str	r3, [r2, #48]	; 0x30
 8002acc:	4b2e      	ldr	r3, [pc, #184]	; (8002b88 <HAL_TIM_Encoder_MspInit+0x230>)
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ad8:	23c0      	movs	r3, #192	; 0xc0
 8002ada:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002adc:	2302      	movs	r3, #2
 8002ade:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002af0:	4619      	mov	r1, r3
 8002af2:	4827      	ldr	r0, [pc, #156]	; (8002b90 <HAL_TIM_Encoder_MspInit+0x238>)
 8002af4:	f000 fd48 	bl	8003588 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002af8:	2200      	movs	r2, #0
 8002afa:	2100      	movs	r1, #0
 8002afc:	201e      	movs	r0, #30
 8002afe:	f000 fbf4 	bl	80032ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b02:	201e      	movs	r0, #30
 8002b04:	f000 fc0d 	bl	8003322 <HAL_NVIC_EnableIRQ>
}
 8002b08:	e038      	b.n	8002b7c <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM5)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a22      	ldr	r2, [pc, #136]	; (8002b98 <HAL_TIM_Encoder_MspInit+0x240>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d133      	bne.n	8002b7c <HAL_TIM_Encoder_MspInit+0x224>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002b14:	2300      	movs	r3, #0
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	4b1b      	ldr	r3, [pc, #108]	; (8002b88 <HAL_TIM_Encoder_MspInit+0x230>)
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	4a1a      	ldr	r2, [pc, #104]	; (8002b88 <HAL_TIM_Encoder_MspInit+0x230>)
 8002b1e:	f043 0308 	orr.w	r3, r3, #8
 8002b22:	6413      	str	r3, [r2, #64]	; 0x40
 8002b24:	4b18      	ldr	r3, [pc, #96]	; (8002b88 <HAL_TIM_Encoder_MspInit+0x230>)
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b30:	2300      	movs	r3, #0
 8002b32:	60bb      	str	r3, [r7, #8]
 8002b34:	4b14      	ldr	r3, [pc, #80]	; (8002b88 <HAL_TIM_Encoder_MspInit+0x230>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	4a13      	ldr	r2, [pc, #76]	; (8002b88 <HAL_TIM_Encoder_MspInit+0x230>)
 8002b3a:	f043 0301 	orr.w	r3, r3, #1
 8002b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b40:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <HAL_TIM_Encoder_MspInit+0x230>)
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b50:	2302      	movs	r3, #2
 8002b52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b64:	4619      	mov	r1, r3
 8002b66:	4809      	ldr	r0, [pc, #36]	; (8002b8c <HAL_TIM_Encoder_MspInit+0x234>)
 8002b68:	f000 fd0e 	bl	8003588 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2100      	movs	r1, #0
 8002b70:	2032      	movs	r0, #50	; 0x32
 8002b72:	f000 fbba 	bl	80032ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002b76:	2032      	movs	r0, #50	; 0x32
 8002b78:	f000 fbd3 	bl	8003322 <HAL_NVIC_EnableIRQ>
}
 8002b7c:	bf00      	nop
 8002b7e:	3740      	adds	r7, #64	; 0x40
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40010000 	.word	0x40010000
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40020000 	.word	0x40020000
 8002b90:	40020400 	.word	0x40020400
 8002b94:	40000800 	.word	0x40000800
 8002b98:	40000c00 	.word	0x40000c00

08002b9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a29      	ldr	r2, [pc, #164]	; (8002c50 <HAL_TIM_Base_MspInit+0xb4>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d10e      	bne.n	8002bcc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	4b28      	ldr	r3, [pc, #160]	; (8002c54 <HAL_TIM_Base_MspInit+0xb8>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	4a27      	ldr	r2, [pc, #156]	; (8002c54 <HAL_TIM_Base_MspInit+0xb8>)
 8002bb8:	f043 0302 	orr.w	r3, r3, #2
 8002bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bbe:	4b25      	ldr	r3, [pc, #148]	; (8002c54 <HAL_TIM_Base_MspInit+0xb8>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002bca:	e03a      	b.n	8002c42 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM9)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a21      	ldr	r2, [pc, #132]	; (8002c58 <HAL_TIM_Base_MspInit+0xbc>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d10e      	bne.n	8002bf4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	4b1e      	ldr	r3, [pc, #120]	; (8002c54 <HAL_TIM_Base_MspInit+0xb8>)
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	4a1d      	ldr	r2, [pc, #116]	; (8002c54 <HAL_TIM_Base_MspInit+0xb8>)
 8002be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be4:	6453      	str	r3, [r2, #68]	; 0x44
 8002be6:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <HAL_TIM_Base_MspInit+0xb8>)
 8002be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	693b      	ldr	r3, [r7, #16]
}
 8002bf2:	e026      	b.n	8002c42 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM10)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a18      	ldr	r2, [pc, #96]	; (8002c5c <HAL_TIM_Base_MspInit+0xc0>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d10e      	bne.n	8002c1c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	4b14      	ldr	r3, [pc, #80]	; (8002c54 <HAL_TIM_Base_MspInit+0xb8>)
 8002c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c06:	4a13      	ldr	r2, [pc, #76]	; (8002c54 <HAL_TIM_Base_MspInit+0xb8>)
 8002c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c0e:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <HAL_TIM_Base_MspInit+0xb8>)
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	68fb      	ldr	r3, [r7, #12]
}
 8002c1a:	e012      	b.n	8002c42 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM11)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a0f      	ldr	r2, [pc, #60]	; (8002c60 <HAL_TIM_Base_MspInit+0xc4>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d10d      	bne.n	8002c42 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <HAL_TIM_Base_MspInit+0xb8>)
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2e:	4a09      	ldr	r2, [pc, #36]	; (8002c54 <HAL_TIM_Base_MspInit+0xb8>)
 8002c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c34:	6453      	str	r3, [r2, #68]	; 0x44
 8002c36:	4b07      	ldr	r3, [pc, #28]	; (8002c54 <HAL_TIM_Base_MspInit+0xb8>)
 8002c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c3e:	60bb      	str	r3, [r7, #8]
 8002c40:	68bb      	ldr	r3, [r7, #8]
}
 8002c42:	bf00      	nop
 8002c44:	371c      	adds	r7, #28
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	40000400 	.word	0x40000400
 8002c54:	40023800 	.word	0x40023800
 8002c58:	40014000 	.word	0x40014000
 8002c5c:	40014400 	.word	0x40014400
 8002c60:	40014800 	.word	0x40014800

08002c64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08a      	sub	sp, #40	; 0x28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6c:	f107 0314 	add.w	r3, r7, #20
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a33      	ldr	r2, [pc, #204]	; (8002d50 <HAL_TIM_MspPostInit+0xec>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d13c      	bne.n	8002d00 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	4b32      	ldr	r3, [pc, #200]	; (8002d54 <HAL_TIM_MspPostInit+0xf0>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	4a31      	ldr	r2, [pc, #196]	; (8002d54 <HAL_TIM_MspPostInit+0xf0>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6313      	str	r3, [r2, #48]	; 0x30
 8002c96:	4b2f      	ldr	r3, [pc, #188]	; (8002d54 <HAL_TIM_MspPostInit+0xf0>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	4b2b      	ldr	r3, [pc, #172]	; (8002d54 <HAL_TIM_MspPostInit+0xf0>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	4a2a      	ldr	r2, [pc, #168]	; (8002d54 <HAL_TIM_MspPostInit+0xf0>)
 8002cac:	f043 0302 	orr.w	r3, r3, #2
 8002cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb2:	4b28      	ldr	r3, [pc, #160]	; (8002d54 <HAL_TIM_MspPostInit+0xf0>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cbe:	23c0      	movs	r3, #192	; 0xc0
 8002cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd2:	f107 0314 	add.w	r3, r7, #20
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	481f      	ldr	r0, [pc, #124]	; (8002d58 <HAL_TIM_MspPostInit+0xf4>)
 8002cda:	f000 fc55 	bl	8003588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cea:	2300      	movs	r3, #0
 8002cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf2:	f107 0314 	add.w	r3, r7, #20
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4818      	ldr	r0, [pc, #96]	; (8002d5c <HAL_TIM_MspPostInit+0xf8>)
 8002cfa:	f000 fc45 	bl	8003588 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002cfe:	e022      	b.n	8002d46 <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM9)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a16      	ldr	r2, [pc, #88]	; (8002d60 <HAL_TIM_MspPostInit+0xfc>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d11d      	bne.n	8002d46 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <HAL_TIM_MspPostInit+0xf0>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	4a10      	ldr	r2, [pc, #64]	; (8002d54 <HAL_TIM_MspPostInit+0xf0>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1a:	4b0e      	ldr	r3, [pc, #56]	; (8002d54 <HAL_TIM_MspPostInit+0xf0>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	60bb      	str	r3, [r7, #8]
 8002d24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d26:	230c      	movs	r3, #12
 8002d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d32:	2300      	movs	r3, #0
 8002d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002d36:	2303      	movs	r3, #3
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3a:	f107 0314 	add.w	r3, r7, #20
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4805      	ldr	r0, [pc, #20]	; (8002d58 <HAL_TIM_MspPostInit+0xf4>)
 8002d42:	f000 fc21 	bl	8003588 <HAL_GPIO_Init>
}
 8002d46:	bf00      	nop
 8002d48:	3728      	adds	r7, #40	; 0x28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40000400 	.word	0x40000400
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40020000 	.word	0x40020000
 8002d5c:	40020400 	.word	0x40020400
 8002d60:	40014000 	.word	0x40014000

08002d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08c      	sub	sp, #48	; 0x30
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d6c:	f107 031c 	add.w	r3, r7, #28
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	605a      	str	r2, [r3, #4]
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	60da      	str	r2, [r3, #12]
 8002d7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a37      	ldr	r2, [pc, #220]	; (8002e60 <HAL_UART_MspInit+0xfc>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d12d      	bne.n	8002de2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	61bb      	str	r3, [r7, #24]
 8002d8a:	4b36      	ldr	r3, [pc, #216]	; (8002e64 <HAL_UART_MspInit+0x100>)
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	4a35      	ldr	r2, [pc, #212]	; (8002e64 <HAL_UART_MspInit+0x100>)
 8002d90:	f043 0310 	orr.w	r3, r3, #16
 8002d94:	6453      	str	r3, [r2, #68]	; 0x44
 8002d96:	4b33      	ldr	r3, [pc, #204]	; (8002e64 <HAL_UART_MspInit+0x100>)
 8002d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	61bb      	str	r3, [r7, #24]
 8002da0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	4b2f      	ldr	r3, [pc, #188]	; (8002e64 <HAL_UART_MspInit+0x100>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	4a2e      	ldr	r2, [pc, #184]	; (8002e64 <HAL_UART_MspInit+0x100>)
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	6313      	str	r3, [r2, #48]	; 0x30
 8002db2:	4b2c      	ldr	r3, [pc, #176]	; (8002e64 <HAL_UART_MspInit+0x100>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8002dbe:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8002dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002dd0:	2307      	movs	r3, #7
 8002dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd4:	f107 031c 	add.w	r3, r7, #28
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4823      	ldr	r0, [pc, #140]	; (8002e68 <HAL_UART_MspInit+0x104>)
 8002ddc:	f000 fbd4 	bl	8003588 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002de0:	e039      	b.n	8002e56 <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART6)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a21      	ldr	r2, [pc, #132]	; (8002e6c <HAL_UART_MspInit+0x108>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d134      	bne.n	8002e56 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002dec:	2300      	movs	r3, #0
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	4b1c      	ldr	r3, [pc, #112]	; (8002e64 <HAL_UART_MspInit+0x100>)
 8002df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df4:	4a1b      	ldr	r2, [pc, #108]	; (8002e64 <HAL_UART_MspInit+0x100>)
 8002df6:	f043 0320 	orr.w	r3, r3, #32
 8002dfa:	6453      	str	r3, [r2, #68]	; 0x44
 8002dfc:	4b19      	ldr	r3, [pc, #100]	; (8002e64 <HAL_UART_MspInit+0x100>)
 8002dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e00:	f003 0320 	and.w	r3, r3, #32
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	4b15      	ldr	r3, [pc, #84]	; (8002e64 <HAL_UART_MspInit+0x100>)
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e10:	4a14      	ldr	r2, [pc, #80]	; (8002e64 <HAL_UART_MspInit+0x100>)
 8002e12:	f043 0301 	orr.w	r3, r3, #1
 8002e16:	6313      	str	r3, [r2, #48]	; 0x30
 8002e18:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <HAL_UART_MspInit+0x100>)
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002e24:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e32:	2303      	movs	r3, #3
 8002e34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002e36:	2308      	movs	r3, #8
 8002e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e3a:	f107 031c 	add.w	r3, r7, #28
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4809      	ldr	r0, [pc, #36]	; (8002e68 <HAL_UART_MspInit+0x104>)
 8002e42:	f000 fba1 	bl	8003588 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002e46:	2200      	movs	r2, #0
 8002e48:	2100      	movs	r1, #0
 8002e4a:	2047      	movs	r0, #71	; 0x47
 8002e4c:	f000 fa4d 	bl	80032ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002e50:	2047      	movs	r0, #71	; 0x47
 8002e52:	f000 fa66 	bl	8003322 <HAL_NVIC_EnableIRQ>
}
 8002e56:	bf00      	nop
 8002e58:	3730      	adds	r7, #48	; 0x30
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40011000 	.word	0x40011000
 8002e64:	40023800 	.word	0x40023800
 8002e68:	40020000 	.word	0x40020000
 8002e6c:	40011400 	.word	0x40011400

08002e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e74:	e7fe      	b.n	8002e74 <NMI_Handler+0x4>

08002e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e76:	b480      	push	{r7}
 8002e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e7a:	e7fe      	b.n	8002e7a <HardFault_Handler+0x4>

08002e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e80:	e7fe      	b.n	8002e80 <MemManage_Handler+0x4>

08002e82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e82:	b480      	push	{r7}
 8002e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e86:	e7fe      	b.n	8002e86 <BusFault_Handler+0x4>

08002e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e8c:	e7fe      	b.n	8002e8c <UsageFault_Handler+0x4>

08002e8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e92:	bf00      	nop
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002eae:	bf00      	nop
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	indexPos++;
 8002ebc:	4b28      	ldr	r3, [pc, #160]	; (8002f60 <SysTick_Handler+0xa8>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	4a27      	ldr	r2, [pc, #156]	; (8002f60 <SysTick_Handler+0xa8>)
 8002ec4:	6013      	str	r3, [r2, #0]
		if(indexPos == 500){
 8002ec6:	4b26      	ldr	r3, [pc, #152]	; (8002f60 <SysTick_Handler+0xa8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ece:	d142      	bne.n	8002f56 <SysTick_Handler+0x9e>
			encoder_A.speed = ((encoder_A.position-encoder_A.old_position)*2);
 8002ed0:	4b24      	ldr	r3, [pc, #144]	; (8002f64 <SysTick_Handler+0xac>)
 8002ed2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	4b22      	ldr	r3, [pc, #136]	; (8002f64 <SysTick_Handler+0xac>)
 8002eda:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	4a20      	ldr	r2, [pc, #128]	; (8002f64 <SysTick_Handler+0xac>)
 8002ee4:	6153      	str	r3, [r2, #20]
			encoder_A.old_position = encoder_A.position;
 8002ee6:	4b1f      	ldr	r3, [pc, #124]	; (8002f64 <SysTick_Handler+0xac>)
 8002ee8:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8002eec:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <SysTick_Handler+0xac>)
 8002eee:	821a      	strh	r2, [r3, #16]

			encoder_B.speed = ((encoder_B.position-encoder_B.old_position)*2);
 8002ef0:	4b1d      	ldr	r3, [pc, #116]	; (8002f68 <SysTick_Handler+0xb0>)
 8002ef2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	4b1b      	ldr	r3, [pc, #108]	; (8002f68 <SysTick_Handler+0xb0>)
 8002efa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	4a19      	ldr	r2, [pc, #100]	; (8002f68 <SysTick_Handler+0xb0>)
 8002f04:	6153      	str	r3, [r2, #20]
			encoder_B.old_position = encoder_B.position;
 8002f06:	4b18      	ldr	r3, [pc, #96]	; (8002f68 <SysTick_Handler+0xb0>)
 8002f08:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8002f0c:	4b16      	ldr	r3, [pc, #88]	; (8002f68 <SysTick_Handler+0xb0>)
 8002f0e:	821a      	strh	r2, [r3, #16]

			encoder_C.speed = ((encoder_C.position-encoder_C.old_position)*2);
 8002f10:	4b16      	ldr	r3, [pc, #88]	; (8002f6c <SysTick_Handler+0xb4>)
 8002f12:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002f16:	461a      	mov	r2, r3
 8002f18:	4b14      	ldr	r3, [pc, #80]	; (8002f6c <SysTick_Handler+0xb4>)
 8002f1a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	4a12      	ldr	r2, [pc, #72]	; (8002f6c <SysTick_Handler+0xb4>)
 8002f24:	6153      	str	r3, [r2, #20]
			encoder_C.old_position = encoder_C.position;
 8002f26:	4b11      	ldr	r3, [pc, #68]	; (8002f6c <SysTick_Handler+0xb4>)
 8002f28:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8002f2c:	4b0f      	ldr	r3, [pc, #60]	; (8002f6c <SysTick_Handler+0xb4>)
 8002f2e:	821a      	strh	r2, [r3, #16]

			encoder_D.speed = ((encoder_D.position-encoder_D.old_position)*2);
 8002f30:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <SysTick_Handler+0xb8>)
 8002f32:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002f36:	461a      	mov	r2, r3
 8002f38:	4b0d      	ldr	r3, [pc, #52]	; (8002f70 <SysTick_Handler+0xb8>)
 8002f3a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	4a0b      	ldr	r2, [pc, #44]	; (8002f70 <SysTick_Handler+0xb8>)
 8002f44:	6153      	str	r3, [r2, #20]
			encoder_D.old_position = encoder_D.position;
 8002f46:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <SysTick_Handler+0xb8>)
 8002f48:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8002f4c:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <SysTick_Handler+0xb8>)
 8002f4e:	821a      	strh	r2, [r3, #16]

			indexPos = 0;
 8002f50:	4b03      	ldr	r3, [pc, #12]	; (8002f60 <SysTick_Handler+0xa8>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
		}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f56:	f000 f8cd 	bl	80030f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f5a:	bf00      	nop
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	200005bc 	.word	0x200005bc
 8002f64:	2000055c 	.word	0x2000055c
 8002f68:	20000574 	.word	0x20000574
 8002f6c:	2000058c 	.word	0x2000058c
 8002f70:	200005a4 	.word	0x200005a4

08002f74 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f78:	4802      	ldr	r0, [pc, #8]	; (8002f84 <TIM1_CC_IRQHandler+0x10>)
 8002f7a:	f001 fbc1 	bl	8004700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002f7e:	bf00      	nop
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	2000009c 	.word	0x2000009c

08002f88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f8c:	4802      	ldr	r0, [pc, #8]	; (8002f98 <TIM2_IRQHandler+0x10>)
 8002f8e:	f001 fbb7 	bl	8004700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	200000e4 	.word	0x200000e4

08002f9c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002fa0:	4802      	ldr	r0, [pc, #8]	; (8002fac <TIM4_IRQHandler+0x10>)
 8002fa2:	f001 fbad 	bl	8004700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002fa6:	bf00      	nop
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20000174 	.word	0x20000174

08002fb0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002fb4:	4802      	ldr	r0, [pc, #8]	; (8002fc0 <TIM5_IRQHandler+0x10>)
 8002fb6:	f001 fba3 	bl	8004700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	200001bc 	.word	0x200001bc

08002fc4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002fc8:	4802      	ldr	r0, [pc, #8]	; (8002fd4 <USART6_IRQHandler+0x10>)
 8002fca:	f002 fa0b 	bl	80053e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002fce:	bf00      	nop
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20000324 	.word	0x20000324

08002fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fdc:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <SystemInit+0x20>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe2:	4a05      	ldr	r2, [pc, #20]	; (8002ff8 <SystemInit+0x20>)
 8002fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fec:	bf00      	nop
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003034 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003000:	f7ff ffea 	bl	8002fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003004:	480c      	ldr	r0, [pc, #48]	; (8003038 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003006:	490d      	ldr	r1, [pc, #52]	; (800303c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003008:	4a0d      	ldr	r2, [pc, #52]	; (8003040 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800300a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800300c:	e002      	b.n	8003014 <LoopCopyDataInit>

0800300e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800300e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003012:	3304      	adds	r3, #4

08003014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003018:	d3f9      	bcc.n	800300e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800301a:	4a0a      	ldr	r2, [pc, #40]	; (8003044 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800301c:	4c0a      	ldr	r4, [pc, #40]	; (8003048 <LoopFillZerobss+0x22>)
  movs r3, #0
 800301e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003020:	e001      	b.n	8003026 <LoopFillZerobss>

08003022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003024:	3204      	adds	r2, #4

08003026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003028:	d3fb      	bcc.n	8003022 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800302a:	f003 fa71 	bl	8006510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800302e:	f7fe fd5f 	bl	8001af0 <main>
  bx  lr    
 8003032:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003034:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800303c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003040:	080065b4 	.word	0x080065b4
  ldr r2, =_sbss
 8003044:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8003048:	200005c4 	.word	0x200005c4

0800304c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800304c:	e7fe      	b.n	800304c <ADC_IRQHandler>
	...

08003050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003054:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <HAL_Init+0x40>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a0d      	ldr	r2, [pc, #52]	; (8003090 <HAL_Init+0x40>)
 800305a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800305e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_Init+0x40>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a0a      	ldr	r2, [pc, #40]	; (8003090 <HAL_Init+0x40>)
 8003066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800306a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800306c:	4b08      	ldr	r3, [pc, #32]	; (8003090 <HAL_Init+0x40>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a07      	ldr	r2, [pc, #28]	; (8003090 <HAL_Init+0x40>)
 8003072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003078:	2003      	movs	r0, #3
 800307a:	f000 f92b 	bl	80032d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800307e:	200f      	movs	r0, #15
 8003080:	f000 f808 	bl	8003094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003084:	f7ff fc40 	bl	8002908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40023c00 	.word	0x40023c00

08003094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800309c:	4b12      	ldr	r3, [pc, #72]	; (80030e8 <HAL_InitTick+0x54>)
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	4b12      	ldr	r3, [pc, #72]	; (80030ec <HAL_InitTick+0x58>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	4619      	mov	r1, r3
 80030a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80030ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 f943 	bl	800333e <HAL_SYSTICK_Config>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e00e      	b.n	80030e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b0f      	cmp	r3, #15
 80030c6:	d80a      	bhi.n	80030de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030c8:	2200      	movs	r2, #0
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	f04f 30ff 	mov.w	r0, #4294967295
 80030d0:	f000 f90b 	bl	80032ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030d4:	4a06      	ldr	r2, [pc, #24]	; (80030f0 <HAL_InitTick+0x5c>)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	e000      	b.n	80030e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	20000000 	.word	0x20000000
 80030ec:	20000008 	.word	0x20000008
 80030f0:	20000004 	.word	0x20000004

080030f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030f8:	4b06      	ldr	r3, [pc, #24]	; (8003114 <HAL_IncTick+0x20>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	4b06      	ldr	r3, [pc, #24]	; (8003118 <HAL_IncTick+0x24>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4413      	add	r3, r2
 8003104:	4a04      	ldr	r2, [pc, #16]	; (8003118 <HAL_IncTick+0x24>)
 8003106:	6013      	str	r3, [r2, #0]
}
 8003108:	bf00      	nop
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	20000008 	.word	0x20000008
 8003118:	200005c0 	.word	0x200005c0

0800311c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  return uwTick;
 8003120:	4b03      	ldr	r3, [pc, #12]	; (8003130 <HAL_GetTick+0x14>)
 8003122:	681b      	ldr	r3, [r3, #0]
}
 8003124:	4618      	mov	r0, r3
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	200005c0 	.word	0x200005c0

08003134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003144:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <__NVIC_SetPriorityGrouping+0x44>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003150:	4013      	ands	r3, r2
 8003152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800315c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003166:	4a04      	ldr	r2, [pc, #16]	; (8003178 <__NVIC_SetPriorityGrouping+0x44>)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	60d3      	str	r3, [r2, #12]
}
 800316c:	bf00      	nop
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003180:	4b04      	ldr	r3, [pc, #16]	; (8003194 <__NVIC_GetPriorityGrouping+0x18>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	0a1b      	lsrs	r3, r3, #8
 8003186:	f003 0307 	and.w	r3, r3, #7
}
 800318a:	4618      	mov	r0, r3
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	e000ed00 	.word	0xe000ed00

08003198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	db0b      	blt.n	80031c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	f003 021f 	and.w	r2, r3, #31
 80031b0:	4907      	ldr	r1, [pc, #28]	; (80031d0 <__NVIC_EnableIRQ+0x38>)
 80031b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b6:	095b      	lsrs	r3, r3, #5
 80031b8:	2001      	movs	r0, #1
 80031ba:	fa00 f202 	lsl.w	r2, r0, r2
 80031be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	e000e100 	.word	0xe000e100

080031d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	6039      	str	r1, [r7, #0]
 80031de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	db0a      	blt.n	80031fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	490c      	ldr	r1, [pc, #48]	; (8003220 <__NVIC_SetPriority+0x4c>)
 80031ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f2:	0112      	lsls	r2, r2, #4
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	440b      	add	r3, r1
 80031f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031fc:	e00a      	b.n	8003214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	b2da      	uxtb	r2, r3
 8003202:	4908      	ldr	r1, [pc, #32]	; (8003224 <__NVIC_SetPriority+0x50>)
 8003204:	79fb      	ldrb	r3, [r7, #7]
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	3b04      	subs	r3, #4
 800320c:	0112      	lsls	r2, r2, #4
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	440b      	add	r3, r1
 8003212:	761a      	strb	r2, [r3, #24]
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	e000e100 	.word	0xe000e100
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003228:	b480      	push	{r7}
 800322a:	b089      	sub	sp, #36	; 0x24
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f1c3 0307 	rsb	r3, r3, #7
 8003242:	2b04      	cmp	r3, #4
 8003244:	bf28      	it	cs
 8003246:	2304      	movcs	r3, #4
 8003248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	3304      	adds	r3, #4
 800324e:	2b06      	cmp	r3, #6
 8003250:	d902      	bls.n	8003258 <NVIC_EncodePriority+0x30>
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	3b03      	subs	r3, #3
 8003256:	e000      	b.n	800325a <NVIC_EncodePriority+0x32>
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800325c:	f04f 32ff 	mov.w	r2, #4294967295
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43da      	mvns	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	401a      	ands	r2, r3
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003270:	f04f 31ff 	mov.w	r1, #4294967295
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	fa01 f303 	lsl.w	r3, r1, r3
 800327a:	43d9      	mvns	r1, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003280:	4313      	orrs	r3, r2
         );
}
 8003282:	4618      	mov	r0, r3
 8003284:	3724      	adds	r7, #36	; 0x24
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
	...

08003290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3b01      	subs	r3, #1
 800329c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032a0:	d301      	bcc.n	80032a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032a2:	2301      	movs	r3, #1
 80032a4:	e00f      	b.n	80032c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032a6:	4a0a      	ldr	r2, [pc, #40]	; (80032d0 <SysTick_Config+0x40>)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032ae:	210f      	movs	r1, #15
 80032b0:	f04f 30ff 	mov.w	r0, #4294967295
 80032b4:	f7ff ff8e 	bl	80031d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032b8:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <SysTick_Config+0x40>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032be:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <SysTick_Config+0x40>)
 80032c0:	2207      	movs	r2, #7
 80032c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	e000e010 	.word	0xe000e010

080032d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7ff ff29 	bl	8003134 <__NVIC_SetPriorityGrouping>
}
 80032e2:	bf00      	nop
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b086      	sub	sp, #24
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	4603      	mov	r3, r0
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	607a      	str	r2, [r7, #4]
 80032f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032fc:	f7ff ff3e 	bl	800317c <__NVIC_GetPriorityGrouping>
 8003300:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	68b9      	ldr	r1, [r7, #8]
 8003306:	6978      	ldr	r0, [r7, #20]
 8003308:	f7ff ff8e 	bl	8003228 <NVIC_EncodePriority>
 800330c:	4602      	mov	r2, r0
 800330e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003312:	4611      	mov	r1, r2
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff ff5d 	bl	80031d4 <__NVIC_SetPriority>
}
 800331a:	bf00      	nop
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
 8003328:	4603      	mov	r3, r0
 800332a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800332c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff ff31 	bl	8003198 <__NVIC_EnableIRQ>
}
 8003336:	bf00      	nop
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b082      	sub	sp, #8
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7ff ffa2 	bl	8003290 <SysTick_Config>
 800334c:	4603      	mov	r3, r0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b086      	sub	sp, #24
 800335a:	af00      	add	r7, sp, #0
 800335c:	60f8      	str	r0, [r7, #12]
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	607a      	str	r2, [r7, #4]
 8003362:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003374:	2b01      	cmp	r3, #1
 8003376:	d101      	bne.n	800337c <HAL_DMA_Start_IT+0x26>
 8003378:	2302      	movs	r3, #2
 800337a:	e040      	b.n	80033fe <HAL_DMA_Start_IT+0xa8>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b01      	cmp	r3, #1
 800338e:	d12f      	bne.n	80033f0 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	68b9      	ldr	r1, [r7, #8]
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 f8c0 	bl	800352a <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ae:	223f      	movs	r2, #63	; 0x3f
 80033b0:	409a      	lsls	r2, r3
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0216 	orr.w	r2, r2, #22
 80033c4:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d007      	beq.n	80033de <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f042 0208 	orr.w	r2, r2, #8
 80033dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f042 0201 	orr.w	r2, r2, #1
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	e005      	b.n	80033fc <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80033f8:	2302      	movs	r3, #2
 80033fa:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80033fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b084      	sub	sp, #16
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003412:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003414:	f7ff fe82 	bl	800311c <HAL_GetTick>
 8003418:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d008      	beq.n	8003438 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2280      	movs	r2, #128	; 0x80
 800342a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e052      	b.n	80034de <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0216 	bic.w	r2, r2, #22
 8003446:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695a      	ldr	r2, [r3, #20]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003456:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	2b00      	cmp	r3, #0
 800345e:	d103      	bne.n	8003468 <HAL_DMA_Abort+0x62>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0208 	bic.w	r2, r2, #8
 8003476:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0201 	bic.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003488:	e013      	b.n	80034b2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800348a:	f7ff fe47 	bl	800311c <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b05      	cmp	r3, #5
 8003496:	d90c      	bls.n	80034b2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2203      	movs	r2, #3
 80034a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e015      	b.n	80034de <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1e4      	bne.n	800348a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c4:	223f      	movs	r2, #63	; 0x3f
 80034c6:	409a      	lsls	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d004      	beq.n	8003504 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2280      	movs	r2, #128	; 0x80
 80034fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e00c      	b.n	800351e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2205      	movs	r2, #5
 8003508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0201 	bic.w	r2, r2, #1
 800351a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800352a:	b480      	push	{r7}
 800352c:	b085      	sub	sp, #20
 800352e:	af00      	add	r7, sp, #0
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
 8003536:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003546:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	2b40      	cmp	r3, #64	; 0x40
 8003556:	d108      	bne.n	800356a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003568:	e007      	b.n	800357a <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	60da      	str	r2, [r3, #12]
}
 800357a:	bf00      	nop
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
	...

08003588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003588:	b480      	push	{r7}
 800358a:	b089      	sub	sp, #36	; 0x24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003592:	2300      	movs	r3, #0
 8003594:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003596:	2300      	movs	r3, #0
 8003598:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800359a:	2300      	movs	r3, #0
 800359c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800359e:	2300      	movs	r3, #0
 80035a0:	61fb      	str	r3, [r7, #28]
 80035a2:	e159      	b.n	8003858 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035a4:	2201      	movs	r2, #1
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	4013      	ands	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	429a      	cmp	r2, r3
 80035be:	f040 8148 	bne.w	8003852 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d005      	beq.n	80035da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d130      	bne.n	800363c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	2203      	movs	r2, #3
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	43db      	mvns	r3, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4013      	ands	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4313      	orrs	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003610:	2201      	movs	r2, #1
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	43db      	mvns	r3, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4013      	ands	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	091b      	lsrs	r3, r3, #4
 8003626:	f003 0201 	and.w	r2, r3, #1
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	4313      	orrs	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f003 0303 	and.w	r3, r3, #3
 8003644:	2b03      	cmp	r3, #3
 8003646:	d017      	beq.n	8003678 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	2203      	movs	r2, #3
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	43db      	mvns	r3, r3
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4013      	ands	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	4313      	orrs	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f003 0303 	and.w	r3, r3, #3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d123      	bne.n	80036cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	08da      	lsrs	r2, r3, #3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3208      	adds	r2, #8
 800368c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003690:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	220f      	movs	r2, #15
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	43db      	mvns	r3, r3
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4013      	ands	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	08da      	lsrs	r2, r3, #3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3208      	adds	r2, #8
 80036c6:	69b9      	ldr	r1, [r7, #24]
 80036c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	2203      	movs	r2, #3
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	43db      	mvns	r3, r3
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4013      	ands	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 0203 	and.w	r2, r3, #3
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 80a2 	beq.w	8003852 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800370e:	2300      	movs	r3, #0
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	4b57      	ldr	r3, [pc, #348]	; (8003870 <HAL_GPIO_Init+0x2e8>)
 8003714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003716:	4a56      	ldr	r2, [pc, #344]	; (8003870 <HAL_GPIO_Init+0x2e8>)
 8003718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800371c:	6453      	str	r3, [r2, #68]	; 0x44
 800371e:	4b54      	ldr	r3, [pc, #336]	; (8003870 <HAL_GPIO_Init+0x2e8>)
 8003720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800372a:	4a52      	ldr	r2, [pc, #328]	; (8003874 <HAL_GPIO_Init+0x2ec>)
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	089b      	lsrs	r3, r3, #2
 8003730:	3302      	adds	r3, #2
 8003732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003736:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	220f      	movs	r2, #15
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43db      	mvns	r3, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4013      	ands	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a49      	ldr	r2, [pc, #292]	; (8003878 <HAL_GPIO_Init+0x2f0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d019      	beq.n	800378a <HAL_GPIO_Init+0x202>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a48      	ldr	r2, [pc, #288]	; (800387c <HAL_GPIO_Init+0x2f4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d013      	beq.n	8003786 <HAL_GPIO_Init+0x1fe>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a47      	ldr	r2, [pc, #284]	; (8003880 <HAL_GPIO_Init+0x2f8>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d00d      	beq.n	8003782 <HAL_GPIO_Init+0x1fa>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a46      	ldr	r2, [pc, #280]	; (8003884 <HAL_GPIO_Init+0x2fc>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d007      	beq.n	800377e <HAL_GPIO_Init+0x1f6>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a45      	ldr	r2, [pc, #276]	; (8003888 <HAL_GPIO_Init+0x300>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d101      	bne.n	800377a <HAL_GPIO_Init+0x1f2>
 8003776:	2304      	movs	r3, #4
 8003778:	e008      	b.n	800378c <HAL_GPIO_Init+0x204>
 800377a:	2307      	movs	r3, #7
 800377c:	e006      	b.n	800378c <HAL_GPIO_Init+0x204>
 800377e:	2303      	movs	r3, #3
 8003780:	e004      	b.n	800378c <HAL_GPIO_Init+0x204>
 8003782:	2302      	movs	r3, #2
 8003784:	e002      	b.n	800378c <HAL_GPIO_Init+0x204>
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <HAL_GPIO_Init+0x204>
 800378a:	2300      	movs	r3, #0
 800378c:	69fa      	ldr	r2, [r7, #28]
 800378e:	f002 0203 	and.w	r2, r2, #3
 8003792:	0092      	lsls	r2, r2, #2
 8003794:	4093      	lsls	r3, r2
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4313      	orrs	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800379c:	4935      	ldr	r1, [pc, #212]	; (8003874 <HAL_GPIO_Init+0x2ec>)
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	089b      	lsrs	r3, r3, #2
 80037a2:	3302      	adds	r3, #2
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037aa:	4b38      	ldr	r3, [pc, #224]	; (800388c <HAL_GPIO_Init+0x304>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	43db      	mvns	r3, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4013      	ands	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037ce:	4a2f      	ldr	r2, [pc, #188]	; (800388c <HAL_GPIO_Init+0x304>)
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037d4:	4b2d      	ldr	r3, [pc, #180]	; (800388c <HAL_GPIO_Init+0x304>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	43db      	mvns	r3, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4013      	ands	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037f8:	4a24      	ldr	r2, [pc, #144]	; (800388c <HAL_GPIO_Init+0x304>)
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037fe:	4b23      	ldr	r3, [pc, #140]	; (800388c <HAL_GPIO_Init+0x304>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	43db      	mvns	r3, r3
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	4013      	ands	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	4313      	orrs	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003822:	4a1a      	ldr	r2, [pc, #104]	; (800388c <HAL_GPIO_Init+0x304>)
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003828:	4b18      	ldr	r3, [pc, #96]	; (800388c <HAL_GPIO_Init+0x304>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	43db      	mvns	r3, r3
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4013      	ands	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	4313      	orrs	r3, r2
 800384a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800384c:	4a0f      	ldr	r2, [pc, #60]	; (800388c <HAL_GPIO_Init+0x304>)
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	3301      	adds	r3, #1
 8003856:	61fb      	str	r3, [r7, #28]
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	2b0f      	cmp	r3, #15
 800385c:	f67f aea2 	bls.w	80035a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003860:	bf00      	nop
 8003862:	bf00      	nop
 8003864:	3724      	adds	r7, #36	; 0x24
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	40023800 	.word	0x40023800
 8003874:	40013800 	.word	0x40013800
 8003878:	40020000 	.word	0x40020000
 800387c:	40020400 	.word	0x40020400
 8003880:	40020800 	.word	0x40020800
 8003884:	40020c00 	.word	0x40020c00
 8003888:	40021000 	.word	0x40021000
 800388c:	40013c00 	.word	0x40013c00

08003890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	807b      	strh	r3, [r7, #2]
 800389c:	4613      	mov	r3, r2
 800389e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038a0:	787b      	ldrb	r3, [r7, #1]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038a6:	887a      	ldrh	r2, [r7, #2]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038ac:	e003      	b.n	80038b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038ae:	887b      	ldrh	r3, [r7, #2]
 80038b0:	041a      	lsls	r2, r3, #16
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	619a      	str	r2, [r3, #24]
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b085      	sub	sp, #20
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
 80038ca:	460b      	mov	r3, r1
 80038cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038d4:	887a      	ldrh	r2, [r7, #2]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4013      	ands	r3, r2
 80038da:	041a      	lsls	r2, r3, #16
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	43d9      	mvns	r1, r3
 80038e0:	887b      	ldrh	r3, [r7, #2]
 80038e2:	400b      	ands	r3, r1
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	619a      	str	r2, [r3, #24]
}
 80038ea:	bf00      	nop
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
	...

080038f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e267      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d075      	beq.n	8003a02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003916:	4b88      	ldr	r3, [pc, #544]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 030c 	and.w	r3, r3, #12
 800391e:	2b04      	cmp	r3, #4
 8003920:	d00c      	beq.n	800393c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003922:	4b85      	ldr	r3, [pc, #532]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800392a:	2b08      	cmp	r3, #8
 800392c:	d112      	bne.n	8003954 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800392e:	4b82      	ldr	r3, [pc, #520]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003936:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800393a:	d10b      	bne.n	8003954 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800393c:	4b7e      	ldr	r3, [pc, #504]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d05b      	beq.n	8003a00 <HAL_RCC_OscConfig+0x108>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d157      	bne.n	8003a00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e242      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800395c:	d106      	bne.n	800396c <HAL_RCC_OscConfig+0x74>
 800395e:	4b76      	ldr	r3, [pc, #472]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a75      	ldr	r2, [pc, #468]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	e01d      	b.n	80039a8 <HAL_RCC_OscConfig+0xb0>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003974:	d10c      	bne.n	8003990 <HAL_RCC_OscConfig+0x98>
 8003976:	4b70      	ldr	r3, [pc, #448]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a6f      	ldr	r2, [pc, #444]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 800397c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	4b6d      	ldr	r3, [pc, #436]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a6c      	ldr	r2, [pc, #432]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	e00b      	b.n	80039a8 <HAL_RCC_OscConfig+0xb0>
 8003990:	4b69      	ldr	r3, [pc, #420]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a68      	ldr	r2, [pc, #416]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	4b66      	ldr	r3, [pc, #408]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a65      	ldr	r2, [pc, #404]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 80039a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d013      	beq.n	80039d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b0:	f7ff fbb4 	bl	800311c <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b8:	f7ff fbb0 	bl	800311c <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b64      	cmp	r3, #100	; 0x64
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e207      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ca:	4b5b      	ldr	r3, [pc, #364]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCC_OscConfig+0xc0>
 80039d6:	e014      	b.n	8003a02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d8:	f7ff fba0 	bl	800311c <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039e0:	f7ff fb9c 	bl	800311c <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b64      	cmp	r3, #100	; 0x64
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e1f3      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039f2:	4b51      	ldr	r3, [pc, #324]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f0      	bne.n	80039e0 <HAL_RCC_OscConfig+0xe8>
 80039fe:	e000      	b.n	8003a02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d063      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a0e:	4b4a      	ldr	r3, [pc, #296]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 030c 	and.w	r3, r3, #12
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00b      	beq.n	8003a32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a1a:	4b47      	ldr	r3, [pc, #284]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d11c      	bne.n	8003a60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a26:	4b44      	ldr	r3, [pc, #272]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d116      	bne.n	8003a60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a32:	4b41      	ldr	r3, [pc, #260]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <HAL_RCC_OscConfig+0x152>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d001      	beq.n	8003a4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e1c7      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a4a:	4b3b      	ldr	r3, [pc, #236]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4937      	ldr	r1, [pc, #220]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a5e:	e03a      	b.n	8003ad6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d020      	beq.n	8003aaa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a68:	4b34      	ldr	r3, [pc, #208]	; (8003b3c <HAL_RCC_OscConfig+0x244>)
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6e:	f7ff fb55 	bl	800311c <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a76:	f7ff fb51 	bl	800311c <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e1a8      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a88:	4b2b      	ldr	r3, [pc, #172]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0f0      	beq.n	8003a76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a94:	4b28      	ldr	r3, [pc, #160]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	4925      	ldr	r1, [pc, #148]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	600b      	str	r3, [r1, #0]
 8003aa8:	e015      	b.n	8003ad6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aaa:	4b24      	ldr	r3, [pc, #144]	; (8003b3c <HAL_RCC_OscConfig+0x244>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab0:	f7ff fb34 	bl	800311c <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ab8:	f7ff fb30 	bl	800311c <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e187      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aca:	4b1b      	ldr	r3, [pc, #108]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1f0      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d036      	beq.n	8003b50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d016      	beq.n	8003b18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aea:	4b15      	ldr	r3, [pc, #84]	; (8003b40 <HAL_RCC_OscConfig+0x248>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af0:	f7ff fb14 	bl	800311c <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003af8:	f7ff fb10 	bl	800311c <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e167      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b0a:	4b0b      	ldr	r3, [pc, #44]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0f0      	beq.n	8003af8 <HAL_RCC_OscConfig+0x200>
 8003b16:	e01b      	b.n	8003b50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b18:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <HAL_RCC_OscConfig+0x248>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b1e:	f7ff fafd 	bl	800311c <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b24:	e00e      	b.n	8003b44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b26:	f7ff faf9 	bl	800311c <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d907      	bls.n	8003b44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e150      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	42470000 	.word	0x42470000
 8003b40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b44:	4b88      	ldr	r3, [pc, #544]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1ea      	bne.n	8003b26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 8097 	beq.w	8003c8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b62:	4b81      	ldr	r3, [pc, #516]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10f      	bne.n	8003b8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	4b7d      	ldr	r3, [pc, #500]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	4a7c      	ldr	r2, [pc, #496]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b7e:	4b7a      	ldr	r3, [pc, #488]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b86:	60bb      	str	r3, [r7, #8]
 8003b88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8e:	4b77      	ldr	r3, [pc, #476]	; (8003d6c <HAL_RCC_OscConfig+0x474>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d118      	bne.n	8003bcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b9a:	4b74      	ldr	r3, [pc, #464]	; (8003d6c <HAL_RCC_OscConfig+0x474>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a73      	ldr	r2, [pc, #460]	; (8003d6c <HAL_RCC_OscConfig+0x474>)
 8003ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ba6:	f7ff fab9 	bl	800311c <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bae:	f7ff fab5 	bl	800311c <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e10c      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc0:	4b6a      	ldr	r3, [pc, #424]	; (8003d6c <HAL_RCC_OscConfig+0x474>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0f0      	beq.n	8003bae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d106      	bne.n	8003be2 <HAL_RCC_OscConfig+0x2ea>
 8003bd4:	4b64      	ldr	r3, [pc, #400]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd8:	4a63      	ldr	r2, [pc, #396]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	6713      	str	r3, [r2, #112]	; 0x70
 8003be0:	e01c      	b.n	8003c1c <HAL_RCC_OscConfig+0x324>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2b05      	cmp	r3, #5
 8003be8:	d10c      	bne.n	8003c04 <HAL_RCC_OscConfig+0x30c>
 8003bea:	4b5f      	ldr	r3, [pc, #380]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bee:	4a5e      	ldr	r2, [pc, #376]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003bf0:	f043 0304 	orr.w	r3, r3, #4
 8003bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf6:	4b5c      	ldr	r3, [pc, #368]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfa:	4a5b      	ldr	r2, [pc, #364]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	6713      	str	r3, [r2, #112]	; 0x70
 8003c02:	e00b      	b.n	8003c1c <HAL_RCC_OscConfig+0x324>
 8003c04:	4b58      	ldr	r3, [pc, #352]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c08:	4a57      	ldr	r2, [pc, #348]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003c0a:	f023 0301 	bic.w	r3, r3, #1
 8003c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c10:	4b55      	ldr	r3, [pc, #340]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c14:	4a54      	ldr	r2, [pc, #336]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003c16:	f023 0304 	bic.w	r3, r3, #4
 8003c1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d015      	beq.n	8003c50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c24:	f7ff fa7a 	bl	800311c <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c2a:	e00a      	b.n	8003c42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c2c:	f7ff fa76 	bl	800311c <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e0cb      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c42:	4b49      	ldr	r3, [pc, #292]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0ee      	beq.n	8003c2c <HAL_RCC_OscConfig+0x334>
 8003c4e:	e014      	b.n	8003c7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c50:	f7ff fa64 	bl	800311c <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c56:	e00a      	b.n	8003c6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c58:	f7ff fa60 	bl	800311c <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e0b5      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c6e:	4b3e      	ldr	r3, [pc, #248]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1ee      	bne.n	8003c58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c7a:	7dfb      	ldrb	r3, [r7, #23]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d105      	bne.n	8003c8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c80:	4b39      	ldr	r3, [pc, #228]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c84:	4a38      	ldr	r2, [pc, #224]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003c86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 80a1 	beq.w	8003dd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c96:	4b34      	ldr	r3, [pc, #208]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 030c 	and.w	r3, r3, #12
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d05c      	beq.n	8003d5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d141      	bne.n	8003d2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003caa:	4b31      	ldr	r3, [pc, #196]	; (8003d70 <HAL_RCC_OscConfig+0x478>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb0:	f7ff fa34 	bl	800311c <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb8:	f7ff fa30 	bl	800311c <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e087      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cca:	4b27      	ldr	r3, [pc, #156]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69da      	ldr	r2, [r3, #28]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	019b      	lsls	r3, r3, #6
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cec:	085b      	lsrs	r3, r3, #1
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	041b      	lsls	r3, r3, #16
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	061b      	lsls	r3, r3, #24
 8003cfa:	491b      	ldr	r1, [pc, #108]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d00:	4b1b      	ldr	r3, [pc, #108]	; (8003d70 <HAL_RCC_OscConfig+0x478>)
 8003d02:	2201      	movs	r2, #1
 8003d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d06:	f7ff fa09 	bl	800311c <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d0e:	f7ff fa05 	bl	800311c <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e05c      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d20:	4b11      	ldr	r3, [pc, #68]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0f0      	beq.n	8003d0e <HAL_RCC_OscConfig+0x416>
 8003d2c:	e054      	b.n	8003dd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d2e:	4b10      	ldr	r3, [pc, #64]	; (8003d70 <HAL_RCC_OscConfig+0x478>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d34:	f7ff f9f2 	bl	800311c <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d3c:	f7ff f9ee 	bl	800311c <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e045      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d4e:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f0      	bne.n	8003d3c <HAL_RCC_OscConfig+0x444>
 8003d5a:	e03d      	b.n	8003dd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d107      	bne.n	8003d74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e038      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	40007000 	.word	0x40007000
 8003d70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d74:	4b1b      	ldr	r3, [pc, #108]	; (8003de4 <HAL_RCC_OscConfig+0x4ec>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d028      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d121      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d11a      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003da4:	4013      	ands	r3, r2
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003daa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d111      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dba:	085b      	lsrs	r3, r3, #1
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d107      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d001      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e000      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40023800 	.word	0x40023800

08003de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e0cc      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dfc:	4b68      	ldr	r3, [pc, #416]	; (8003fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d90c      	bls.n	8003e24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e0a:	4b65      	ldr	r3, [pc, #404]	; (8003fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e12:	4b63      	ldr	r3, [pc, #396]	; (8003fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d001      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e0b8      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d020      	beq.n	8003e72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d005      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e3c:	4b59      	ldr	r3, [pc, #356]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	4a58      	ldr	r2, [pc, #352]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0308 	and.w	r3, r3, #8
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d005      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e54:	4b53      	ldr	r3, [pc, #332]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	4a52      	ldr	r2, [pc, #328]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e60:	4b50      	ldr	r3, [pc, #320]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	494d      	ldr	r1, [pc, #308]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d044      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d107      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e86:	4b47      	ldr	r3, [pc, #284]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d119      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e07f      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d003      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ea2:	2b03      	cmp	r3, #3
 8003ea4:	d107      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea6:	4b3f      	ldr	r3, [pc, #252]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d109      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e06f      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb6:	4b3b      	ldr	r3, [pc, #236]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e067      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ec6:	4b37      	ldr	r3, [pc, #220]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f023 0203 	bic.w	r2, r3, #3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	4934      	ldr	r1, [pc, #208]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ed8:	f7ff f920 	bl	800311c <HAL_GetTick>
 8003edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ede:	e00a      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ee0:	f7ff f91c 	bl	800311c <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e04f      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef6:	4b2b      	ldr	r3, [pc, #172]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 020c 	and.w	r2, r3, #12
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d1eb      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f08:	4b25      	ldr	r3, [pc, #148]	; (8003fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d20c      	bcs.n	8003f30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f16:	4b22      	ldr	r3, [pc, #136]	; (8003fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1e:	4b20      	ldr	r3, [pc, #128]	; (8003fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d001      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e032      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d008      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f3c:	4b19      	ldr	r3, [pc, #100]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	4916      	ldr	r1, [pc, #88]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d009      	beq.n	8003f6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f5a:	4b12      	ldr	r3, [pc, #72]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	490e      	ldr	r1, [pc, #56]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f6e:	f000 f821 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 8003f72:	4602      	mov	r2, r0
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	091b      	lsrs	r3, r3, #4
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	490a      	ldr	r1, [pc, #40]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f80:	5ccb      	ldrb	r3, [r1, r3]
 8003f82:	fa22 f303 	lsr.w	r3, r2, r3
 8003f86:	4a09      	ldr	r2, [pc, #36]	; (8003fac <HAL_RCC_ClockConfig+0x1c4>)
 8003f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f8a:	4b09      	ldr	r3, [pc, #36]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff f880 	bl	8003094 <HAL_InitTick>

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40023c00 	.word	0x40023c00
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	0800658c 	.word	0x0800658c
 8003fac:	20000000 	.word	0x20000000
 8003fb0:	20000004 	.word	0x20000004

08003fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fb8:	b090      	sub	sp, #64	; 0x40
 8003fba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	637b      	str	r3, [r7, #52]	; 0x34
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fcc:	4b59      	ldr	r3, [pc, #356]	; (8004134 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 030c 	and.w	r3, r3, #12
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	d00d      	beq.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x40>
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	f200 80a1 	bhi.w	8004120 <HAL_RCC_GetSysClockFreq+0x16c>
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x34>
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d003      	beq.n	8003fee <HAL_RCC_GetSysClockFreq+0x3a>
 8003fe6:	e09b      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fe8:	4b53      	ldr	r3, [pc, #332]	; (8004138 <HAL_RCC_GetSysClockFreq+0x184>)
 8003fea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003fec:	e09b      	b.n	8004126 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fee:	4b53      	ldr	r3, [pc, #332]	; (800413c <HAL_RCC_GetSysClockFreq+0x188>)
 8003ff0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ff2:	e098      	b.n	8004126 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ff4:	4b4f      	ldr	r3, [pc, #316]	; (8004134 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ffc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ffe:	4b4d      	ldr	r3, [pc, #308]	; (8004134 <HAL_RCC_GetSysClockFreq+0x180>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d028      	beq.n	800405c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800400a:	4b4a      	ldr	r3, [pc, #296]	; (8004134 <HAL_RCC_GetSysClockFreq+0x180>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	099b      	lsrs	r3, r3, #6
 8004010:	2200      	movs	r2, #0
 8004012:	623b      	str	r3, [r7, #32]
 8004014:	627a      	str	r2, [r7, #36]	; 0x24
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800401c:	2100      	movs	r1, #0
 800401e:	4b47      	ldr	r3, [pc, #284]	; (800413c <HAL_RCC_GetSysClockFreq+0x188>)
 8004020:	fb03 f201 	mul.w	r2, r3, r1
 8004024:	2300      	movs	r3, #0
 8004026:	fb00 f303 	mul.w	r3, r0, r3
 800402a:	4413      	add	r3, r2
 800402c:	4a43      	ldr	r2, [pc, #268]	; (800413c <HAL_RCC_GetSysClockFreq+0x188>)
 800402e:	fba0 1202 	umull	r1, r2, r0, r2
 8004032:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004034:	460a      	mov	r2, r1
 8004036:	62ba      	str	r2, [r7, #40]	; 0x28
 8004038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800403a:	4413      	add	r3, r2
 800403c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800403e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004040:	2200      	movs	r2, #0
 8004042:	61bb      	str	r3, [r7, #24]
 8004044:	61fa      	str	r2, [r7, #28]
 8004046:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800404a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800404e:	f7fc fd91 	bl	8000b74 <__aeabi_uldivmod>
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	4613      	mov	r3, r2
 8004058:	63fb      	str	r3, [r7, #60]	; 0x3c
 800405a:	e053      	b.n	8004104 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800405c:	4b35      	ldr	r3, [pc, #212]	; (8004134 <HAL_RCC_GetSysClockFreq+0x180>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	099b      	lsrs	r3, r3, #6
 8004062:	2200      	movs	r2, #0
 8004064:	613b      	str	r3, [r7, #16]
 8004066:	617a      	str	r2, [r7, #20]
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800406e:	f04f 0b00 	mov.w	fp, #0
 8004072:	4652      	mov	r2, sl
 8004074:	465b      	mov	r3, fp
 8004076:	f04f 0000 	mov.w	r0, #0
 800407a:	f04f 0100 	mov.w	r1, #0
 800407e:	0159      	lsls	r1, r3, #5
 8004080:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004084:	0150      	lsls	r0, r2, #5
 8004086:	4602      	mov	r2, r0
 8004088:	460b      	mov	r3, r1
 800408a:	ebb2 080a 	subs.w	r8, r2, sl
 800408e:	eb63 090b 	sbc.w	r9, r3, fp
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	f04f 0300 	mov.w	r3, #0
 800409a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800409e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80040a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80040a6:	ebb2 0408 	subs.w	r4, r2, r8
 80040aa:	eb63 0509 	sbc.w	r5, r3, r9
 80040ae:	f04f 0200 	mov.w	r2, #0
 80040b2:	f04f 0300 	mov.w	r3, #0
 80040b6:	00eb      	lsls	r3, r5, #3
 80040b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040bc:	00e2      	lsls	r2, r4, #3
 80040be:	4614      	mov	r4, r2
 80040c0:	461d      	mov	r5, r3
 80040c2:	eb14 030a 	adds.w	r3, r4, sl
 80040c6:	603b      	str	r3, [r7, #0]
 80040c8:	eb45 030b 	adc.w	r3, r5, fp
 80040cc:	607b      	str	r3, [r7, #4]
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040da:	4629      	mov	r1, r5
 80040dc:	028b      	lsls	r3, r1, #10
 80040de:	4621      	mov	r1, r4
 80040e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040e4:	4621      	mov	r1, r4
 80040e6:	028a      	lsls	r2, r1, #10
 80040e8:	4610      	mov	r0, r2
 80040ea:	4619      	mov	r1, r3
 80040ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ee:	2200      	movs	r2, #0
 80040f0:	60bb      	str	r3, [r7, #8]
 80040f2:	60fa      	str	r2, [r7, #12]
 80040f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040f8:	f7fc fd3c 	bl	8000b74 <__aeabi_uldivmod>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4613      	mov	r3, r2
 8004102:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004104:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <HAL_RCC_GetSysClockFreq+0x180>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	0c1b      	lsrs	r3, r3, #16
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	3301      	adds	r3, #1
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004114:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	fbb2 f3f3 	udiv	r3, r2, r3
 800411c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800411e:	e002      	b.n	8004126 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004120:	4b05      	ldr	r3, [pc, #20]	; (8004138 <HAL_RCC_GetSysClockFreq+0x184>)
 8004122:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004128:	4618      	mov	r0, r3
 800412a:	3740      	adds	r7, #64	; 0x40
 800412c:	46bd      	mov	sp, r7
 800412e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004132:	bf00      	nop
 8004134:	40023800 	.word	0x40023800
 8004138:	00f42400 	.word	0x00f42400
 800413c:	017d7840 	.word	0x017d7840

08004140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004144:	4b03      	ldr	r3, [pc, #12]	; (8004154 <HAL_RCC_GetHCLKFreq+0x14>)
 8004146:	681b      	ldr	r3, [r3, #0]
}
 8004148:	4618      	mov	r0, r3
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	20000000 	.word	0x20000000

08004158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800415c:	f7ff fff0 	bl	8004140 <HAL_RCC_GetHCLKFreq>
 8004160:	4602      	mov	r2, r0
 8004162:	4b05      	ldr	r3, [pc, #20]	; (8004178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	0a9b      	lsrs	r3, r3, #10
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	4903      	ldr	r1, [pc, #12]	; (800417c <HAL_RCC_GetPCLK1Freq+0x24>)
 800416e:	5ccb      	ldrb	r3, [r1, r3]
 8004170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004174:	4618      	mov	r0, r3
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40023800 	.word	0x40023800
 800417c:	0800659c 	.word	0x0800659c

08004180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004184:	f7ff ffdc 	bl	8004140 <HAL_RCC_GetHCLKFreq>
 8004188:	4602      	mov	r2, r0
 800418a:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	0b5b      	lsrs	r3, r3, #13
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	4903      	ldr	r1, [pc, #12]	; (80041a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004196:	5ccb      	ldrb	r3, [r1, r3]
 8004198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800419c:	4618      	mov	r0, r3
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40023800 	.word	0x40023800
 80041a4:	0800659c 	.word	0x0800659c

080041a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e041      	b.n	800423e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d106      	bne.n	80041d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7fe fce4 	bl	8002b9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3304      	adds	r3, #4
 80041e4:	4619      	mov	r1, r3
 80041e6:	4610      	mov	r0, r2
 80041e8:	f000 fd2c 	bl	8004c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b082      	sub	sp, #8
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e041      	b.n	80042dc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d106      	bne.n	8004272 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f839 	bl	80042e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2202      	movs	r2, #2
 8004276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3304      	adds	r3, #4
 8004282:	4619      	mov	r1, r3
 8004284:	4610      	mov	r0, r2
 8004286:	f000 fcdd 	bl	8004c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d109      	bne.n	800431c <HAL_TIM_PWM_Start+0x24>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b01      	cmp	r3, #1
 8004312:	bf14      	ite	ne
 8004314:	2301      	movne	r3, #1
 8004316:	2300      	moveq	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	e022      	b.n	8004362 <HAL_TIM_PWM_Start+0x6a>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2b04      	cmp	r3, #4
 8004320:	d109      	bne.n	8004336 <HAL_TIM_PWM_Start+0x3e>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b01      	cmp	r3, #1
 800432c:	bf14      	ite	ne
 800432e:	2301      	movne	r3, #1
 8004330:	2300      	moveq	r3, #0
 8004332:	b2db      	uxtb	r3, r3
 8004334:	e015      	b.n	8004362 <HAL_TIM_PWM_Start+0x6a>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b08      	cmp	r3, #8
 800433a:	d109      	bne.n	8004350 <HAL_TIM_PWM_Start+0x58>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b01      	cmp	r3, #1
 8004346:	bf14      	ite	ne
 8004348:	2301      	movne	r3, #1
 800434a:	2300      	moveq	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	e008      	b.n	8004362 <HAL_TIM_PWM_Start+0x6a>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b01      	cmp	r3, #1
 800435a:	bf14      	ite	ne
 800435c:	2301      	movne	r3, #1
 800435e:	2300      	moveq	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e068      	b.n	800443c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d104      	bne.n	800437a <HAL_TIM_PWM_Start+0x82>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004378:	e013      	b.n	80043a2 <HAL_TIM_PWM_Start+0xaa>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b04      	cmp	r3, #4
 800437e:	d104      	bne.n	800438a <HAL_TIM_PWM_Start+0x92>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004388:	e00b      	b.n	80043a2 <HAL_TIM_PWM_Start+0xaa>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b08      	cmp	r3, #8
 800438e:	d104      	bne.n	800439a <HAL_TIM_PWM_Start+0xa2>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004398:	e003      	b.n	80043a2 <HAL_TIM_PWM_Start+0xaa>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2202      	movs	r2, #2
 800439e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2201      	movs	r2, #1
 80043a8:	6839      	ldr	r1, [r7, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fefc 	bl	80051a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a23      	ldr	r2, [pc, #140]	; (8004444 <HAL_TIM_PWM_Start+0x14c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d107      	bne.n	80043ca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a1d      	ldr	r2, [pc, #116]	; (8004444 <HAL_TIM_PWM_Start+0x14c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d018      	beq.n	8004406 <HAL_TIM_PWM_Start+0x10e>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043dc:	d013      	beq.n	8004406 <HAL_TIM_PWM_Start+0x10e>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a19      	ldr	r2, [pc, #100]	; (8004448 <HAL_TIM_PWM_Start+0x150>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d00e      	beq.n	8004406 <HAL_TIM_PWM_Start+0x10e>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a17      	ldr	r2, [pc, #92]	; (800444c <HAL_TIM_PWM_Start+0x154>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d009      	beq.n	8004406 <HAL_TIM_PWM_Start+0x10e>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a16      	ldr	r2, [pc, #88]	; (8004450 <HAL_TIM_PWM_Start+0x158>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d004      	beq.n	8004406 <HAL_TIM_PWM_Start+0x10e>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a14      	ldr	r2, [pc, #80]	; (8004454 <HAL_TIM_PWM_Start+0x15c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d111      	bne.n	800442a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2b06      	cmp	r3, #6
 8004416:	d010      	beq.n	800443a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0201 	orr.w	r2, r2, #1
 8004426:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004428:	e007      	b.n	800443a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 0201 	orr.w	r2, r2, #1
 8004438:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40010000 	.word	0x40010000
 8004448:	40000400 	.word	0x40000400
 800444c:	40000800 	.word	0x40000800
 8004450:	40000c00 	.word	0x40000c00
 8004454:	40014000 	.word	0x40014000

08004458 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e097      	b.n	800459c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d106      	bne.n	8004486 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7fe fa69 	bl	8002958 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2202      	movs	r2, #2
 800448a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6812      	ldr	r2, [r2, #0]
 8004498:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800449c:	f023 0307 	bic.w	r3, r3, #7
 80044a0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	3304      	adds	r3, #4
 80044aa:	4619      	mov	r1, r3
 80044ac:	4610      	mov	r0, r2
 80044ae:	f000 fbc9 	bl	8004c44 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044da:	f023 0303 	bic.w	r3, r3, #3
 80044de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	021b      	lsls	r3, r3, #8
 80044ea:	4313      	orrs	r3, r2
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80044f8:	f023 030c 	bic.w	r3, r3, #12
 80044fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004504:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004508:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	68da      	ldr	r2, [r3, #12]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	021b      	lsls	r3, r3, #8
 8004514:	4313      	orrs	r3, r2
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	4313      	orrs	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	011a      	lsls	r2, r3, #4
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	031b      	lsls	r3, r3, #12
 8004528:	4313      	orrs	r3, r2
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004536:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800453e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	4313      	orrs	r3, r2
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	4313      	orrs	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80045cc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d110      	bne.n	80045f6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d102      	bne.n	80045e0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80045da:	7b7b      	ldrb	r3, [r7, #13]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d001      	beq.n	80045e4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e089      	b.n	80046f8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045f4:	e031      	b.n	800465a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	d110      	bne.n	800461e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80045fc:	7bbb      	ldrb	r3, [r7, #14]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d102      	bne.n	8004608 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004602:	7b3b      	ldrb	r3, [r7, #12]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d001      	beq.n	800460c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e075      	b.n	80046f8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800461c:	e01d      	b.n	800465a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800461e:	7bfb      	ldrb	r3, [r7, #15]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d108      	bne.n	8004636 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004624:	7bbb      	ldrb	r3, [r7, #14]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d105      	bne.n	8004636 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800462a:	7b7b      	ldrb	r3, [r7, #13]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d102      	bne.n	8004636 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004630:	7b3b      	ldrb	r3, [r7, #12]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d001      	beq.n	800463a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e05e      	b.n	80046f8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2202      	movs	r2, #2
 800463e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2202      	movs	r2, #2
 8004646:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2202      	movs	r2, #2
 800464e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2202      	movs	r2, #2
 8004656:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d003      	beq.n	8004668 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	2b04      	cmp	r3, #4
 8004664:	d010      	beq.n	8004688 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004666:	e01f      	b.n	80046a8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2201      	movs	r2, #1
 800466e:	2100      	movs	r1, #0
 8004670:	4618      	mov	r0, r3
 8004672:	f000 fd99 	bl	80051a8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 0202 	orr.w	r2, r2, #2
 8004684:	60da      	str	r2, [r3, #12]
      break;
 8004686:	e02e      	b.n	80046e6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2201      	movs	r2, #1
 800468e:	2104      	movs	r1, #4
 8004690:	4618      	mov	r0, r3
 8004692:	f000 fd89 	bl	80051a8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68da      	ldr	r2, [r3, #12]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f042 0204 	orr.w	r2, r2, #4
 80046a4:	60da      	str	r2, [r3, #12]
      break;
 80046a6:	e01e      	b.n	80046e6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2201      	movs	r2, #1
 80046ae:	2100      	movs	r1, #0
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 fd79 	bl	80051a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2201      	movs	r2, #1
 80046bc:	2104      	movs	r1, #4
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 fd72 	bl	80051a8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0202 	orr.w	r2, r2, #2
 80046d2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0204 	orr.w	r2, r2, #4
 80046e2:	60da      	str	r2, [r3, #12]
      break;
 80046e4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f042 0201 	orr.w	r2, r2, #1
 80046f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d020      	beq.n	8004764 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d01b      	beq.n	8004764 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f06f 0202 	mvn.w	r2, #2
 8004734:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7fd f8ee 	bl	800192c <HAL_TIM_IC_CaptureCallback>
 8004750:	e005      	b.n	800475e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fa57 	bl	8004c06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 fa5e 	bl	8004c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f003 0304 	and.w	r3, r3, #4
 800476a:	2b00      	cmp	r3, #0
 800476c:	d020      	beq.n	80047b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	d01b      	beq.n	80047b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f06f 0204 	mvn.w	r2, #4
 8004780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2202      	movs	r2, #2
 8004786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fd f8c8 	bl	800192c <HAL_TIM_IC_CaptureCallback>
 800479c:	e005      	b.n	80047aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 fa31 	bl	8004c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 fa38 	bl	8004c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d020      	beq.n	80047fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f003 0308 	and.w	r3, r3, #8
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d01b      	beq.n	80047fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f06f 0208 	mvn.w	r2, #8
 80047cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2204      	movs	r2, #4
 80047d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f003 0303 	and.w	r3, r3, #3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7fd f8a2 	bl	800192c <HAL_TIM_IC_CaptureCallback>
 80047e8:	e005      	b.n	80047f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 fa0b 	bl	8004c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 fa12 	bl	8004c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f003 0310 	and.w	r3, r3, #16
 8004802:	2b00      	cmp	r3, #0
 8004804:	d020      	beq.n	8004848 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f003 0310 	and.w	r3, r3, #16
 800480c:	2b00      	cmp	r3, #0
 800480e:	d01b      	beq.n	8004848 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f06f 0210 	mvn.w	r2, #16
 8004818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2208      	movs	r2, #8
 800481e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7fd f87c 	bl	800192c <HAL_TIM_IC_CaptureCallback>
 8004834:	e005      	b.n	8004842 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f9e5 	bl	8004c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f9ec 	bl	8004c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00c      	beq.n	800486c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	d007      	beq.n	800486c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f06f 0201 	mvn.w	r2, #1
 8004864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f9c3 	bl	8004bf2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00c      	beq.n	8004890 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487c:	2b00      	cmp	r3, #0
 800487e:	d007      	beq.n	8004890 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fd2a 	bl	80052e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00c      	beq.n	80048b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d007      	beq.n	80048b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f9bd 	bl	8004c2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00c      	beq.n	80048d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f003 0320 	and.w	r3, r3, #32
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d007      	beq.n	80048d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f06f 0220 	mvn.w	r2, #32
 80048d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fcfc 	bl	80052d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048d8:	bf00      	nop
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048ec:	2300      	movs	r3, #0
 80048ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e0ae      	b.n	8004a5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b0c      	cmp	r3, #12
 800490a:	f200 809f 	bhi.w	8004a4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800490e:	a201      	add	r2, pc, #4	; (adr r2, 8004914 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004914:	08004949 	.word	0x08004949
 8004918:	08004a4d 	.word	0x08004a4d
 800491c:	08004a4d 	.word	0x08004a4d
 8004920:	08004a4d 	.word	0x08004a4d
 8004924:	08004989 	.word	0x08004989
 8004928:	08004a4d 	.word	0x08004a4d
 800492c:	08004a4d 	.word	0x08004a4d
 8004930:	08004a4d 	.word	0x08004a4d
 8004934:	080049cb 	.word	0x080049cb
 8004938:	08004a4d 	.word	0x08004a4d
 800493c:	08004a4d 	.word	0x08004a4d
 8004940:	08004a4d 	.word	0x08004a4d
 8004944:	08004a0b 	.word	0x08004a0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68b9      	ldr	r1, [r7, #8]
 800494e:	4618      	mov	r0, r3
 8004950:	f000 fa04 	bl	8004d5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699a      	ldr	r2, [r3, #24]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0208 	orr.w	r2, r2, #8
 8004962:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	699a      	ldr	r2, [r3, #24]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0204 	bic.w	r2, r2, #4
 8004972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6999      	ldr	r1, [r3, #24]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	691a      	ldr	r2, [r3, #16]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	619a      	str	r2, [r3, #24]
      break;
 8004986:	e064      	b.n	8004a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68b9      	ldr	r1, [r7, #8]
 800498e:	4618      	mov	r0, r3
 8004990:	f000 fa4a 	bl	8004e28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	699a      	ldr	r2, [r3, #24]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	699a      	ldr	r2, [r3, #24]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6999      	ldr	r1, [r3, #24]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	021a      	lsls	r2, r3, #8
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	430a      	orrs	r2, r1
 80049c6:	619a      	str	r2, [r3, #24]
      break;
 80049c8:	e043      	b.n	8004a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68b9      	ldr	r1, [r7, #8]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 fa95 	bl	8004f00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	69da      	ldr	r2, [r3, #28]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f042 0208 	orr.w	r2, r2, #8
 80049e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	69da      	ldr	r2, [r3, #28]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0204 	bic.w	r2, r2, #4
 80049f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	69d9      	ldr	r1, [r3, #28]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	691a      	ldr	r2, [r3, #16]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	61da      	str	r2, [r3, #28]
      break;
 8004a08:	e023      	b.n	8004a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68b9      	ldr	r1, [r7, #8]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 fadf 	bl	8004fd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	69da      	ldr	r2, [r3, #28]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	69da      	ldr	r2, [r3, #28]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69d9      	ldr	r1, [r3, #28]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	021a      	lsls	r2, r3, #8
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	61da      	str	r2, [r3, #28]
      break;
 8004a4a:	e002      	b.n	8004a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3718      	adds	r7, #24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d101      	bne.n	8004a80 <HAL_TIM_ConfigClockSource+0x1c>
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	e0b4      	b.n	8004bea <HAL_TIM_ConfigClockSource+0x186>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aa6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ab8:	d03e      	beq.n	8004b38 <HAL_TIM_ConfigClockSource+0xd4>
 8004aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004abe:	f200 8087 	bhi.w	8004bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac6:	f000 8086 	beq.w	8004bd6 <HAL_TIM_ConfigClockSource+0x172>
 8004aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ace:	d87f      	bhi.n	8004bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ad0:	2b70      	cmp	r3, #112	; 0x70
 8004ad2:	d01a      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0xa6>
 8004ad4:	2b70      	cmp	r3, #112	; 0x70
 8004ad6:	d87b      	bhi.n	8004bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ad8:	2b60      	cmp	r3, #96	; 0x60
 8004ada:	d050      	beq.n	8004b7e <HAL_TIM_ConfigClockSource+0x11a>
 8004adc:	2b60      	cmp	r3, #96	; 0x60
 8004ade:	d877      	bhi.n	8004bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ae0:	2b50      	cmp	r3, #80	; 0x50
 8004ae2:	d03c      	beq.n	8004b5e <HAL_TIM_ConfigClockSource+0xfa>
 8004ae4:	2b50      	cmp	r3, #80	; 0x50
 8004ae6:	d873      	bhi.n	8004bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ae8:	2b40      	cmp	r3, #64	; 0x40
 8004aea:	d058      	beq.n	8004b9e <HAL_TIM_ConfigClockSource+0x13a>
 8004aec:	2b40      	cmp	r3, #64	; 0x40
 8004aee:	d86f      	bhi.n	8004bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004af0:	2b30      	cmp	r3, #48	; 0x30
 8004af2:	d064      	beq.n	8004bbe <HAL_TIM_ConfigClockSource+0x15a>
 8004af4:	2b30      	cmp	r3, #48	; 0x30
 8004af6:	d86b      	bhi.n	8004bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004af8:	2b20      	cmp	r3, #32
 8004afa:	d060      	beq.n	8004bbe <HAL_TIM_ConfigClockSource+0x15a>
 8004afc:	2b20      	cmp	r3, #32
 8004afe:	d867      	bhi.n	8004bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d05c      	beq.n	8004bbe <HAL_TIM_ConfigClockSource+0x15a>
 8004b04:	2b10      	cmp	r3, #16
 8004b06:	d05a      	beq.n	8004bbe <HAL_TIM_ConfigClockSource+0x15a>
 8004b08:	e062      	b.n	8004bd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b1a:	f000 fb25 	bl	8005168 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	609a      	str	r2, [r3, #8]
      break;
 8004b36:	e04f      	b.n	8004bd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b48:	f000 fb0e 	bl	8005168 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689a      	ldr	r2, [r3, #8]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b5a:	609a      	str	r2, [r3, #8]
      break;
 8004b5c:	e03c      	b.n	8004bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	f000 fa82 	bl	8005074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2150      	movs	r1, #80	; 0x50
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 fadb 	bl	8005132 <TIM_ITRx_SetConfig>
      break;
 8004b7c:	e02c      	b.n	8004bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	f000 faa1 	bl	80050d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2160      	movs	r1, #96	; 0x60
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 facb 	bl	8005132 <TIM_ITRx_SetConfig>
      break;
 8004b9c:	e01c      	b.n	8004bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004baa:	461a      	mov	r2, r3
 8004bac:	f000 fa62 	bl	8005074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2140      	movs	r1, #64	; 0x40
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fabb 	bl	8005132 <TIM_ITRx_SetConfig>
      break;
 8004bbc:	e00c      	b.n	8004bd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	4610      	mov	r0, r2
 8004bca:	f000 fab2 	bl	8005132 <TIM_ITRx_SetConfig>
      break;
 8004bce:	e003      	b.n	8004bd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8004bd4:	e000      	b.n	8004bd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004bd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b083      	sub	sp, #12
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b083      	sub	sp, #12
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b083      	sub	sp, #12
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c22:	bf00      	nop
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c36:	bf00      	nop
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
	...

08004c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a3a      	ldr	r2, [pc, #232]	; (8004d40 <TIM_Base_SetConfig+0xfc>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d00f      	beq.n	8004c7c <TIM_Base_SetConfig+0x38>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c62:	d00b      	beq.n	8004c7c <TIM_Base_SetConfig+0x38>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a37      	ldr	r2, [pc, #220]	; (8004d44 <TIM_Base_SetConfig+0x100>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d007      	beq.n	8004c7c <TIM_Base_SetConfig+0x38>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a36      	ldr	r2, [pc, #216]	; (8004d48 <TIM_Base_SetConfig+0x104>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d003      	beq.n	8004c7c <TIM_Base_SetConfig+0x38>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a35      	ldr	r2, [pc, #212]	; (8004d4c <TIM_Base_SetConfig+0x108>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d108      	bne.n	8004c8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a2b      	ldr	r2, [pc, #172]	; (8004d40 <TIM_Base_SetConfig+0xfc>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d01b      	beq.n	8004cce <TIM_Base_SetConfig+0x8a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c9c:	d017      	beq.n	8004cce <TIM_Base_SetConfig+0x8a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a28      	ldr	r2, [pc, #160]	; (8004d44 <TIM_Base_SetConfig+0x100>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d013      	beq.n	8004cce <TIM_Base_SetConfig+0x8a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a27      	ldr	r2, [pc, #156]	; (8004d48 <TIM_Base_SetConfig+0x104>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00f      	beq.n	8004cce <TIM_Base_SetConfig+0x8a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a26      	ldr	r2, [pc, #152]	; (8004d4c <TIM_Base_SetConfig+0x108>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d00b      	beq.n	8004cce <TIM_Base_SetConfig+0x8a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a25      	ldr	r2, [pc, #148]	; (8004d50 <TIM_Base_SetConfig+0x10c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d007      	beq.n	8004cce <TIM_Base_SetConfig+0x8a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a24      	ldr	r2, [pc, #144]	; (8004d54 <TIM_Base_SetConfig+0x110>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d003      	beq.n	8004cce <TIM_Base_SetConfig+0x8a>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a23      	ldr	r2, [pc, #140]	; (8004d58 <TIM_Base_SetConfig+0x114>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d108      	bne.n	8004ce0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a0e      	ldr	r2, [pc, #56]	; (8004d40 <TIM_Base_SetConfig+0xfc>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d103      	bne.n	8004d14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	691a      	ldr	r2, [r3, #16]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d105      	bne.n	8004d32 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	f023 0201 	bic.w	r2, r3, #1
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	611a      	str	r2, [r3, #16]
  }
}
 8004d32:	bf00      	nop
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	40010000 	.word	0x40010000
 8004d44:	40000400 	.word	0x40000400
 8004d48:	40000800 	.word	0x40000800
 8004d4c:	40000c00 	.word	0x40000c00
 8004d50:	40014000 	.word	0x40014000
 8004d54:	40014400 	.word	0x40014400
 8004d58:	40014800 	.word	0x40014800

08004d5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a1b      	ldr	r3, [r3, #32]
 8004d70:	f023 0201 	bic.w	r2, r3, #1
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f023 0303 	bic.w	r3, r3, #3
 8004d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f023 0302 	bic.w	r3, r3, #2
 8004da4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a1c      	ldr	r2, [pc, #112]	; (8004e24 <TIM_OC1_SetConfig+0xc8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d10c      	bne.n	8004dd2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f023 0308 	bic.w	r3, r3, #8
 8004dbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f023 0304 	bic.w	r3, r3, #4
 8004dd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a13      	ldr	r2, [pc, #76]	; (8004e24 <TIM_OC1_SetConfig+0xc8>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d111      	bne.n	8004dfe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004de0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004de8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	621a      	str	r2, [r3, #32]
}
 8004e18:	bf00      	nop
 8004e1a:	371c      	adds	r7, #28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	40010000 	.word	0x40010000

08004e28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	f023 0210 	bic.w	r2, r3, #16
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	021b      	lsls	r3, r3, #8
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f023 0320 	bic.w	r3, r3, #32
 8004e72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	011b      	lsls	r3, r3, #4
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a1e      	ldr	r2, [pc, #120]	; (8004efc <TIM_OC2_SetConfig+0xd4>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d10d      	bne.n	8004ea4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ea2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a15      	ldr	r2, [pc, #84]	; (8004efc <TIM_OC2_SetConfig+0xd4>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d113      	bne.n	8004ed4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004eb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004eba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	621a      	str	r2, [r3, #32]
}
 8004eee:	bf00      	nop
 8004ef0:	371c      	adds	r7, #28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	40010000 	.word	0x40010000

08004f00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a1b      	ldr	r3, [r3, #32]
 8004f14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f023 0303 	bic.w	r3, r3, #3
 8004f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	021b      	lsls	r3, r3, #8
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a1d      	ldr	r2, [pc, #116]	; (8004fd0 <TIM_OC3_SetConfig+0xd0>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d10d      	bne.n	8004f7a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	021b      	lsls	r3, r3, #8
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a14      	ldr	r2, [pc, #80]	; (8004fd0 <TIM_OC3_SetConfig+0xd0>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d113      	bne.n	8004faa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	011b      	lsls	r3, r3, #4
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	011b      	lsls	r3, r3, #4
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	621a      	str	r2, [r3, #32]
}
 8004fc4:	bf00      	nop
 8004fc6:	371c      	adds	r7, #28
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	40010000 	.word	0x40010000

08004fd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800500a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	021b      	lsls	r3, r3, #8
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	4313      	orrs	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800501e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	031b      	lsls	r3, r3, #12
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	4313      	orrs	r3, r2
 800502a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a10      	ldr	r2, [pc, #64]	; (8005070 <TIM_OC4_SetConfig+0x9c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d109      	bne.n	8005048 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800503a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	019b      	lsls	r3, r3, #6
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	4313      	orrs	r3, r2
 8005046:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	621a      	str	r2, [r3, #32]
}
 8005062:	bf00      	nop
 8005064:	371c      	adds	r7, #28
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	40010000 	.word	0x40010000

08005074 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005074:	b480      	push	{r7}
 8005076:	b087      	sub	sp, #28
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	f023 0201 	bic.w	r2, r3, #1
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800509e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f023 030a 	bic.w	r3, r3, #10
 80050b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	621a      	str	r2, [r3, #32]
}
 80050c6:	bf00      	nop
 80050c8:	371c      	adds	r7, #28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b087      	sub	sp, #28
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	60f8      	str	r0, [r7, #12]
 80050da:	60b9      	str	r1, [r7, #8]
 80050dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	f023 0210 	bic.w	r2, r3, #16
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	031b      	lsls	r3, r3, #12
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	4313      	orrs	r3, r2
 8005106:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800510e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	4313      	orrs	r3, r2
 8005118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	621a      	str	r2, [r3, #32]
}
 8005126:	bf00      	nop
 8005128:	371c      	adds	r7, #28
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005132:	b480      	push	{r7}
 8005134:	b085      	sub	sp, #20
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005148:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4313      	orrs	r3, r2
 8005150:	f043 0307 	orr.w	r3, r3, #7
 8005154:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	609a      	str	r2, [r3, #8]
}
 800515c:	bf00      	nop
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005168:	b480      	push	{r7}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
 8005174:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005182:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	021a      	lsls	r2, r3, #8
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	431a      	orrs	r2, r3
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4313      	orrs	r3, r2
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	4313      	orrs	r3, r2
 8005194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	609a      	str	r2, [r3, #8]
}
 800519c:	bf00      	nop
 800519e:	371c      	adds	r7, #28
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	f003 031f 	and.w	r3, r3, #31
 80051ba:	2201      	movs	r2, #1
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6a1a      	ldr	r2, [r3, #32]
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	43db      	mvns	r3, r3
 80051ca:	401a      	ands	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6a1a      	ldr	r2, [r3, #32]
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	f003 031f 	and.w	r3, r3, #31
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	fa01 f303 	lsl.w	r3, r1, r3
 80051e0:	431a      	orrs	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	621a      	str	r2, [r3, #32]
}
 80051e6:	bf00      	nop
 80051e8:	371c      	adds	r7, #28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
	...

080051f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005204:	2b01      	cmp	r3, #1
 8005206:	d101      	bne.n	800520c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005208:	2302      	movs	r3, #2
 800520a:	e050      	b.n	80052ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005232:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a1c      	ldr	r2, [pc, #112]	; (80052bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d018      	beq.n	8005282 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005258:	d013      	beq.n	8005282 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a18      	ldr	r2, [pc, #96]	; (80052c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d00e      	beq.n	8005282 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a16      	ldr	r2, [pc, #88]	; (80052c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d009      	beq.n	8005282 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a15      	ldr	r2, [pc, #84]	; (80052c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d004      	beq.n	8005282 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a13      	ldr	r2, [pc, #76]	; (80052cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d10c      	bne.n	800529c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005288:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	4313      	orrs	r3, r2
 8005292:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	40010000 	.word	0x40010000
 80052c0:	40000400 	.word	0x40000400
 80052c4:	40000800 	.word	0x40000800
 80052c8:	40000c00 	.word	0x40000c00
 80052cc:	40014000 	.word	0x40014000

080052d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e042      	b.n	8005390 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d106      	bne.n	8005324 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7fd fd20 	bl	8002d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2224      	movs	r2, #36	; 0x24
 8005328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68da      	ldr	r2, [r3, #12]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800533a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 fe6b 	bl	8006018 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	691a      	ldr	r2, [r3, #16]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005350:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	695a      	ldr	r2, [r3, #20]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005360:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68da      	ldr	r2, [r3, #12]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005370:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2220      	movs	r2, #32
 800537c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2220      	movs	r2, #32
 8005384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	4613      	mov	r3, r2
 80053a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b20      	cmp	r3, #32
 80053b0:	d112      	bne.n	80053d8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <HAL_UART_Receive_DMA+0x26>
 80053b8:	88fb      	ldrh	r3, [r7, #6]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e00b      	b.n	80053da <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80053c8:	88fb      	ldrh	r3, [r7, #6]
 80053ca:	461a      	mov	r2, r3
 80053cc:	68b9      	ldr	r1, [r7, #8]
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f000 fbc2 	bl	8005b58 <UART_Start_Receive_DMA>
 80053d4:	4603      	mov	r3, r0
 80053d6:	e000      	b.n	80053da <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80053d8:	2302      	movs	r3, #2
  }
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
	...

080053e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b0ba      	sub	sp, #232	; 0xe8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800540a:	2300      	movs	r3, #0
 800540c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005410:	2300      	movs	r3, #0
 8005412:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800541a:	f003 030f 	and.w	r3, r3, #15
 800541e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005422:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10f      	bne.n	800544a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800542a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b00      	cmp	r3, #0
 8005434:	d009      	beq.n	800544a <HAL_UART_IRQHandler+0x66>
 8005436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800543a:	f003 0320 	and.w	r3, r3, #32
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fd29 	bl	8005e9a <UART_Receive_IT>
      return;
 8005448:	e25b      	b.n	8005902 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800544a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 80de 	beq.w	8005610 <HAL_UART_IRQHandler+0x22c>
 8005454:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b00      	cmp	r3, #0
 800545e:	d106      	bne.n	800546e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005464:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 80d1 	beq.w	8005610 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800546e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00b      	beq.n	8005492 <HAL_UART_IRQHandler+0xae>
 800547a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800547e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005482:	2b00      	cmp	r3, #0
 8005484:	d005      	beq.n	8005492 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800548a:	f043 0201 	orr.w	r2, r3, #1
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005496:	f003 0304 	and.w	r3, r3, #4
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00b      	beq.n	80054b6 <HAL_UART_IRQHandler+0xd2>
 800549e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d005      	beq.n	80054b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ae:	f043 0202 	orr.w	r2, r3, #2
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00b      	beq.n	80054da <HAL_UART_IRQHandler+0xf6>
 80054c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d005      	beq.n	80054da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d2:	f043 0204 	orr.w	r2, r3, #4
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80054da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054de:	f003 0308 	and.w	r3, r3, #8
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d011      	beq.n	800550a <HAL_UART_IRQHandler+0x126>
 80054e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054ea:	f003 0320 	and.w	r3, r3, #32
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d105      	bne.n	80054fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80054f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d005      	beq.n	800550a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005502:	f043 0208 	orr.w	r2, r3, #8
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550e:	2b00      	cmp	r3, #0
 8005510:	f000 81f2 	beq.w	80058f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005518:	f003 0320 	and.w	r3, r3, #32
 800551c:	2b00      	cmp	r3, #0
 800551e:	d008      	beq.n	8005532 <HAL_UART_IRQHandler+0x14e>
 8005520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005524:	f003 0320 	and.w	r3, r3, #32
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 fcb4 	bl	8005e9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553c:	2b40      	cmp	r3, #64	; 0x40
 800553e:	bf0c      	ite	eq
 8005540:	2301      	moveq	r3, #1
 8005542:	2300      	movne	r3, #0
 8005544:	b2db      	uxtb	r3, r3
 8005546:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554e:	f003 0308 	and.w	r3, r3, #8
 8005552:	2b00      	cmp	r3, #0
 8005554:	d103      	bne.n	800555e <HAL_UART_IRQHandler+0x17a>
 8005556:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800555a:	2b00      	cmp	r3, #0
 800555c:	d04f      	beq.n	80055fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fbbc 	bl	8005cdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556e:	2b40      	cmp	r3, #64	; 0x40
 8005570:	d141      	bne.n	80055f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3314      	adds	r3, #20
 8005578:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005580:	e853 3f00 	ldrex	r3, [r3]
 8005584:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005588:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800558c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005590:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3314      	adds	r3, #20
 800559a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800559e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80055a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80055aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80055ae:	e841 2300 	strex	r3, r2, [r1]
 80055b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80055b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1d9      	bne.n	8005572 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d013      	beq.n	80055ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ca:	4a7e      	ldr	r2, [pc, #504]	; (80057c4 <HAL_UART_IRQHandler+0x3e0>)
 80055cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fd ff87 	bl	80034e6 <HAL_DMA_Abort_IT>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d016      	beq.n	800560c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80055e8:	4610      	mov	r0, r2
 80055ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ec:	e00e      	b.n	800560c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f99e 	bl	8005930 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f4:	e00a      	b.n	800560c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f99a 	bl	8005930 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055fc:	e006      	b.n	800560c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f996 	bl	8005930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800560a:	e175      	b.n	80058f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800560c:	bf00      	nop
    return;
 800560e:	e173      	b.n	80058f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005614:	2b01      	cmp	r3, #1
 8005616:	f040 814f 	bne.w	80058b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800561a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800561e:	f003 0310 	and.w	r3, r3, #16
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 8148 	beq.w	80058b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800562c:	f003 0310 	and.w	r3, r3, #16
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 8141 	beq.w	80058b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005636:	2300      	movs	r3, #0
 8005638:	60bb      	str	r3, [r7, #8]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	60bb      	str	r3, [r7, #8]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	60bb      	str	r3, [r7, #8]
 800564a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005656:	2b40      	cmp	r3, #64	; 0x40
 8005658:	f040 80b6 	bne.w	80057c8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005668:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 8145 	beq.w	80058fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005676:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800567a:	429a      	cmp	r2, r3
 800567c:	f080 813e 	bcs.w	80058fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005686:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005692:	f000 8088 	beq.w	80057a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	330c      	adds	r3, #12
 800569c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80056ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	330c      	adds	r3, #12
 80056be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80056c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80056c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80056ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80056d2:	e841 2300 	strex	r3, r2, [r1]
 80056d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80056da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1d9      	bne.n	8005696 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3314      	adds	r3, #20
 80056e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056ec:	e853 3f00 	ldrex	r3, [r3]
 80056f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80056f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056f4:	f023 0301 	bic.w	r3, r3, #1
 80056f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3314      	adds	r3, #20
 8005702:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005706:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800570a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800570e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005712:	e841 2300 	strex	r3, r2, [r1]
 8005716:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005718:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1e1      	bne.n	80056e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3314      	adds	r3, #20
 8005724:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005726:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005728:	e853 3f00 	ldrex	r3, [r3]
 800572c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800572e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005734:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3314      	adds	r3, #20
 800573e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005742:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005744:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005746:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005748:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800574a:	e841 2300 	strex	r3, r2, [r1]
 800574e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005750:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1e3      	bne.n	800571e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2220      	movs	r2, #32
 800575a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	330c      	adds	r3, #12
 800576a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800576e:	e853 3f00 	ldrex	r3, [r3]
 8005772:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005776:	f023 0310 	bic.w	r3, r3, #16
 800577a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	330c      	adds	r3, #12
 8005784:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005788:	65ba      	str	r2, [r7, #88]	; 0x58
 800578a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800578e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005790:	e841 2300 	strex	r3, r2, [r1]
 8005794:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1e3      	bne.n	8005764 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7fd fe30 	bl	8003406 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2202      	movs	r2, #2
 80057aa:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	4619      	mov	r1, r3
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f8c1 	bl	8005944 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057c2:	e09b      	b.n	80058fc <HAL_UART_IRQHandler+0x518>
 80057c4:	08005da3 	.word	0x08005da3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057dc:	b29b      	uxth	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 808e 	beq.w	8005900 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80057e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 8089 	beq.w	8005900 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	330c      	adds	r3, #12
 80057f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f8:	e853 3f00 	ldrex	r3, [r3]
 80057fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005800:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005804:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	330c      	adds	r3, #12
 800580e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005812:	647a      	str	r2, [r7, #68]	; 0x44
 8005814:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005816:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005818:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800581a:	e841 2300 	strex	r3, r2, [r1]
 800581e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1e3      	bne.n	80057ee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	3314      	adds	r3, #20
 800582c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	623b      	str	r3, [r7, #32]
   return(result);
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	f023 0301 	bic.w	r3, r3, #1
 800583c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3314      	adds	r3, #20
 8005846:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800584a:	633a      	str	r2, [r7, #48]	; 0x30
 800584c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005852:	e841 2300 	strex	r3, r2, [r1]
 8005856:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1e3      	bne.n	8005826 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2220      	movs	r2, #32
 8005862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	330c      	adds	r3, #12
 8005872:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	e853 3f00 	ldrex	r3, [r3]
 800587a:	60fb      	str	r3, [r7, #12]
   return(result);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f023 0310 	bic.w	r3, r3, #16
 8005882:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	330c      	adds	r3, #12
 800588c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005890:	61fa      	str	r2, [r7, #28]
 8005892:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005894:	69b9      	ldr	r1, [r7, #24]
 8005896:	69fa      	ldr	r2, [r7, #28]
 8005898:	e841 2300 	strex	r3, r2, [r1]
 800589c:	617b      	str	r3, [r7, #20]
   return(result);
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1e3      	bne.n	800586c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058ae:	4619      	mov	r1, r3
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 f847 	bl	8005944 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058b6:	e023      	b.n	8005900 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d009      	beq.n	80058d8 <HAL_UART_IRQHandler+0x4f4>
 80058c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d003      	beq.n	80058d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 fa7a 	bl	8005dca <UART_Transmit_IT>
    return;
 80058d6:	e014      	b.n	8005902 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80058d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00e      	beq.n	8005902 <HAL_UART_IRQHandler+0x51e>
 80058e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d008      	beq.n	8005902 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 faba 	bl	8005e6a <UART_EndTransmit_IT>
    return;
 80058f6:	e004      	b.n	8005902 <HAL_UART_IRQHandler+0x51e>
    return;
 80058f8:	bf00      	nop
 80058fa:	e002      	b.n	8005902 <HAL_UART_IRQHandler+0x51e>
      return;
 80058fc:	bf00      	nop
 80058fe:	e000      	b.n	8005902 <HAL_UART_IRQHandler+0x51e>
      return;
 8005900:	bf00      	nop
  }
}
 8005902:	37e8      	adds	r7, #232	; 0xe8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	460b      	mov	r3, r1
 800594e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b09c      	sub	sp, #112	; 0x70
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005968:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005974:	2b00      	cmp	r3, #0
 8005976:	d172      	bne.n	8005a5e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800597a:	2200      	movs	r2, #0
 800597c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800597e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	330c      	adds	r3, #12
 8005984:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005988:	e853 3f00 	ldrex	r3, [r3]
 800598c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800598e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005994:	66bb      	str	r3, [r7, #104]	; 0x68
 8005996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	330c      	adds	r3, #12
 800599c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800599e:	65ba      	str	r2, [r7, #88]	; 0x58
 80059a0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059a6:	e841 2300 	strex	r3, r2, [r1]
 80059aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1e5      	bne.n	800597e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3314      	adds	r3, #20
 80059b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059bc:	e853 3f00 	ldrex	r3, [r3]
 80059c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c4:	f023 0301 	bic.w	r3, r3, #1
 80059c8:	667b      	str	r3, [r7, #100]	; 0x64
 80059ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3314      	adds	r3, #20
 80059d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80059d2:	647a      	str	r2, [r7, #68]	; 0x44
 80059d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059da:	e841 2300 	strex	r3, r2, [r1]
 80059de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1e5      	bne.n	80059b2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	3314      	adds	r3, #20
 80059ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	e853 3f00 	ldrex	r3, [r3]
 80059f4:	623b      	str	r3, [r7, #32]
   return(result);
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059fc:	663b      	str	r3, [r7, #96]	; 0x60
 80059fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3314      	adds	r3, #20
 8005a04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a06:	633a      	str	r2, [r7, #48]	; 0x30
 8005a08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a0e:	e841 2300 	strex	r3, r2, [r1]
 8005a12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1e5      	bne.n	80059e6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d119      	bne.n	8005a5e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	330c      	adds	r3, #12
 8005a30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	e853 3f00 	ldrex	r3, [r3]
 8005a38:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f023 0310 	bic.w	r3, r3, #16
 8005a40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	330c      	adds	r3, #12
 8005a48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a4a:	61fa      	str	r2, [r7, #28]
 8005a4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4e:	69b9      	ldr	r1, [r7, #24]
 8005a50:	69fa      	ldr	r2, [r7, #28]
 8005a52:	e841 2300 	strex	r3, r2, [r1]
 8005a56:	617b      	str	r3, [r7, #20]
   return(result);
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1e5      	bne.n	8005a2a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a60:	2200      	movs	r2, #0
 8005a62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d106      	bne.n	8005a7a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a6e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a70:	4619      	mov	r1, r3
 8005a72:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005a74:	f7ff ff66 	bl	8005944 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a78:	e002      	b.n	8005a80 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005a7a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005a7c:	f7fc f822 	bl	8001ac4 <HAL_UART_RxCpltCallback>
}
 8005a80:	bf00      	nop
 8005a82:	3770      	adds	r7, #112	; 0x70
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a94:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d108      	bne.n	8005ab6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005aa8:	085b      	lsrs	r3, r3, #1
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	4619      	mov	r1, r3
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f7ff ff48 	bl	8005944 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ab4:	e002      	b.n	8005abc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f7ff ff30 	bl	800591c <HAL_UART_RxHalfCpltCallback>
}
 8005abc:	bf00      	nop
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005acc:	2300      	movs	r3, #0
 8005ace:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae0:	2b80      	cmp	r3, #128	; 0x80
 8005ae2:	bf0c      	ite	eq
 8005ae4:	2301      	moveq	r3, #1
 8005ae6:	2300      	movne	r3, #0
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b21      	cmp	r3, #33	; 0x21
 8005af6:	d108      	bne.n	8005b0a <UART_DMAError+0x46>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d005      	beq.n	8005b0a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2200      	movs	r2, #0
 8005b02:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005b04:	68b8      	ldr	r0, [r7, #8]
 8005b06:	f000 f8c1 	bl	8005c8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	695b      	ldr	r3, [r3, #20]
 8005b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b14:	2b40      	cmp	r3, #64	; 0x40
 8005b16:	bf0c      	ite	eq
 8005b18:	2301      	moveq	r3, #1
 8005b1a:	2300      	movne	r3, #0
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b22      	cmp	r3, #34	; 0x22
 8005b2a:	d108      	bne.n	8005b3e <UART_DMAError+0x7a>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d005      	beq.n	8005b3e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	2200      	movs	r2, #0
 8005b36:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005b38:	68b8      	ldr	r0, [r7, #8]
 8005b3a:	f000 f8cf 	bl	8005cdc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b42:	f043 0210 	orr.w	r2, r3, #16
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b4a:	68b8      	ldr	r0, [r7, #8]
 8005b4c:	f7ff fef0 	bl	8005930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b50:	bf00      	nop
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b098      	sub	sp, #96	; 0x60
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	4613      	mov	r3, r2
 8005b64:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	88fa      	ldrh	r2, [r7, #6]
 8005b70:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2222      	movs	r2, #34	; 0x22
 8005b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b84:	4a3e      	ldr	r2, [pc, #248]	; (8005c80 <UART_Start_Receive_DMA+0x128>)
 8005b86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b8c:	4a3d      	ldr	r2, [pc, #244]	; (8005c84 <UART_Start_Receive_DMA+0x12c>)
 8005b8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b94:	4a3c      	ldr	r2, [pc, #240]	; (8005c88 <UART_Start_Receive_DMA+0x130>)
 8005b96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005ba0:	f107 0308 	add.w	r3, r7, #8
 8005ba4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	88fb      	ldrh	r3, [r7, #6]
 8005bb8:	f7fd fbcd 	bl	8003356 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	613b      	str	r3, [r7, #16]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	613b      	str	r3, [r7, #16]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	613b      	str	r3, [r7, #16]
 8005bd0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d019      	beq.n	8005c0e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	330c      	adds	r3, #12
 8005be0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005be4:	e853 3f00 	ldrex	r3, [r3]
 8005be8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bf0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	330c      	adds	r3, #12
 8005bf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bfa:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005bfc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005c00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c02:	e841 2300 	strex	r3, r2, [r1]
 8005c06:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1e5      	bne.n	8005bda <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3314      	adds	r3, #20
 8005c14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c18:	e853 3f00 	ldrex	r3, [r3]
 8005c1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c20:	f043 0301 	orr.w	r3, r3, #1
 8005c24:	657b      	str	r3, [r7, #84]	; 0x54
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3314      	adds	r3, #20
 8005c2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c2e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005c30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005c34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c36:	e841 2300 	strex	r3, r2, [r1]
 8005c3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1e5      	bne.n	8005c0e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3314      	adds	r3, #20
 8005c48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	e853 3f00 	ldrex	r3, [r3]
 8005c50:	617b      	str	r3, [r7, #20]
   return(result);
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c58:	653b      	str	r3, [r7, #80]	; 0x50
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	3314      	adds	r3, #20
 8005c60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c62:	627a      	str	r2, [r7, #36]	; 0x24
 8005c64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c66:	6a39      	ldr	r1, [r7, #32]
 8005c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c6a:	e841 2300 	strex	r3, r2, [r1]
 8005c6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1e5      	bne.n	8005c42 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3760      	adds	r7, #96	; 0x60
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	0800595d 	.word	0x0800595d
 8005c84:	08005a89 	.word	0x08005a89
 8005c88:	08005ac5 	.word	0x08005ac5

08005c8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b089      	sub	sp, #36	; 0x24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	330c      	adds	r3, #12
 8005c9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	e853 3f00 	ldrex	r3, [r3]
 8005ca2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005caa:	61fb      	str	r3, [r7, #28]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	330c      	adds	r3, #12
 8005cb2:	69fa      	ldr	r2, [r7, #28]
 8005cb4:	61ba      	str	r2, [r7, #24]
 8005cb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb8:	6979      	ldr	r1, [r7, #20]
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	e841 2300 	strex	r3, r2, [r1]
 8005cc0:	613b      	str	r3, [r7, #16]
   return(result);
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1e5      	bne.n	8005c94 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005cd0:	bf00      	nop
 8005cd2:	3724      	adds	r7, #36	; 0x24
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b095      	sub	sp, #84	; 0x54
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	330c      	adds	r3, #12
 8005cea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cee:	e853 3f00 	ldrex	r3, [r3]
 8005cf2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	330c      	adds	r3, #12
 8005d02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d04:	643a      	str	r2, [r7, #64]	; 0x40
 8005d06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d0c:	e841 2300 	strex	r3, r2, [r1]
 8005d10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1e5      	bne.n	8005ce4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3314      	adds	r3, #20
 8005d1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d20:	6a3b      	ldr	r3, [r7, #32]
 8005d22:	e853 3f00 	ldrex	r3, [r3]
 8005d26:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	f023 0301 	bic.w	r3, r3, #1
 8005d2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3314      	adds	r3, #20
 8005d36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d40:	e841 2300 	strex	r3, r2, [r1]
 8005d44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1e5      	bne.n	8005d18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d119      	bne.n	8005d88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	330c      	adds	r3, #12
 8005d5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	e853 3f00 	ldrex	r3, [r3]
 8005d62:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	f023 0310 	bic.w	r3, r3, #16
 8005d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	330c      	adds	r3, #12
 8005d72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d74:	61ba      	str	r2, [r7, #24]
 8005d76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	6979      	ldr	r1, [r7, #20]
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	613b      	str	r3, [r7, #16]
   return(result);
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e5      	bne.n	8005d54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d96:	bf00      	nop
 8005d98:	3754      	adds	r7, #84	; 0x54
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b084      	sub	sp, #16
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f7ff fdb7 	bl	8005930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dc2:	bf00      	nop
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b085      	sub	sp, #20
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b21      	cmp	r3, #33	; 0x21
 8005ddc:	d13e      	bne.n	8005e5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de6:	d114      	bne.n	8005e12 <UART_Transmit_IT+0x48>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d110      	bne.n	8005e12 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	1c9a      	adds	r2, r3, #2
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	621a      	str	r2, [r3, #32]
 8005e10:	e008      	b.n	8005e24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	1c59      	adds	r1, r3, #1
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	6211      	str	r1, [r2, #32]
 8005e1c:	781a      	ldrb	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	4619      	mov	r1, r3
 8005e32:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10f      	bne.n	8005e58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68da      	ldr	r2, [r3, #12]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68da      	ldr	r2, [r3, #12]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	e000      	b.n	8005e5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e5c:	2302      	movs	r3, #2
  }
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b082      	sub	sp, #8
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68da      	ldr	r2, [r3, #12]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2220      	movs	r2, #32
 8005e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7ff fd3c 	bl	8005908 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b08c      	sub	sp, #48	; 0x30
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b22      	cmp	r3, #34	; 0x22
 8005eac:	f040 80ae 	bne.w	800600c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb8:	d117      	bne.n	8005eea <UART_Receive_IT+0x50>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d113      	bne.n	8005eea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005edc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee2:	1c9a      	adds	r2, r3, #2
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	629a      	str	r2, [r3, #40]	; 0x28
 8005ee8:	e026      	b.n	8005f38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005efc:	d007      	beq.n	8005f0e <UART_Receive_IT+0x74>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10a      	bne.n	8005f1c <UART_Receive_IT+0x82>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d106      	bne.n	8005f1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	b2da      	uxtb	r2, r3
 8005f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f18:	701a      	strb	r2, [r3, #0]
 8005f1a:	e008      	b.n	8005f2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f32:	1c5a      	adds	r2, r3, #1
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	4619      	mov	r1, r3
 8005f46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d15d      	bne.n	8006008 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68da      	ldr	r2, [r3, #12]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f022 0220 	bic.w	r2, r2, #32
 8005f5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	695a      	ldr	r2, [r3, #20]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f022 0201 	bic.w	r2, r2, #1
 8005f7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d135      	bne.n	8005ffe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	330c      	adds	r3, #12
 8005f9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	e853 3f00 	ldrex	r3, [r3]
 8005fa6:	613b      	str	r3, [r7, #16]
   return(result);
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f023 0310 	bic.w	r3, r3, #16
 8005fae:	627b      	str	r3, [r7, #36]	; 0x24
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	330c      	adds	r3, #12
 8005fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fb8:	623a      	str	r2, [r7, #32]
 8005fba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbc:	69f9      	ldr	r1, [r7, #28]
 8005fbe:	6a3a      	ldr	r2, [r7, #32]
 8005fc0:	e841 2300 	strex	r3, r2, [r1]
 8005fc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1e5      	bne.n	8005f98 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0310 	and.w	r3, r3, #16
 8005fd6:	2b10      	cmp	r3, #16
 8005fd8:	d10a      	bne.n	8005ff0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fda:	2300      	movs	r3, #0
 8005fdc:	60fb      	str	r3, [r7, #12]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	60fb      	str	r3, [r7, #12]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	60fb      	str	r3, [r7, #12]
 8005fee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7ff fca4 	bl	8005944 <HAL_UARTEx_RxEventCallback>
 8005ffc:	e002      	b.n	8006004 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7fb fd60 	bl	8001ac4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006004:	2300      	movs	r3, #0
 8006006:	e002      	b.n	800600e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006008:	2300      	movs	r3, #0
 800600a:	e000      	b.n	800600e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800600c:	2302      	movs	r3, #2
  }
}
 800600e:	4618      	mov	r0, r3
 8006010:	3730      	adds	r7, #48	; 0x30
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
	...

08006018 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800601c:	b0c0      	sub	sp, #256	; 0x100
 800601e:	af00      	add	r7, sp, #0
 8006020:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006034:	68d9      	ldr	r1, [r3, #12]
 8006036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	ea40 0301 	orr.w	r3, r0, r1
 8006040:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006046:	689a      	ldr	r2, [r3, #8]
 8006048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	431a      	orrs	r2, r3
 8006050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	431a      	orrs	r2, r3
 8006058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	4313      	orrs	r3, r2
 8006060:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006070:	f021 010c 	bic.w	r1, r1, #12
 8006074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800607e:	430b      	orrs	r3, r1
 8006080:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800608e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006092:	6999      	ldr	r1, [r3, #24]
 8006094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	ea40 0301 	orr.w	r3, r0, r1
 800609e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	4b8f      	ldr	r3, [pc, #572]	; (80062e4 <UART_SetConfig+0x2cc>)
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d005      	beq.n	80060b8 <UART_SetConfig+0xa0>
 80060ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	4b8d      	ldr	r3, [pc, #564]	; (80062e8 <UART_SetConfig+0x2d0>)
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d104      	bne.n	80060c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060b8:	f7fe f862 	bl	8004180 <HAL_RCC_GetPCLK2Freq>
 80060bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80060c0:	e003      	b.n	80060ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060c2:	f7fe f849 	bl	8004158 <HAL_RCC_GetPCLK1Freq>
 80060c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060d4:	f040 810c 	bne.w	80062f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060dc:	2200      	movs	r2, #0
 80060de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80060e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80060ea:	4622      	mov	r2, r4
 80060ec:	462b      	mov	r3, r5
 80060ee:	1891      	adds	r1, r2, r2
 80060f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80060f2:	415b      	adcs	r3, r3
 80060f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80060fa:	4621      	mov	r1, r4
 80060fc:	eb12 0801 	adds.w	r8, r2, r1
 8006100:	4629      	mov	r1, r5
 8006102:	eb43 0901 	adc.w	r9, r3, r1
 8006106:	f04f 0200 	mov.w	r2, #0
 800610a:	f04f 0300 	mov.w	r3, #0
 800610e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006112:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006116:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800611a:	4690      	mov	r8, r2
 800611c:	4699      	mov	r9, r3
 800611e:	4623      	mov	r3, r4
 8006120:	eb18 0303 	adds.w	r3, r8, r3
 8006124:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006128:	462b      	mov	r3, r5
 800612a:	eb49 0303 	adc.w	r3, r9, r3
 800612e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800613e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006142:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006146:	460b      	mov	r3, r1
 8006148:	18db      	adds	r3, r3, r3
 800614a:	653b      	str	r3, [r7, #80]	; 0x50
 800614c:	4613      	mov	r3, r2
 800614e:	eb42 0303 	adc.w	r3, r2, r3
 8006152:	657b      	str	r3, [r7, #84]	; 0x54
 8006154:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006158:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800615c:	f7fa fd0a 	bl	8000b74 <__aeabi_uldivmod>
 8006160:	4602      	mov	r2, r0
 8006162:	460b      	mov	r3, r1
 8006164:	4b61      	ldr	r3, [pc, #388]	; (80062ec <UART_SetConfig+0x2d4>)
 8006166:	fba3 2302 	umull	r2, r3, r3, r2
 800616a:	095b      	lsrs	r3, r3, #5
 800616c:	011c      	lsls	r4, r3, #4
 800616e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006172:	2200      	movs	r2, #0
 8006174:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006178:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800617c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006180:	4642      	mov	r2, r8
 8006182:	464b      	mov	r3, r9
 8006184:	1891      	adds	r1, r2, r2
 8006186:	64b9      	str	r1, [r7, #72]	; 0x48
 8006188:	415b      	adcs	r3, r3
 800618a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800618c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006190:	4641      	mov	r1, r8
 8006192:	eb12 0a01 	adds.w	sl, r2, r1
 8006196:	4649      	mov	r1, r9
 8006198:	eb43 0b01 	adc.w	fp, r3, r1
 800619c:	f04f 0200 	mov.w	r2, #0
 80061a0:	f04f 0300 	mov.w	r3, #0
 80061a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061b0:	4692      	mov	sl, r2
 80061b2:	469b      	mov	fp, r3
 80061b4:	4643      	mov	r3, r8
 80061b6:	eb1a 0303 	adds.w	r3, sl, r3
 80061ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061be:	464b      	mov	r3, r9
 80061c0:	eb4b 0303 	adc.w	r3, fp, r3
 80061c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80061d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80061dc:	460b      	mov	r3, r1
 80061de:	18db      	adds	r3, r3, r3
 80061e0:	643b      	str	r3, [r7, #64]	; 0x40
 80061e2:	4613      	mov	r3, r2
 80061e4:	eb42 0303 	adc.w	r3, r2, r3
 80061e8:	647b      	str	r3, [r7, #68]	; 0x44
 80061ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80061f2:	f7fa fcbf 	bl	8000b74 <__aeabi_uldivmod>
 80061f6:	4602      	mov	r2, r0
 80061f8:	460b      	mov	r3, r1
 80061fa:	4611      	mov	r1, r2
 80061fc:	4b3b      	ldr	r3, [pc, #236]	; (80062ec <UART_SetConfig+0x2d4>)
 80061fe:	fba3 2301 	umull	r2, r3, r3, r1
 8006202:	095b      	lsrs	r3, r3, #5
 8006204:	2264      	movs	r2, #100	; 0x64
 8006206:	fb02 f303 	mul.w	r3, r2, r3
 800620a:	1acb      	subs	r3, r1, r3
 800620c:	00db      	lsls	r3, r3, #3
 800620e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006212:	4b36      	ldr	r3, [pc, #216]	; (80062ec <UART_SetConfig+0x2d4>)
 8006214:	fba3 2302 	umull	r2, r3, r3, r2
 8006218:	095b      	lsrs	r3, r3, #5
 800621a:	005b      	lsls	r3, r3, #1
 800621c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006220:	441c      	add	r4, r3
 8006222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006226:	2200      	movs	r2, #0
 8006228:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800622c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006230:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006234:	4642      	mov	r2, r8
 8006236:	464b      	mov	r3, r9
 8006238:	1891      	adds	r1, r2, r2
 800623a:	63b9      	str	r1, [r7, #56]	; 0x38
 800623c:	415b      	adcs	r3, r3
 800623e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006240:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006244:	4641      	mov	r1, r8
 8006246:	1851      	adds	r1, r2, r1
 8006248:	6339      	str	r1, [r7, #48]	; 0x30
 800624a:	4649      	mov	r1, r9
 800624c:	414b      	adcs	r3, r1
 800624e:	637b      	str	r3, [r7, #52]	; 0x34
 8006250:	f04f 0200 	mov.w	r2, #0
 8006254:	f04f 0300 	mov.w	r3, #0
 8006258:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800625c:	4659      	mov	r1, fp
 800625e:	00cb      	lsls	r3, r1, #3
 8006260:	4651      	mov	r1, sl
 8006262:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006266:	4651      	mov	r1, sl
 8006268:	00ca      	lsls	r2, r1, #3
 800626a:	4610      	mov	r0, r2
 800626c:	4619      	mov	r1, r3
 800626e:	4603      	mov	r3, r0
 8006270:	4642      	mov	r2, r8
 8006272:	189b      	adds	r3, r3, r2
 8006274:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006278:	464b      	mov	r3, r9
 800627a:	460a      	mov	r2, r1
 800627c:	eb42 0303 	adc.w	r3, r2, r3
 8006280:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006290:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006294:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006298:	460b      	mov	r3, r1
 800629a:	18db      	adds	r3, r3, r3
 800629c:	62bb      	str	r3, [r7, #40]	; 0x28
 800629e:	4613      	mov	r3, r2
 80062a0:	eb42 0303 	adc.w	r3, r2, r3
 80062a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80062ae:	f7fa fc61 	bl	8000b74 <__aeabi_uldivmod>
 80062b2:	4602      	mov	r2, r0
 80062b4:	460b      	mov	r3, r1
 80062b6:	4b0d      	ldr	r3, [pc, #52]	; (80062ec <UART_SetConfig+0x2d4>)
 80062b8:	fba3 1302 	umull	r1, r3, r3, r2
 80062bc:	095b      	lsrs	r3, r3, #5
 80062be:	2164      	movs	r1, #100	; 0x64
 80062c0:	fb01 f303 	mul.w	r3, r1, r3
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	00db      	lsls	r3, r3, #3
 80062c8:	3332      	adds	r3, #50	; 0x32
 80062ca:	4a08      	ldr	r2, [pc, #32]	; (80062ec <UART_SetConfig+0x2d4>)
 80062cc:	fba2 2303 	umull	r2, r3, r2, r3
 80062d0:	095b      	lsrs	r3, r3, #5
 80062d2:	f003 0207 	and.w	r2, r3, #7
 80062d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4422      	add	r2, r4
 80062de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062e0:	e106      	b.n	80064f0 <UART_SetConfig+0x4d8>
 80062e2:	bf00      	nop
 80062e4:	40011000 	.word	0x40011000
 80062e8:	40011400 	.word	0x40011400
 80062ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062f4:	2200      	movs	r2, #0
 80062f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80062fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006302:	4642      	mov	r2, r8
 8006304:	464b      	mov	r3, r9
 8006306:	1891      	adds	r1, r2, r2
 8006308:	6239      	str	r1, [r7, #32]
 800630a:	415b      	adcs	r3, r3
 800630c:	627b      	str	r3, [r7, #36]	; 0x24
 800630e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006312:	4641      	mov	r1, r8
 8006314:	1854      	adds	r4, r2, r1
 8006316:	4649      	mov	r1, r9
 8006318:	eb43 0501 	adc.w	r5, r3, r1
 800631c:	f04f 0200 	mov.w	r2, #0
 8006320:	f04f 0300 	mov.w	r3, #0
 8006324:	00eb      	lsls	r3, r5, #3
 8006326:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800632a:	00e2      	lsls	r2, r4, #3
 800632c:	4614      	mov	r4, r2
 800632e:	461d      	mov	r5, r3
 8006330:	4643      	mov	r3, r8
 8006332:	18e3      	adds	r3, r4, r3
 8006334:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006338:	464b      	mov	r3, r9
 800633a:	eb45 0303 	adc.w	r3, r5, r3
 800633e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800634e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006352:	f04f 0200 	mov.w	r2, #0
 8006356:	f04f 0300 	mov.w	r3, #0
 800635a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800635e:	4629      	mov	r1, r5
 8006360:	008b      	lsls	r3, r1, #2
 8006362:	4621      	mov	r1, r4
 8006364:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006368:	4621      	mov	r1, r4
 800636a:	008a      	lsls	r2, r1, #2
 800636c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006370:	f7fa fc00 	bl	8000b74 <__aeabi_uldivmod>
 8006374:	4602      	mov	r2, r0
 8006376:	460b      	mov	r3, r1
 8006378:	4b60      	ldr	r3, [pc, #384]	; (80064fc <UART_SetConfig+0x4e4>)
 800637a:	fba3 2302 	umull	r2, r3, r3, r2
 800637e:	095b      	lsrs	r3, r3, #5
 8006380:	011c      	lsls	r4, r3, #4
 8006382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006386:	2200      	movs	r2, #0
 8006388:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800638c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006390:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006394:	4642      	mov	r2, r8
 8006396:	464b      	mov	r3, r9
 8006398:	1891      	adds	r1, r2, r2
 800639a:	61b9      	str	r1, [r7, #24]
 800639c:	415b      	adcs	r3, r3
 800639e:	61fb      	str	r3, [r7, #28]
 80063a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063a4:	4641      	mov	r1, r8
 80063a6:	1851      	adds	r1, r2, r1
 80063a8:	6139      	str	r1, [r7, #16]
 80063aa:	4649      	mov	r1, r9
 80063ac:	414b      	adcs	r3, r1
 80063ae:	617b      	str	r3, [r7, #20]
 80063b0:	f04f 0200 	mov.w	r2, #0
 80063b4:	f04f 0300 	mov.w	r3, #0
 80063b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063bc:	4659      	mov	r1, fp
 80063be:	00cb      	lsls	r3, r1, #3
 80063c0:	4651      	mov	r1, sl
 80063c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063c6:	4651      	mov	r1, sl
 80063c8:	00ca      	lsls	r2, r1, #3
 80063ca:	4610      	mov	r0, r2
 80063cc:	4619      	mov	r1, r3
 80063ce:	4603      	mov	r3, r0
 80063d0:	4642      	mov	r2, r8
 80063d2:	189b      	adds	r3, r3, r2
 80063d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063d8:	464b      	mov	r3, r9
 80063da:	460a      	mov	r2, r1
 80063dc:	eb42 0303 	adc.w	r3, r2, r3
 80063e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80063ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80063f0:	f04f 0200 	mov.w	r2, #0
 80063f4:	f04f 0300 	mov.w	r3, #0
 80063f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80063fc:	4649      	mov	r1, r9
 80063fe:	008b      	lsls	r3, r1, #2
 8006400:	4641      	mov	r1, r8
 8006402:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006406:	4641      	mov	r1, r8
 8006408:	008a      	lsls	r2, r1, #2
 800640a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800640e:	f7fa fbb1 	bl	8000b74 <__aeabi_uldivmod>
 8006412:	4602      	mov	r2, r0
 8006414:	460b      	mov	r3, r1
 8006416:	4611      	mov	r1, r2
 8006418:	4b38      	ldr	r3, [pc, #224]	; (80064fc <UART_SetConfig+0x4e4>)
 800641a:	fba3 2301 	umull	r2, r3, r3, r1
 800641e:	095b      	lsrs	r3, r3, #5
 8006420:	2264      	movs	r2, #100	; 0x64
 8006422:	fb02 f303 	mul.w	r3, r2, r3
 8006426:	1acb      	subs	r3, r1, r3
 8006428:	011b      	lsls	r3, r3, #4
 800642a:	3332      	adds	r3, #50	; 0x32
 800642c:	4a33      	ldr	r2, [pc, #204]	; (80064fc <UART_SetConfig+0x4e4>)
 800642e:	fba2 2303 	umull	r2, r3, r2, r3
 8006432:	095b      	lsrs	r3, r3, #5
 8006434:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006438:	441c      	add	r4, r3
 800643a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800643e:	2200      	movs	r2, #0
 8006440:	673b      	str	r3, [r7, #112]	; 0x70
 8006442:	677a      	str	r2, [r7, #116]	; 0x74
 8006444:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006448:	4642      	mov	r2, r8
 800644a:	464b      	mov	r3, r9
 800644c:	1891      	adds	r1, r2, r2
 800644e:	60b9      	str	r1, [r7, #8]
 8006450:	415b      	adcs	r3, r3
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006458:	4641      	mov	r1, r8
 800645a:	1851      	adds	r1, r2, r1
 800645c:	6039      	str	r1, [r7, #0]
 800645e:	4649      	mov	r1, r9
 8006460:	414b      	adcs	r3, r1
 8006462:	607b      	str	r3, [r7, #4]
 8006464:	f04f 0200 	mov.w	r2, #0
 8006468:	f04f 0300 	mov.w	r3, #0
 800646c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006470:	4659      	mov	r1, fp
 8006472:	00cb      	lsls	r3, r1, #3
 8006474:	4651      	mov	r1, sl
 8006476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800647a:	4651      	mov	r1, sl
 800647c:	00ca      	lsls	r2, r1, #3
 800647e:	4610      	mov	r0, r2
 8006480:	4619      	mov	r1, r3
 8006482:	4603      	mov	r3, r0
 8006484:	4642      	mov	r2, r8
 8006486:	189b      	adds	r3, r3, r2
 8006488:	66bb      	str	r3, [r7, #104]	; 0x68
 800648a:	464b      	mov	r3, r9
 800648c:	460a      	mov	r2, r1
 800648e:	eb42 0303 	adc.w	r3, r2, r3
 8006492:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	663b      	str	r3, [r7, #96]	; 0x60
 800649e:	667a      	str	r2, [r7, #100]	; 0x64
 80064a0:	f04f 0200 	mov.w	r2, #0
 80064a4:	f04f 0300 	mov.w	r3, #0
 80064a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80064ac:	4649      	mov	r1, r9
 80064ae:	008b      	lsls	r3, r1, #2
 80064b0:	4641      	mov	r1, r8
 80064b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064b6:	4641      	mov	r1, r8
 80064b8:	008a      	lsls	r2, r1, #2
 80064ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80064be:	f7fa fb59 	bl	8000b74 <__aeabi_uldivmod>
 80064c2:	4602      	mov	r2, r0
 80064c4:	460b      	mov	r3, r1
 80064c6:	4b0d      	ldr	r3, [pc, #52]	; (80064fc <UART_SetConfig+0x4e4>)
 80064c8:	fba3 1302 	umull	r1, r3, r3, r2
 80064cc:	095b      	lsrs	r3, r3, #5
 80064ce:	2164      	movs	r1, #100	; 0x64
 80064d0:	fb01 f303 	mul.w	r3, r1, r3
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	011b      	lsls	r3, r3, #4
 80064d8:	3332      	adds	r3, #50	; 0x32
 80064da:	4a08      	ldr	r2, [pc, #32]	; (80064fc <UART_SetConfig+0x4e4>)
 80064dc:	fba2 2303 	umull	r2, r3, r2, r3
 80064e0:	095b      	lsrs	r3, r3, #5
 80064e2:	f003 020f 	and.w	r2, r3, #15
 80064e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4422      	add	r2, r4
 80064ee:	609a      	str	r2, [r3, #8]
}
 80064f0:	bf00      	nop
 80064f2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80064f6:	46bd      	mov	sp, r7
 80064f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064fc:	51eb851f 	.word	0x51eb851f

08006500 <memset>:
 8006500:	4402      	add	r2, r0
 8006502:	4603      	mov	r3, r0
 8006504:	4293      	cmp	r3, r2
 8006506:	d100      	bne.n	800650a <memset+0xa>
 8006508:	4770      	bx	lr
 800650a:	f803 1b01 	strb.w	r1, [r3], #1
 800650e:	e7f9      	b.n	8006504 <memset+0x4>

08006510 <__libc_init_array>:
 8006510:	b570      	push	{r4, r5, r6, lr}
 8006512:	4d0d      	ldr	r5, [pc, #52]	; (8006548 <__libc_init_array+0x38>)
 8006514:	4c0d      	ldr	r4, [pc, #52]	; (800654c <__libc_init_array+0x3c>)
 8006516:	1b64      	subs	r4, r4, r5
 8006518:	10a4      	asrs	r4, r4, #2
 800651a:	2600      	movs	r6, #0
 800651c:	42a6      	cmp	r6, r4
 800651e:	d109      	bne.n	8006534 <__libc_init_array+0x24>
 8006520:	4d0b      	ldr	r5, [pc, #44]	; (8006550 <__libc_init_array+0x40>)
 8006522:	4c0c      	ldr	r4, [pc, #48]	; (8006554 <__libc_init_array+0x44>)
 8006524:	f000 f826 	bl	8006574 <_init>
 8006528:	1b64      	subs	r4, r4, r5
 800652a:	10a4      	asrs	r4, r4, #2
 800652c:	2600      	movs	r6, #0
 800652e:	42a6      	cmp	r6, r4
 8006530:	d105      	bne.n	800653e <__libc_init_array+0x2e>
 8006532:	bd70      	pop	{r4, r5, r6, pc}
 8006534:	f855 3b04 	ldr.w	r3, [r5], #4
 8006538:	4798      	blx	r3
 800653a:	3601      	adds	r6, #1
 800653c:	e7ee      	b.n	800651c <__libc_init_array+0xc>
 800653e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006542:	4798      	blx	r3
 8006544:	3601      	adds	r6, #1
 8006546:	e7f2      	b.n	800652e <__libc_init_array+0x1e>
 8006548:	080065ac 	.word	0x080065ac
 800654c:	080065ac 	.word	0x080065ac
 8006550:	080065ac 	.word	0x080065ac
 8006554:	080065b0 	.word	0x080065b0

08006558 <memcpy>:
 8006558:	440a      	add	r2, r1
 800655a:	4291      	cmp	r1, r2
 800655c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006560:	d100      	bne.n	8006564 <memcpy+0xc>
 8006562:	4770      	bx	lr
 8006564:	b510      	push	{r4, lr}
 8006566:	f811 4b01 	ldrb.w	r4, [r1], #1
 800656a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800656e:	4291      	cmp	r1, r2
 8006570:	d1f9      	bne.n	8006566 <memcpy+0xe>
 8006572:	bd10      	pop	{r4, pc}

08006574 <_init>:
 8006574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006576:	bf00      	nop
 8006578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800657a:	bc08      	pop	{r3}
 800657c:	469e      	mov	lr, r3
 800657e:	4770      	bx	lr

08006580 <_fini>:
 8006580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006582:	bf00      	nop
 8006584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006586:	bc08      	pop	{r3}
 8006588:	469e      	mov	lr, r3
 800658a:	4770      	bx	lr
